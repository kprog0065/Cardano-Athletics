/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/index"],{

/***/ "./contracts/nft.hl":
/*!**************************!*\
  !*** ./contracts/nft.hl ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Program; }\n/* harmony export */ });\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n\n//wraps helios.Program\nclass Program {\n    #program\n\n    constructor(parameters = {}) {\n        // load all the dependencies\n        const allDeps = []\n\n        const depSrcs = new Map()\n\n        function addDepSrcs(dep) {\n            depSrcs.set(dep.name, dep.src)\n\n            for (let d of Object.keys(dep.dependencies)) {\n                addDepSrcs(d)\n            }\n        }\n\n        for (let d of allDeps) {\n            addDepSrcs(d)\n        }\n\n        this.#program = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_0__.Program[\"new\"](`minting nft\r\n\r\nenum Redeemer { \r\n    Init \r\n}\r\n\r\nconst TX_ID: ByteArray = #abc123\r\nconst txId: TxId = TxId::new(TX_ID)\r\nconst TX_IDX: Int = 0\r\nconst outputId: TxOutputId = TxOutputId::new(txId, TX_IDX)\r\nconst TN: String = \"\"\r\n\r\nfunc main(_, ctx: ScriptContext) -> Bool {\r\n    tx: Tx = ctx.tx;\r\n    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();\r\n\r\n    tt_assetclass: AssetClass = AssetClass::new(\r\n        mph, \r\n        TN.encode_utf8()\r\n    );\r\n\r\n    value_minted: Value = tx.minted;\r\n    (value_minted == Value::new(tt_assetclass, 1)).trace(\"NFT1: \") &&\r\n    tx.inputs.any((input: TxInput) -> Bool {\r\n                        (input.output_id == outputId).trace(\"NFT2: \")\r\n                        }\r\n    )\r\n}`, Array.from(depSrcs.values()))\n\n        if (Object.keys(parameters).length > 0) {\n            this.#program.parameters = parameters\n        }\n    }\n\n    get name() {\n        return this.#program.name\n    }\n\n    get paramTypes() {\n        return this.#program.paramTypes\n    }\n\n    get parameters() {\n        return this.#program.parameters\n    }\n\n    get types() {\n        return this.#program.types\n    }\n\n    set parameters(params) {\n        this.#program.parameters = params\n    }\n\n    compile(optimize = false) {\n        return this.#program.compile(optimize)\n    }\n\n    evalParam(paramName) {\n        return this.#program.evalParam(paramName)\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250cmFjdHMvbmZ0LmhsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ2U7QUFDZjs7QUFFQSwrQkFBK0I7QUFDL0I7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsOERBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbnRyYWN0cy9uZnQuaGw/Nzg5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBoZWxpb3MgZnJvbSBcIkBoeXBlcmlvbmJ0L2hlbGlvc1wiXG4vL3dyYXBzIGhlbGlvcy5Qcm9ncmFtXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmFtIHtcbiAgICAjcHJvZ3JhbVxuXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIC8vIGxvYWQgYWxsIHRoZSBkZXBlbmRlbmNpZXNcbiAgICAgICAgY29uc3QgYWxsRGVwcyA9IFtdXG5cbiAgICAgICAgY29uc3QgZGVwU3JjcyA9IG5ldyBNYXAoKVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZERlcFNyY3MoZGVwKSB7XG4gICAgICAgICAgICBkZXBTcmNzLnNldChkZXAubmFtZSwgZGVwLnNyYylcblxuICAgICAgICAgICAgZm9yIChsZXQgZCBvZiBPYmplY3Qua2V5cyhkZXAuZGVwZW5kZW5jaWVzKSkge1xuICAgICAgICAgICAgICAgIGFkZERlcFNyY3MoZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGQgb2YgYWxsRGVwcykge1xuICAgICAgICAgICAgYWRkRGVwU3JjcyhkKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4jcHJvZ3JhbSA9IGhlbGlvcy5Qcm9ncmFtLm5ldyhgbWludGluZyBuZnRcclxuXHJcbmVudW0gUmVkZWVtZXIgeyBcclxuICAgIEluaXQgXHJcbn1cclxuXHJcbmNvbnN0IFRYX0lEOiBCeXRlQXJyYXkgPSAjYWJjMTIzXHJcbmNvbnN0IHR4SWQ6IFR4SWQgPSBUeElkOjpuZXcoVFhfSUQpXHJcbmNvbnN0IFRYX0lEWDogSW50ID0gMFxyXG5jb25zdCBvdXRwdXRJZDogVHhPdXRwdXRJZCA9IFR4T3V0cHV0SWQ6Om5ldyh0eElkLCBUWF9JRFgpXHJcbmNvbnN0IFROOiBTdHJpbmcgPSBcIlwiXHJcblxyXG5mdW5jIG1haW4oXywgY3R4OiBTY3JpcHRDb250ZXh0KSAtPiBCb29sIHtcclxuICAgIHR4OiBUeCA9IGN0eC50eDtcclxuICAgIG1waDogTWludGluZ1BvbGljeUhhc2ggPSBjdHguZ2V0X2N1cnJlbnRfbWludGluZ19wb2xpY3lfaGFzaCgpO1xyXG5cclxuICAgIHR0X2Fzc2V0Y2xhc3M6IEFzc2V0Q2xhc3MgPSBBc3NldENsYXNzOjpuZXcoXHJcbiAgICAgICAgbXBoLCBcclxuICAgICAgICBUTi5lbmNvZGVfdXRmOCgpXHJcbiAgICApO1xyXG5cclxuICAgIHZhbHVlX21pbnRlZDogVmFsdWUgPSB0eC5taW50ZWQ7XHJcbiAgICAodmFsdWVfbWludGVkID09IFZhbHVlOjpuZXcodHRfYXNzZXRjbGFzcywgMSkpLnRyYWNlKFwiTkZUMTogXCIpICYmXHJcbiAgICB0eC5pbnB1dHMuYW55KChpbnB1dDogVHhJbnB1dCkgLT4gQm9vbCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChpbnB1dC5vdXRwdXRfaWQgPT0gb3V0cHV0SWQpLnRyYWNlKFwiTkZUMjogXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIClcclxufWAsIEFycmF5LmZyb20oZGVwU3Jjcy52YWx1ZXMoKSkpXG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuI3Byb2dyYW0ucGFyYW1ldGVycyA9IHBhcmFtZXRlcnNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcHJvZ3JhbS5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IHBhcmFtVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwcm9ncmFtLnBhcmFtVHlwZXNcbiAgICB9XG5cbiAgICBnZXQgcGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb2dyYW0ucGFyYW1ldGVyc1xuICAgIH1cblxuICAgIGdldCB0eXBlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb2dyYW0udHlwZXNcbiAgICB9XG5cbiAgICBzZXQgcGFyYW1ldGVycyhwYXJhbXMpIHtcbiAgICAgICAgdGhpcy4jcHJvZ3JhbS5wYXJhbWV0ZXJzID0gcGFyYW1zXG4gICAgfVxuXG4gICAgY29tcGlsZShvcHRpbWl6ZSA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwcm9ncmFtLmNvbXBpbGUob3B0aW1pemUpXG4gICAgfVxuXG4gICAgZXZhbFBhcmFtKHBhcmFtTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcHJvZ3JhbS5ldmFsUGFyYW0ocGFyYW1OYW1lKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./contracts/nft.hl\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/Home.module.css":
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/Home.module.css ***!
  \************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".Home_container__bCOhY {\\r\\n  padding: 0 1rem;\\r\\n}\\r\\n\\r\\n.Home_main__nLjiQ {\\r\\n  min-height: 100vh;\\r\\n  padding: 0.3rem 0;\\r\\n  flex: 1 1;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: top;\\r\\n  align-items: left;\\r\\n}\\r\\n\\r\\n.Home_footer____T7K {\\r\\n  display: flex;\\r\\n  flex: 1 1;\\r\\n  padding: 2rem 0;\\r\\n  border-top: 1px solid #eaeaea;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.Home_footer____T7K a {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  flex-grow: 1;\\r\\n}\\r\\n\\r\\n.Home_title__T09hD a {\\r\\n  color: #0070f3;\\r\\n  text-decoration: none;\\r\\n}\\r\\n\\r\\n.Home_title__T09hD a:hover,\\r\\n.Home_title__T09hD a:focus,\\r\\n.Home_title__T09hD a:active {\\r\\n  text-decoration: underline;\\r\\n}\\r\\n\\r\\n.Home_title__T09hD {\\r\\n  margin: 0;\\r\\n  line-height: 1.15;\\r\\n  font-size: 2rem;\\r\\n}\\r\\n\\r\\n.Home_title__T09hD,\\r\\n.Home_description__41Owk {\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.Home_description__41Owk {\\r\\n  margin: 4rem 0;\\r\\n  line-height: 1.5;\\r\\n  font-size: 1.5rem;\\r\\n}\\r\\n\\r\\n.Home_code__suPER {\\r\\n  background: #fafafa;\\r\\n  border-radius: 5px;\\r\\n  padding: 0.75rem;\\r\\n  font-size: 1.1rem;\\r\\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\\r\\n    Bitstream Vera Sans Mono, Courier New, monospace;\\r\\n}\\r\\n\\r\\n.Home_grid__GxQ85 {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  flex-wrap: wrap;\\r\\n  max-width: 800px;\\r\\n}\\r\\n\\r\\n.Home_border__siNOS {\\r\\n  margin: 1rem;\\r\\n  padding: 0.3rem;\\r\\n  text-align: left;\\r\\n  color: inherit;\\r\\n  text-decoration: none;\\r\\n  border: 1px solid #eaeaea;\\r\\n  border-radius: 10px;\\r\\n  transition: color 0.15s ease, border-color 0.15s ease;\\r\\n  max-width: 560px;\\r\\n  min-width: 560px;\\r\\n}\\r\\n\\r\\n\\r\\n.Home_borderwallet__0hazi {\\r\\n  margin: 1rem;\\r\\n  padding: 0.3rem;\\r\\n  text-align: left;\\r\\n  color: inherit;\\r\\n  text-decoration: none;\\r\\n  border: 1px solid #eaeaea;\\r\\n  border-radius: 10px;\\r\\n  transition: color 0.15s ease, border-color 0.15s ease;\\r\\n  max-width: 300px;\\r\\n}\\r\\n\\r\\n.Home_card___LpL1 {\\r\\n  margin: 1rem;\\r\\n  padding: 1.5rem;\\r\\n  text-align: left;\\r\\n  color: inherit;\\r\\n  text-decoration: none;\\r\\n  border: 1px solid #eaeaea;\\r\\n  border-radius: 10px;\\r\\n  transition: color 0.15s ease, border-color 0.15s ease;\\r\\n  max-width: 300px;\\r\\n}\\r\\n\\r\\n.Home_card___LpL1:hover,\\r\\n.Home_card___LpL1:focus,\\r\\n.Home_card___LpL1:active {\\r\\n  color: #0070f3;\\r\\n  border-color: #0070f3;\\r\\n}\\r\\n\\r\\n.Home_card___LpL1 h2 {\\r\\n  margin: 0 0 1rem 0;\\r\\n  font-size: 1.5rem;\\r\\n}\\r\\n\\r\\n.Home_card___LpL1 p {\\r\\n  margin: 0;\\r\\n  font-size: 1.25rem;\\r\\n  line-height: 1.5;\\r\\n}\\r\\n\\r\\n.Home_logo__27_tb {\\r\\n  height: 1em;\\r\\n  margin-left: 0.5rem;\\r\\n}\\r\\n\\r\\n@media (max-width: 600px) {\\r\\n  .Home_grid__GxQ85 {\\r\\n    width: 100%;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (prefers-color-scheme: dark) {\\r\\n  .Home_card___LpL1,\\r\\n  .Home_footer____T7K {\\r\\n    border-color: #222;\\r\\n  }\\r\\n  .Home_code__suPER {\\r\\n    background: #111;\\r\\n  }\\r\\n  .Home_logo__27_tb img {\\r\\n    filter: invert(1);\\r\\n  }\\r\\n}\\r\\n.Home_container__bCOhY {\\r\\n  min-height: 100vh;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  padding: 0 2rem;\\r\\n  background-color: #020230; /* Match background color */\\r\\n}\\r\\n\\r\\n.Home_main__nLjiQ {\\r\\n  padding: 2rem;\\r\\n  background: #1a1a2e; /* Darker background for contrast */\\r\\n  border-radius: 8px;\\r\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Slightly darker shadow */\\r\\n  width: 100%;\\r\\n  max-width: 800px;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.Home_title__T09hD {\\r\\n  font-size: 2rem;\\r\\n  margin-bottom: 1rem;\\r\\n  color: #fff; \\r\\n}\\r\\n\\r\\n.Home_borderwallet__0hazi, .Home_border__siNOS {\\r\\n  border: 1px solid #fffefe; \\r\\n  padding: 1rem;\\r\\n  border-radius: 8px;\\r\\n  margin: 1rem 0;\\r\\n  background-color: #1a1a2e; \\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.Home_backButton__p7X_l {\\r\\n  display: inline-block;\\r\\n  margin-top: 2rem;\\r\\n  padding: 0.5rem 1rem;\\r\\n  background-color: #f8636b; \\r\\n  color: white;\\r\\n  border-radius: 5px;\\r\\n  text-decoration: none;\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n.Home_backButton__p7X_l:hover {\\r\\n  background-color: #e53e3e; \\r\\n}\\r\\n\\r\\n.Home_footer____T7K {\\r\\n  padding: 1rem;\\r\\n  text-align: center;\\r\\n  color: #fff; \\r\\n}\\r\\n\\r\\n/* Form styles */\\r\\n.Home_sub-form-main__mS0im {\\r\\n  margin-top: 1.5rem;\\r\\n  color: #fff;\\r\\n  font-size: 1.25rem;\\r\\n  background-color: #020230; \\r\\n  padding: 20px;\\r\\n  border-radius: 8px;\\r\\n}\\r\\n\\r\\n.Home_input__ZarWZ[type=\\\"radio\\\"] {\\r\\n  margin-right: 0.5rem;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.Home_label__UYtOa {\\r\\n  margin-right: 1rem;\\r\\n  color: #fff; \\r\\n}\\r\\n\\r\\n.Home_MuiInputLabel-root__5U_WZ {\\r\\n  color: #fff !important; \\r\\n}\\r\\n\\r\\n.Home_MuiInputBase-input__bXu_R {\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.Home_MuiButton-outlined__2K5Kv {\\r\\n  margin-top: 1rem;\\r\\n  margin-bottom: 1rem;\\r\\n  width: 100px;\\r\\n  color: #f8636b; /* Match button text color */\\r\\n  border-color: #f8636b; /* Match button border color */\\r\\n  background-color: transparent;\\r\\n}\\r\\n\\r\\n.Home_MuiButton-outlined__2K5Kv:hover {\\r\\n  border-color: #e53e3e; /* Darker shade for hover */\\r\\n  color: #e53e3e; /* Darker shade for hover */\\r\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://styles/Home.module.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,SAAO;EACP,aAAa;EACb,sBAAsB;EACtB,oBAAoB;EACpB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,SAAO;EACP,eAAe;EACf,6BAA6B;EAC7B,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;;;EAGE,0BAA0B;AAC5B;;AAEA;EACE,SAAS;EACT,iBAAiB;EACjB,eAAe;AACjB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB;oDACkD;AACpD;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,qBAAqB;EACrB,yBAAyB;EACzB,mBAAmB;EACnB,qDAAqD;EACrD,gBAAgB;EAChB,gBAAgB;AAClB;;;AAGA;EACE,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,qBAAqB;EACrB,yBAAyB;EACzB,mBAAmB;EACnB,qDAAqD;EACrD,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,qBAAqB;EACrB,yBAAyB;EACzB,mBAAmB;EACnB,qDAAqD;EACrD,gBAAgB;AAClB;;AAEA;;;EAGE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE;IACE,WAAW;IACX,sBAAsB;EACxB;AACF;;AAEA;EACE;;IAEE,kBAAkB;EACpB;EACA;IACE,gBAAgB;EAClB;EACA;IACE,iBAAiB;EACnB;AACF;AACA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,yBAAyB,EAAE,2BAA2B;AACxD;;AAEA;EACE,aAAa;EACb,mBAAmB,EAAE,mCAAmC;EACxD,kBAAkB;EAClB,uCAAuC,EAAE,2BAA2B;EACpE,WAAW;EACX,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,cAAc;EACd,yBAAyB;EACzB,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,gBAAgB;EAChB,oBAAoB;EACpB,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,WAAW;AACb;;AAEA,gBAAgB;AAChB;EACE,kBAAkB;EAClB,WAAW;EACX,kBAAkB;EAClB,yBAAyB;EACzB,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;EACpB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,YAAY;EACZ,cAAc,EAAE,4BAA4B;EAC5C,qBAAqB,EAAE,8BAA8B;EACrD,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB,EAAE,2BAA2B;EAClD,cAAc,EAAE,2BAA2B;AAC7C\",\"sourcesContent\":[\".container {\\r\\n  padding: 0 1rem;\\r\\n}\\r\\n\\r\\n.main {\\r\\n  min-height: 100vh;\\r\\n  padding: 0.3rem 0;\\r\\n  flex: 1;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: top;\\r\\n  align-items: left;\\r\\n}\\r\\n\\r\\n.footer {\\r\\n  display: flex;\\r\\n  flex: 1;\\r\\n  padding: 2rem 0;\\r\\n  border-top: 1px solid #eaeaea;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.footer a {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  flex-grow: 1;\\r\\n}\\r\\n\\r\\n.title a {\\r\\n  color: #0070f3;\\r\\n  text-decoration: none;\\r\\n}\\r\\n\\r\\n.title a:hover,\\r\\n.title a:focus,\\r\\n.title a:active {\\r\\n  text-decoration: underline;\\r\\n}\\r\\n\\r\\n.title {\\r\\n  margin: 0;\\r\\n  line-height: 1.15;\\r\\n  font-size: 2rem;\\r\\n}\\r\\n\\r\\n.title,\\r\\n.description {\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.description {\\r\\n  margin: 4rem 0;\\r\\n  line-height: 1.5;\\r\\n  font-size: 1.5rem;\\r\\n}\\r\\n\\r\\n.code {\\r\\n  background: #fafafa;\\r\\n  border-radius: 5px;\\r\\n  padding: 0.75rem;\\r\\n  font-size: 1.1rem;\\r\\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\\r\\n    Bitstream Vera Sans Mono, Courier New, monospace;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  flex-wrap: wrap;\\r\\n  max-width: 800px;\\r\\n}\\r\\n\\r\\n.border {\\r\\n  margin: 1rem;\\r\\n  padding: 0.3rem;\\r\\n  text-align: left;\\r\\n  color: inherit;\\r\\n  text-decoration: none;\\r\\n  border: 1px solid #eaeaea;\\r\\n  border-radius: 10px;\\r\\n  transition: color 0.15s ease, border-color 0.15s ease;\\r\\n  max-width: 560px;\\r\\n  min-width: 560px;\\r\\n}\\r\\n\\r\\n\\r\\n.borderwallet {\\r\\n  margin: 1rem;\\r\\n  padding: 0.3rem;\\r\\n  text-align: left;\\r\\n  color: inherit;\\r\\n  text-decoration: none;\\r\\n  border: 1px solid #eaeaea;\\r\\n  border-radius: 10px;\\r\\n  transition: color 0.15s ease, border-color 0.15s ease;\\r\\n  max-width: 300px;\\r\\n}\\r\\n\\r\\n.card {\\r\\n  margin: 1rem;\\r\\n  padding: 1.5rem;\\r\\n  text-align: left;\\r\\n  color: inherit;\\r\\n  text-decoration: none;\\r\\n  border: 1px solid #eaeaea;\\r\\n  border-radius: 10px;\\r\\n  transition: color 0.15s ease, border-color 0.15s ease;\\r\\n  max-width: 300px;\\r\\n}\\r\\n\\r\\n.card:hover,\\r\\n.card:focus,\\r\\n.card:active {\\r\\n  color: #0070f3;\\r\\n  border-color: #0070f3;\\r\\n}\\r\\n\\r\\n.card h2 {\\r\\n  margin: 0 0 1rem 0;\\r\\n  font-size: 1.5rem;\\r\\n}\\r\\n\\r\\n.card p {\\r\\n  margin: 0;\\r\\n  font-size: 1.25rem;\\r\\n  line-height: 1.5;\\r\\n}\\r\\n\\r\\n.logo {\\r\\n  height: 1em;\\r\\n  margin-left: 0.5rem;\\r\\n}\\r\\n\\r\\n@media (max-width: 600px) {\\r\\n  .grid {\\r\\n    width: 100%;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (prefers-color-scheme: dark) {\\r\\n  .card,\\r\\n  .footer {\\r\\n    border-color: #222;\\r\\n  }\\r\\n  .code {\\r\\n    background: #111;\\r\\n  }\\r\\n  .logo img {\\r\\n    filter: invert(1);\\r\\n  }\\r\\n}\\r\\n.container {\\r\\n  min-height: 100vh;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  padding: 0 2rem;\\r\\n  background-color: #020230; /* Match background color */\\r\\n}\\r\\n\\r\\n.main {\\r\\n  padding: 2rem;\\r\\n  background: #1a1a2e; /* Darker background for contrast */\\r\\n  border-radius: 8px;\\r\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Slightly darker shadow */\\r\\n  width: 100%;\\r\\n  max-width: 800px;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.title {\\r\\n  font-size: 2rem;\\r\\n  margin-bottom: 1rem;\\r\\n  color: #fff; \\r\\n}\\r\\n\\r\\n.borderwallet, .border {\\r\\n  border: 1px solid #fffefe; \\r\\n  padding: 1rem;\\r\\n  border-radius: 8px;\\r\\n  margin: 1rem 0;\\r\\n  background-color: #1a1a2e; \\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.backButton {\\r\\n  display: inline-block;\\r\\n  margin-top: 2rem;\\r\\n  padding: 0.5rem 1rem;\\r\\n  background-color: #f8636b; \\r\\n  color: white;\\r\\n  border-radius: 5px;\\r\\n  text-decoration: none;\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n.backButton:hover {\\r\\n  background-color: #e53e3e; \\r\\n}\\r\\n\\r\\n.footer {\\r\\n  padding: 1rem;\\r\\n  text-align: center;\\r\\n  color: #fff; \\r\\n}\\r\\n\\r\\n/* Form styles */\\r\\n.sub-form-main {\\r\\n  margin-top: 1.5rem;\\r\\n  color: #fff;\\r\\n  font-size: 1.25rem;\\r\\n  background-color: #020230; \\r\\n  padding: 20px;\\r\\n  border-radius: 8px;\\r\\n}\\r\\n\\r\\n.input[type=\\\"radio\\\"] {\\r\\n  margin-right: 0.5rem;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.label {\\r\\n  margin-right: 1rem;\\r\\n  color: #fff; \\r\\n}\\r\\n\\r\\n.MuiInputLabel-root {\\r\\n  color: #fff !important; \\r\\n}\\r\\n\\r\\n.MuiInputBase-input {\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.MuiButton-outlined {\\r\\n  margin-top: 1rem;\\r\\n  margin-bottom: 1rem;\\r\\n  width: 100px;\\r\\n  color: #f8636b; /* Match button text color */\\r\\n  border-color: #f8636b; /* Match button border color */\\r\\n  background-color: transparent;\\r\\n}\\r\\n\\r\\n.MuiButton-outlined:hover {\\r\\n  border-color: #e53e3e; /* Darker shade for hover */\\r\\n  color: #e53e3e; /* Darker shade for hover */\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"container\": \"Home_container__bCOhY\",\n\t\"main\": \"Home_main__nLjiQ\",\n\t\"footer\": \"Home_footer____T7K\",\n\t\"title\": \"Home_title__T09hD\",\n\t\"description\": \"Home_description__41Owk\",\n\t\"code\": \"Home_code__suPER\",\n\t\"grid\": \"Home_grid__GxQ85\",\n\t\"border\": \"Home_border__siNOS\",\n\t\"borderwallet\": \"Home_borderwallet__0hazi\",\n\t\"card\": \"Home_card___LpL1\",\n\t\"logo\": \"Home_logo__27_tb\",\n\t\"backButton\": \"Home_backButton__p7X_l\",\n\t\"sub-form-main\": \"Home_sub-form-main__mS0im\",\n\t\"input\": \"Home_input__ZarWZ\",\n\t\"label\": \"Home_label__UYtOa\",\n\t\"MuiInputLabel-root\": \"Home_MuiInputLabel-root__5U_WZ\",\n\t\"MuiInputBase-input\": \"Home_MuiInputBase-input__bXu_R\",\n\t\"MuiButton-outlined\": \"Home_MuiButton-outlined__2K5Kv\"\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/Home.module.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/MintNFT.module.css":
/*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/MintNFT.module.css ***!
  \***************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/* MintNFT.module.css */\\r\\n\\r\\n.MintNFT_formContainer__Al_mi {\\r\\n    background-color: #020230;\\r\\n    color: white;\\r\\n    padding: 20px;\\r\\n    border-radius: 8px;\\r\\n    max-width: 500px;\\r\\n    margin: auto;\\r\\n  }\\r\\n  \\r\\n  .MintNFT_formContainer__Al_mi div {\\r\\n    margin-bottom: 15px;\\r\\n  }\\r\\n  \\r\\n  .MintNFT_formContainer__Al_mi b {\\r\\n    display: block;\\r\\n    margin-bottom: 5px;\\r\\n  }\\r\\n  \\r\\n  .MintNFT_formContainer__Al_mi input[type='text'] {\\r\\n    width: 100%;\\r\\n    padding: 10px;\\r\\n    border: 1px solid #ffffff;\\r\\n    border-radius: 4px;\\r\\n    background-color: #020230;\\r\\n    color: white;\\r\\n  }\\r\\n  \\r\\n  .MintNFT_formContainer__Al_mi input[type='submit'] {\\r\\n    background-color: #f8636b;\\r\\n    color: white;\\r\\n    border: none;\\r\\n    padding: 15px 20px;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n  \\r\\n  .MintNFT_formContainer__Al_mi input[type='submit']:hover {\\r\\n    background-color: #e53e3e;\\r\\n  }\\r\\n  \", \"\",{\"version\":3,\"sources\":[\"webpack://styles/MintNFT.module.css\"],\"names\":[],\"mappings\":\"AAAA,uBAAuB;;AAEvB;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,gBAAgB;IAChB,YAAY;EACd;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,cAAc;IACd,kBAAkB;EACpB;;EAEA;IACE,WAAW;IACX,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;EACd;;EAEA;IACE,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;EACjB;;EAEA;IACE,yBAAyB;EAC3B\",\"sourcesContent\":[\"/* MintNFT.module.css */\\r\\n\\r\\n.formContainer {\\r\\n    background-color: #020230;\\r\\n    color: white;\\r\\n    padding: 20px;\\r\\n    border-radius: 8px;\\r\\n    max-width: 500px;\\r\\n    margin: auto;\\r\\n  }\\r\\n  \\r\\n  .formContainer div {\\r\\n    margin-bottom: 15px;\\r\\n  }\\r\\n  \\r\\n  .formContainer b {\\r\\n    display: block;\\r\\n    margin-bottom: 5px;\\r\\n  }\\r\\n  \\r\\n  .formContainer input[type='text'] {\\r\\n    width: 100%;\\r\\n    padding: 10px;\\r\\n    border: 1px solid #ffffff;\\r\\n    border-radius: 4px;\\r\\n    background-color: #020230;\\r\\n    color: white;\\r\\n  }\\r\\n  \\r\\n  .formContainer input[type='submit'] {\\r\\n    background-color: #f8636b;\\r\\n    color: white;\\r\\n    border: none;\\r\\n    padding: 15px 20px;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n  \\r\\n  .formContainer input[type='submit']:hover {\\r\\n    background-color: #e53e3e;\\r\\n  }\\r\\n  \"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"formContainer\": \"MintNFT_formContainer__Al_mi\"\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls2XS51c2VbMV0hLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNl0udXNlWzJdIS4vc3R5bGVzL01pbnRORlQubW9kdWxlLmNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLG1LQUErRTtBQUN6SDtBQUNBO0FBQ0EseUdBQXlHLGtDQUFrQyxxQkFBcUIsc0JBQXNCLDJCQUEyQix5QkFBeUIscUJBQXFCLE9BQU8sK0NBQStDLDRCQUE0QixPQUFPLDZDQUE2Qyx1QkFBdUIsMkJBQTJCLE9BQU8sOERBQThELG9CQUFvQixzQkFBc0Isa0NBQWtDLDJCQUEyQixrQ0FBa0MscUJBQXFCLE9BQU8sZ0VBQWdFLGtDQUFrQyxxQkFBcUIscUJBQXFCLDJCQUEyQiwyQkFBMkIsd0JBQXdCLE9BQU8sc0VBQXNFLGtDQUFrQyxPQUFPLGFBQWEsa0dBQWtHLE1BQU0sWUFBWSxXQUFXLFVBQVUsWUFBWSxhQUFhLFdBQVcsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxPQUFPLEtBQUssVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLFdBQVcsTUFBTSxLQUFLLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxXQUFXLE9BQU8sS0FBSyxZQUFZLDBFQUEwRSxrQ0FBa0MscUJBQXFCLHNCQUFzQiwyQkFBMkIseUJBQXlCLHFCQUFxQixPQUFPLGdDQUFnQyw0QkFBNEIsT0FBTyw4QkFBOEIsdUJBQXVCLDJCQUEyQixPQUFPLCtDQUErQyxvQkFBb0Isc0JBQXNCLGtDQUFrQywyQkFBMkIsa0NBQWtDLHFCQUFxQixPQUFPLGlEQUFpRCxrQ0FBa0MscUJBQXFCLHFCQUFxQiwyQkFBMkIsMkJBQTJCLHdCQUF3QixPQUFPLHVEQUF1RCxrQ0FBa0MsT0FBTyx5QkFBeUI7QUFDN3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3R5bGVzL01pbnRORlQubW9kdWxlLmNzcz9lZWEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiBNaW50TkZULm1vZHVsZS5jc3MgKi9cXHJcXG5cXHJcXG4uTWludE5GVF9mb3JtQ29udGFpbmVyX19BbF9taSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMjAyMzA7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5NaW50TkZUX2Zvcm1Db250YWluZXJfX0FsX21pIGRpdiB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5NaW50TkZUX2Zvcm1Db250YWluZXJfX0FsX21pIGIge1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcclxcbiAgfVxcclxcbiAgXFxyXFxuICAuTWludE5GVF9mb3JtQ29udGFpbmVyX19BbF9taSBpbnB1dFt0eXBlPSd0ZXh0J10ge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDIwMjMwO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5NaW50TkZUX2Zvcm1Db250YWluZXJfX0FsX21pIGlucHV0W3R5cGU9J3N1Ym1pdCddIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4NjM2YjtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIHBhZGRpbmc6IDE1cHggMjBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5NaW50TkZUX2Zvcm1Db250YWluZXJfX0FsX21pIGlucHV0W3R5cGU9J3N1Ym1pdCddOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U1M2UzZTtcXHJcXG4gIH1cXHJcXG4gIFwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zdHlsZXMvTWludE5GVC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHVCQUF1Qjs7QUFFdkI7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLFlBQVk7RUFDZDs7RUFFQTtJQUNFLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLGNBQWM7SUFDZCxrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxXQUFXO0lBQ1gsYUFBYTtJQUNiLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLFlBQVk7RUFDZDs7RUFFQTtJQUNFLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBNaW50TkZULm1vZHVsZS5jc3MgKi9cXHJcXG5cXHJcXG4uZm9ybUNvbnRhaW5lciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMjAyMzA7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5mb3JtQ29udGFpbmVyIGRpdiB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5mb3JtQ29udGFpbmVyIGIge1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcclxcbiAgfVxcclxcbiAgXFxyXFxuICAuZm9ybUNvbnRhaW5lciBpbnB1dFt0eXBlPSd0ZXh0J10ge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDIwMjMwO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5mb3JtQ29udGFpbmVyIGlucHV0W3R5cGU9J3N1Ym1pdCddIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4NjM2YjtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIHBhZGRpbmc6IDE1cHggMjBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5mb3JtQ29udGFpbmVyIGlucHV0W3R5cGU9J3N1Ym1pdCddOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U1M2UzZTtcXHJcXG4gIH1cXHJcXG4gIFwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImZvcm1Db250YWluZXJcIjogXCJNaW50TkZUX2Zvcm1Db250YWluZXJfX0FsX21pXCJcbn07XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/MintNFT.module.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fapp%2Fpages%2Findex.tsx&page=%2F!":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fapp%2Fpages%2Findex.tsx&page=%2F! ***!
  \****************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(/*! ./pages/index.tsx */ \"./pages/index.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD0lMkZhcHAlMkZwYWdlcyUyRmluZGV4LnRzeCZwYWdlPSUyRiEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDMUM7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzRiMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9cIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL2luZGV4LnRzeFwiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvXCJdKVxuICAgICAgfSk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fapp%2Fpages%2Findex.tsx&page=%2F!\n"));

/***/ }),

/***/ "./styles/Home.module.css":
/*!********************************!*\
  !*** ./styles/Home.module.css ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./Home.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/Home.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./Home.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/Home.module.css\",\n      function () {\n        content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./Home.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/Home.module.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvSG9tZS5tb2R1bGUuY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxvTkFBd0c7QUFDMUgsMEJBQTBCLG1CQUFPLENBQUMsK2VBQW1QOztBQUVyUjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsSUFBSSxJQUFVO0FBQ2QseUJBQXlCLFVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksaUJBQWlCO0FBQ3JCLE1BQU0sK2VBQW1QO0FBQ3pQO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsK2VBQW1QOztBQUU3UTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLFVBQVU7QUFDWjtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvSG9tZS5tb2R1bGUuY3NzPzNjYmQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzZdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNl0udXNlWzJdIS4vSG9tZS5tb2R1bGUuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCBzdHlsZS1sb2FkZXIgaW5qZWN0cyBDU1MgaW50byB0aGUgYm90dG9tXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIDxoZWFkPi4gVGhpcyBjYXVzZXMgb3JkZXJpbmcgcHJvYmxlbXMgYmV0d2VlbiBkZXZcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHByb2QuIFRvIGZpeCB0aGlzLCB3ZSByZW5kZXIgYSA8bm9zY3JpcHQ+IHRhZyBhc1xuICAgICAgICAgICAgICAgICAgICAvLyBhbiBhbmNob3IgZm9yIHRoZSBzdHlsZXMgdG8gYmUgcGxhY2VkIGJlZm9yZS4gVGhlc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBfYmVmb3JlXyA8c3R5bGUganN4IGdsb2JhbD4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGVsZW1lbnRzIHNob3VsZCBhbHdheXMgZXhpc3QuIElmIHRoZXkgZG8gbm90LFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNvZGUgc2hvdWxkIGZhaWwuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNfX25leHRfY3NzX19ET19OT1RfVVNFX19cIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jaG9yRWxlbWVudC5wYXJlbnROb2RlLy8gTm9ybWFsbHkgPGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWFjaCBzdHlsZSB0YWcgc2hvdWxkIGJlIHBsYWNlZCByaWdodCBiZWZvcmUgb3VyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvci4gQnkgaW5zZXJ0aW5nIGJlZm9yZSBhbmQgbm90IGFmdGVyLCB3ZSBkbyBub3RcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byB0cmFjayB0aGUgbGFzdCBpbnNlcnRlZCBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCBhbmNob3JFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9O1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XG4gICAgaWYgKCFhICYmIGIgfHwgYSAmJiAhYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBwO1xuICAgIGZvcihwIGluIGEpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFbcF0gIT09IGJbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IocCBpbiBiKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYVtwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbiAgICB2YXIgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcbiAgICAgIFwiISEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls2XS51c2VbMV0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzZdLnVzZVsyXSEuL0hvbWUubW9kdWxlLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNl0udXNlWzFdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls2XS51c2VbMl0hLi9Ib21lLm1vZHVsZS5jc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./styles/Home.module.css\n"));

/***/ }),

/***/ "./styles/MintNFT.module.css":
/*!***********************************!*\
  !*** ./styles/MintNFT.module.css ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./MintNFT.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/MintNFT.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./MintNFT.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/MintNFT.module.css\",\n      function () {\n        content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./MintNFT.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/MintNFT.module.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvTWludE5GVC5tb2R1bGUuY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxvTkFBd0c7QUFDMUgsMEJBQTBCLG1CQUFPLENBQUMscWZBQXNQOztBQUV4Ujs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsSUFBSSxJQUFVO0FBQ2QseUJBQXlCLFVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksaUJBQWlCO0FBQ3JCLE1BQU0scWZBQXNQO0FBQzVQO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscWZBQXNQOztBQUVoUjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLFVBQVU7QUFDWjtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvTWludE5GVC5tb2R1bGUuY3NzPzY1YzEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzZdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNl0udXNlWzJdIS4vTWludE5GVC5tb2R1bGUuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCBzdHlsZS1sb2FkZXIgaW5qZWN0cyBDU1MgaW50byB0aGUgYm90dG9tXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIDxoZWFkPi4gVGhpcyBjYXVzZXMgb3JkZXJpbmcgcHJvYmxlbXMgYmV0d2VlbiBkZXZcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHByb2QuIFRvIGZpeCB0aGlzLCB3ZSByZW5kZXIgYSA8bm9zY3JpcHQ+IHRhZyBhc1xuICAgICAgICAgICAgICAgICAgICAvLyBhbiBhbmNob3IgZm9yIHRoZSBzdHlsZXMgdG8gYmUgcGxhY2VkIGJlZm9yZS4gVGhlc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBfYmVmb3JlXyA8c3R5bGUganN4IGdsb2JhbD4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGVsZW1lbnRzIHNob3VsZCBhbHdheXMgZXhpc3QuIElmIHRoZXkgZG8gbm90LFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNvZGUgc2hvdWxkIGZhaWwuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNfX25leHRfY3NzX19ET19OT1RfVVNFX19cIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jaG9yRWxlbWVudC5wYXJlbnROb2RlLy8gTm9ybWFsbHkgPGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWFjaCBzdHlsZSB0YWcgc2hvdWxkIGJlIHBsYWNlZCByaWdodCBiZWZvcmUgb3VyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvci4gQnkgaW5zZXJ0aW5nIGJlZm9yZSBhbmQgbm90IGFmdGVyLCB3ZSBkbyBub3RcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byB0cmFjayB0aGUgbGFzdCBpbnNlcnRlZCBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCBhbmNob3JFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9O1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XG4gICAgaWYgKCFhICYmIGIgfHwgYSAmJiAhYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBwO1xuICAgIGZvcihwIGluIGEpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFbcF0gIT09IGJbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IocCBpbiBiKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYVtwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbiAgICB2YXIgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcbiAgICAgIFwiISEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls2XS51c2VbMV0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzZdLnVzZVsyXSEuL01pbnRORlQubW9kdWxlLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbNl0udXNlWzFdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls2XS51c2VbMl0hLi9NaW50TkZULm1vZHVsZS5jc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./styles/MintNFT.module.css\n"));

/***/ }),

/***/ "./components/MintNFT.tsx":
/*!********************************!*\
  !*** ./components/MintNFT.tsx ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _styles_MintNFT_module_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles/MintNFT.module.css */ \"./styles/MintNFT.module.css\");\n/* harmony import */ var _styles_MintNFT_module_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_styles_MintNFT_module_css__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _s = $RefreshSig$();\n\n\nconst mintNFT = (param)=>{\n    let { onMintNFT  } = param;\n    _s();\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [name, setName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [description, setDescription] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [img, setImg] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const onSubmit = (e)=>{\n        e.preventDefault() // prevent full page refresh\n        ;\n        onMintNFT([\n            address,\n            name,\n            description,\n            img\n        ]);\n    };\n    return(// <form onSubmit={onSubmit}>\n    //     <div>\n    //         <b>Destination Wallet Address</b> \n    //         <br></br>\n    //         <input name='address' type='text' id='address' placeholder='Enter Destination Wallet Address' \n    //         value={address}\n    //         onChange={(e) => setAddress(e.target.value)}\n    //         />\n    //         <p></p>                 \n    //     </div>\n    //     <div>\n    //         <b>NFT Token Name</b> \n    //         <br></br>\n    //         <input name='name' type='text' id='name' placeholder='Enter NFT Token Name' \n    //         value={name}\n    //         onChange={(e) => setName(e.target.value)}\n    //         />\n    //         <p></p>\n    //     </div>\n    //     <div>\n    //         <b>NFT Description</b> \n    //         <br></br>\n    //         <input name='description' type='text' id='description' placeholder='Enter NFT Description' \n    //         value={description}\n    //         onChange={(e) => setDescription(e.target.value)}\n    //         />\n    //         <p></p>\n    //     </div>\n    //     <div>\n    //         <b>NFT Image</b> \n    //         <br></br>\n    //         <input name='img' type='text' id='img' placeholder='Enter NFT Image CID' \n    //         value={img}\n    //         onChange={(e) => setImg(e.target.value)}\n    //         />\n    //         <p></p>\n    //     </div>\n    //     <br></br>                   \n    //     <input type='submit' value='Mint NFT'/>\n    // </form>\n    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n        onSubmit: onSubmit,\n        className: (_styles_MintNFT_module_css__WEBPACK_IMPORTED_MODULE_2___default().formContainer),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                        children: \"Destination Wallet Address\"\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 60,\n                        columnNumber: 17\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        name: \"address\",\n                        type: \"text\",\n                        id: \"address\",\n                        placeholder: \"Enter Destination Wallet Address\",\n                        value: address,\n                        onChange: (e)=>setAddress(e.target.value)\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 61,\n                        columnNumber: 17\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/components/MintNFT.tsx\",\n                lineNumber: 59,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                        children: \"NFT Token Name\"\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 71,\n                        columnNumber: 17\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        name: \"name\",\n                        type: \"text\",\n                        id: \"name\",\n                        placeholder: \"Enter NFT Token Name\",\n                        value: name,\n                        onChange: (e)=>setName(e.target.value)\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 72,\n                        columnNumber: 17\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/components/MintNFT.tsx\",\n                lineNumber: 70,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                        children: \"NFT Description\"\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 82,\n                        columnNumber: 17\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        name: \"description\",\n                        type: \"text\",\n                        id: \"description\",\n                        placeholder: \"Enter NFT Description\",\n                        value: description,\n                        onChange: (e)=>setDescription(e.target.value)\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 83,\n                        columnNumber: 17\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/components/MintNFT.tsx\",\n                lineNumber: 81,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                        children: \"NFT Image\"\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 93,\n                        columnNumber: 17\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        name: \"img\",\n                        type: \"text\",\n                        id: \"img\",\n                        placeholder: \"Enter NFT Image CID\",\n                        value: img,\n                        onChange: (e)=>setImg(e.target.value)\n                    }, void 0, false, {\n                        fileName: \"/app/components/MintNFT.tsx\",\n                        lineNumber: 94,\n                        columnNumber: 17\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/components/MintNFT.tsx\",\n                lineNumber: 92,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"submit\",\n                value: \"Mint NFT\"\n            }, void 0, false, {\n                fileName: \"/app/components/MintNFT.tsx\",\n                lineNumber: 103,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/components/MintNFT.tsx\",\n        lineNumber: 58,\n        columnNumber: 9\n    }, undefined));\n};\n_s(mintNFT, \"s0YEXwx+BOu/MiU5f4Qf7hZGa2U=\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (mintNFT);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/MintNFT.tsx\n"));

/***/ }),

/***/ "./components/WalletInfo.tsx":
/*!***********************************!*\
  !*** ./components/WalletInfo.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nconst WalletInfo = (param)=>{\n    let { walletInfo  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            color: \"white\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                children: \"Wallet Balance In Lovelace\"\n            }, void 0, false, {\n                fileName: \"/app/components/WalletInfo.tsx\",\n                lineNumber: 4,\n                columnNumber: 41\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n                children: [\n                    \"\\xa0\\xa0\\xa0\\xa0\",\n                    walletInfo.balance\n                ]\n            }, void 0, true, {\n                fileName: \"/app/components/WalletInfo.tsx\",\n                lineNumber: 5,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/components/WalletInfo.tsx\",\n        lineNumber: 4,\n        columnNumber: 9\n    }, undefined);\n};\n_c = WalletInfo;\n/* harmony default export */ __webpack_exports__[\"default\"] = (WalletInfo);\nvar _c;\n$RefreshReg$(_c, \"WalletInfo\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1dhbGxldEluZm8udHN4LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQUEsTUFBTUEsYUFBYSxTQUF5QjtRQUF4QixFQUFFQyxXQUFVLEVBQU87SUFFbkMscUJBQ0ksOERBQUNDO1FBQUlDLE9BQU87WUFBRUMsT0FBTztRQUFROzswQkFBRyw4REFBQ0M7MEJBQUU7Ozs7OzswQkFDL0IsOERBQUNDOztvQkFBRTtvQkFBeUJMLFdBQVdNLE9BQU87Ozs7Ozs7Ozs7Ozs7QUFHMUQ7S0FQTVA7QUFTTiwrREFBZUEsVUFBVUEsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL1dhbGxldEluZm8udHN4P2E3NjkiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgV2FsbGV0SW5mbyA9ICh7IHdhbGxldEluZm8gfTogYW55KSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGNvbG9yOiBcIndoaXRlXCIgfX0+PGI+V2FsbGV0IEJhbGFuY2UgSW4gTG92ZWxhY2U8L2I+XHJcbiAgICAgICAgICAgIDxpPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO3t3YWxsZXRJbmZvLmJhbGFuY2V9PC9pPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXYWxsZXRJbmZvXHJcbiJdLCJuYW1lcyI6WyJXYWxsZXRJbmZvIiwid2FsbGV0SW5mbyIsImRpdiIsInN0eWxlIiwiY29sb3IiLCJiIiwiaSIsImJhbGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/WalletInfo.tsx\n"));

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_MintNFT__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/MintNFT */ \"./components/MintNFT.tsx\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../styles/Home.module.css */ \"./styles/Home.module.css\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _components_WalletInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/WalletInfo */ \"./components/WalletInfo.tsx\");\n/* harmony import */ var _contracts_nft_hl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../contracts/nft.hl */ \"./contracts/nft.hl\");\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nconst Home = ()=>{\n    _s();\n    const optimize = false;\n    const networkParamsUrl = \"https://d1t0d7c2nekuk0.cloudfront.net/preprod.json\";\n    // const networkParamsUrl = \"https://d1t0d7c2nekuk0.cloudfront.net/preview.json\";\n    // const networkParamsUrl = \"https://book.world.dev.cardano.org/environments/preview/shelley-genesis.json\";\n    // const networkParamsUrl = \"https://raw.githubusercontent.com/apatel2582/preview_network_cardano_json/main/preview.json\";\n    const [walletInfo, setWalletInfo] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        balance: \"\"\n    });\n    const [walletIsEnabled, setWalletIsEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [whichWalletSelected, setWhichWalletSelected] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);\n    const [walletAPI, setWalletAPI] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);\n    const [walletHelper, setWalletHelper] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);\n    const [tx, setTx] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        txId: \"\"\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const checkWallet = async ()=>{\n            setWalletIsEnabled(await checkIfWalletFound());\n        };\n        checkWallet();\n    }, [\n        whichWalletSelected\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const enableSelectedWallet = async ()=>{\n            if (walletIsEnabled) {\n                await enableWallet();\n            }\n        };\n        enableSelectedWallet();\n    }, [\n        walletIsEnabled\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const updateWalletInfo = async ()=>{\n            if (walletIsEnabled) {\n                const _balance = await getBalance();\n                setWalletInfo({\n                    ...walletInfo,\n                    balance: _balance\n                });\n            }\n        };\n        updateWalletInfo();\n    }, [\n        walletAPI\n    ]);\n    // user selects what wallet to connect to\n    const handleWalletSelect = (obj)=>{\n        const whichWalletSelected = obj.target.value;\n        setWhichWalletSelected(whichWalletSelected);\n    };\n    const checkIfWalletFound = async ()=>{\n        let walletFound = false;\n        const walletChoice = whichWalletSelected;\n        if (walletChoice === \"nami\") {\n            var _window_cardano;\n            walletFound = !!(window === null || window === void 0 ? void 0 : (_window_cardano = window.cardano) === null || _window_cardano === void 0 ? void 0 : _window_cardano.nami);\n        } else if (walletChoice === \"eternl\") {\n            var _window_cardano1;\n            walletFound = !!(window === null || window === void 0 ? void 0 : (_window_cardano1 = window.cardano) === null || _window_cardano1 === void 0 ? void 0 : _window_cardano1.eternl);\n        }\n        return walletFound;\n    };\n    const enableWallet = async ()=>{\n        try {\n            const walletChoice = whichWalletSelected;\n            if (walletChoice === \"nami\") {\n                const handle = await window.cardano.nami.enable();\n                const walletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Cip30Wallet(handle);\n                const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.WalletHelper(walletAPI);\n                setWalletHelper(walletHelper);\n                setWalletAPI(walletAPI);\n            } else if (walletChoice === \"eternl\") {\n                const handle1 = await window.cardano.eternl.enable();\n                const walletAPI1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Cip30Wallet(handle1);\n                const walletHelper1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.WalletHelper(walletAPI1);\n                setWalletHelper(walletHelper1);\n                setWalletAPI(walletAPI1);\n            }\n        } catch (err) {\n            console.log(\"enableWallet error\", err);\n        }\n    };\n    const getBalance = async ()=>{\n        try {\n            const balanceAmountValue = await walletHelper.calcBalance();\n            const balanceAmount = balanceAmountValue.lovelace;\n            const walletBalance = BigInt(balanceAmount);\n            return walletBalance.toLocaleString();\n        } catch (err) {\n            console.log(\"getBalance error: \", err);\n        }\n    };\n    const mintNFT = async (params)=>{\n        // Re-enable wallet API since wallet account may have been changed\n        await enableWallet();\n        const address = params[0];\n        const name = params[1];\n        const description = params[2];\n        const img = params[3];\n        const minAda = 2000000; // minimum lovelace needed to send an NFT\n        const maxTxFee = 500000; // maximum estimated transaction fee\n        const minChangeAmt = 1000000; // minimum lovelace needed to be sent back as change\n        const minAdaVal = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Value(BigInt(minAda));\n        const minUTXOVal = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Value(BigInt(minAda + maxTxFee + minChangeAmt));\n        // Get wallet UTXOs\n        const utxos = await walletHelper.pickUtxos(minUTXOVal);\n        // Get change address\n        const changeAddr = await walletHelper.changeAddress;\n        // Start building the transaction\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Tx();\n        // Add the UTXO as inputs\n        tx.addInputs(utxos[0]);\n        const nftProgram = new _contracts_nft_hl__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        nftProgram.parameters = {\n            [\"TX_ID\"]: utxos[0][0].txId.hex\n        };\n        nftProgram.parameters = {\n            [\"TX_IDX\"]: utxos[0][0].utxoIdx\n        };\n        nftProgram.parameters = {\n            [\"TN\"]: name\n        };\n        // Compile the helios minting script\n        const nftCompiledProgram = nftProgram.compile(optimize);\n        // Add the script as a witness to the transaction\n        tx.attachScript(nftCompiledProgram);\n        // Construct the NFT that we will want to send as an output\n        const nftTokenName = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.ByteArrayData.fromString(name).toHex();\n        const tokens = [\n            [\n                (0,_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(nftTokenName),\n                BigInt(1)\n            ]\n        ];\n        // Create an empty Redeemer because we must always send a Redeemer with\n        // a plutus script transaction even if we don't actually use it.\n        const mintRedeemer = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.ConstrData(0, []);\n        // Indicate the minting we want to include as part of this transaction\n        tx.mintTokens(nftCompiledProgram.mintingPolicyHash, tokens, mintRedeemer);\n        // Construct the output and include both the minimum Ada as well as the minted NFT\n        tx.addOutput(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.TxOutput(_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Address.fromBech32(address), new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Value(minAdaVal.lovelace, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.Assets([\n            [\n                nftCompiledProgram.mintingPolicyHash,\n                tokens\n            ]\n        ]))));\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_6__.NetworkParams(await fetch(networkParamsUrl).then((response)=>response.json()));\n        // Attached the metadata for the minting transaction\n        tx.addMetadata(721, {\n            map: [\n                [\n                    nftCompiledProgram.mintingPolicyHash.hex,\n                    {\n                        map: [\n                            [\n                                name,\n                                {\n                                    map: [\n                                        [\n                                            \"name\",\n                                            name\n                                        ],\n                                        [\n                                            \"description\",\n                                            description\n                                        ],\n                                        [\n                                            \"image\",\n                                            img\n                                        ]\n                                    ]\n                                }\n                            ]\n                        ]\n                    }\n                ]\n            ]\n        });\n        console.log(\"tx before final\", tx.dump());\n        // Send any change back to the buyer\n        await tx.finalize(networkParams, changeAddr, utxos[1]);\n        console.log(\"Verifying signature...\");\n        const signatures = await walletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"tx after final\", tx.dump());\n        console.log(\"Submitting transaction...\");\n        const txHash = await walletAPI.submitTx(tx);\n        console.log(\"txHash\", txHash.hex);\n        setTx({\n            txId: txHash.hex\n        });\n    };\n    return(// <div className={styles.container}>\n    //   <Head>\n    //     <title>Cardano Athletics NFT Creator</title>\n    //     <meta name=\"description\" content=\"Cardano Athletics NFT Creator\" />\n    //     <link rel=\"icon\" href=\"/favicon.ico\" />\n    //   </Head>\n    //   <main className={styles.main}>\n    //     <h3 className={styles.title}>Cardano Athletics NFT Creator</h3>\n    //     <div className={styles.borderwallet}>\n    //       <p>Connect to your wallet</p>\n    //       <p className={styles.borderwallet}>\n    //         <input\n    //           type=\"radio\"\n    //           id=\"nami\"\n    //           name=\"wallet\"\n    //           value=\"nami\"\n    //           onChange={handleWalletSelect}\n    //         />\n    //         <label>Nami</label>\n    //       </p>\n    //       <p className={styles.borderwallet}>\n    //         <input\n    //           type=\"radio\"\n    //           id=\"eternl\"\n    //           name=\"wallet\"\n    //           value=\"eternl\"\n    //           onChange={handleWalletSelect}\n    //         />\n    //         <label>Eternl</label>\n    //       </p>\n    //     </div>\n    //     {!tx.txId && walletIsEnabled && (\n    //       <div className={styles.border}>\n    //         <WalletInfo walletInfo={walletInfo} />\n    //       </div>\n    //     )}\n    //     {tx.txId && (\n    //       <div className={styles.border}>\n    //         <b>Transaction Success!!!</b>\n    //         <p>\n    //           TxId &nbsp;&nbsp;\n    //           <a\n    //             href={\"https://preview.cexplorer.io/tx/\" + tx.txId}\n    //             target=\"_blank\"\n    //             rel=\"noopener noreferrer\"\n    //           >\n    //             {tx.txId}\n    //           </a>\n    //         </p>\n    //         <p>\n    //           Please wait until the transaction is confirmed on the blockchain\n    //           and reload this page before doing another transaction\n    //         </p>\n    //       </div>\n    //     )}\n    //     {walletIsEnabled && !tx.txId && (\n    //       <div className={styles.border}>\n    //         <MintNFT onMintNFT={mintNFT} />\n    //       </div>\n    //     )}\n    //     {/* Your permanent back button */}\n    //     <a href=\"http://localhost:3000\" className={styles.backButton}>\n    //       Go Back\n    //     </a>\n    //   </main>\n    //   <footer className={styles.footer}></footer>\n    // </div>\n    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().container),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_1___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Cardano Athletics NFT Creator\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 300,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"description\",\n                        content: \"Cardano Athletics NFT Creator\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 301,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        href: \"/favicon.ico\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 302,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/pages/index.tsx\",\n                lineNumber: 299,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().main),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().title),\n                        children: \"Cardano Athletics NFT Creator\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 306,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().borderwallet),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: \"Connect to your wallet\"\n                            }, void 0, false, {\n                                fileName: \"/app/pages/index.tsx\",\n                                lineNumber: 309,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().borderwallet),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"radio\",\n                                        id: \"nami\",\n                                        name: \"wallet\",\n                                        value: \"nami\",\n                                        onChange: handleWalletSelect\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/index.tsx\",\n                                        lineNumber: 311,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        children: \"Nami\"\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/index.tsx\",\n                                        lineNumber: 318,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/app/pages/index.tsx\",\n                                lineNumber: 310,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().borderwallet),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"radio\",\n                                        id: \"eternl\",\n                                        name: \"wallet\",\n                                        value: \"eternl\",\n                                        onChange: handleWalletSelect\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/index.tsx\",\n                                        lineNumber: 321,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        children: \"Eternl\"\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/index.tsx\",\n                                        lineNumber: 328,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/app/pages/index.tsx\",\n                                lineNumber: 320,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 308,\n                        columnNumber: 9\n                    }, undefined),\n                    !tx.txId && walletIsEnabled && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().border),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_WalletInfo__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                            walletInfo: walletInfo\n                        }, void 0, false, {\n                            fileName: \"/app/pages/index.tsx\",\n                            lineNumber: 333,\n                            columnNumber: 13\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 332,\n                        columnNumber: 11\n                    }, undefined),\n                    tx.txId && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().border),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"b\", {\n                                children: \"Transaction Success!!!\"\n                            }, void 0, false, {\n                                fileName: \"/app/pages/index.tsx\",\n                                lineNumber: 338,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: [\n                                    \"TxId \\xa0\\xa0\",\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                        href: \"https://preprod.cardanoscan.io/transaction/\" + tx.txId,\n                                        target: \"_blank\",\n                                        rel: \"noopener noreferrer\",\n                                        children: tx.txId\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/index.tsx\",\n                                        lineNumber: 341,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/app/pages/index.tsx\",\n                                lineNumber: 339,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                children: \"Please wait until the transaction is confirmed on the blockchain and reload this page before doing another transaction\"\n                            }, void 0, false, {\n                                fileName: \"/app/pages/index.tsx\",\n                                lineNumber: 349,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 337,\n                        columnNumber: 11\n                    }, undefined),\n                    walletIsEnabled && !tx.txId && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().border),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MintNFT__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            onMintNFT: mintNFT\n                        }, void 0, false, {\n                            fileName: \"/app/pages/index.tsx\",\n                            lineNumber: 357,\n                            columnNumber: 13\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 356,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                        href: \"http://localhost:3000\",\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().backButton),\n                        children: \"Go Back\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/index.tsx\",\n                        lineNumber: 361,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/pages/index.tsx\",\n                lineNumber: 305,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"footer\", {\n                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_7___default().footer)\n            }, void 0, false, {\n                fileName: \"/app/pages/index.tsx\",\n                lineNumber: 366,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/index.tsx\",\n        lineNumber: 298,\n        columnNumber: 5\n    }, undefined));\n};\n_s(Home, \"zvrImYPuy1fzEaT8BIwHpY6zDxg=\");\n_c = Home;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Home);\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n"));

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlIQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzPzg4NDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9oZWFkJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n"));

/***/ }),

/***/ "./node_modules/@hyperionbt/helios/helios.js":
/*!***************************************************!*\
  !*** ./node_modules/@hyperionbt/helios/helios.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Address\": function() { return /* binding */ Address; },\n/* harmony export */   \"AssetClass\": function() { return /* binding */ AssetClass; },\n/* harmony export */   \"Assets\": function() { return /* binding */ Assets; },\n/* harmony export */   \"BlockfrostV0\": function() { return /* binding */ BlockfrostV0; },\n/* harmony export */   \"Bool\": function() { return /* binding */ Bool; },\n/* harmony export */   \"ByteArray\": function() { return /* binding */ ByteArray; },\n/* harmony export */   \"ByteArrayData\": function() { return /* binding */ ByteArrayData; },\n/* harmony export */   \"CborData\": function() { return /* binding */ CborData; },\n/* harmony export */   \"Cip30Wallet\": function() { return /* binding */ Cip30Wallet; },\n/* harmony export */   \"CoinSelection\": function() { return /* binding */ CoinSelection; },\n/* harmony export */   \"ConstrData\": function() { return /* binding */ ConstrData; },\n/* harmony export */   \"Crypto\": function() { return /* binding */ Crypto; },\n/* harmony export */   \"DEFAULT_UPLC_RTE_CALLBACKS\": function() { return /* binding */ DEFAULT_UPLC_RTE_CALLBACKS; },\n/* harmony export */   \"Datum\": function() { return /* binding */ Datum; },\n/* harmony export */   \"DatumHash\": function() { return /* binding */ DatumHash; },\n/* harmony export */   \"Duration\": function() { return /* binding */ Duration; },\n/* harmony export */   \"FuzzyTest\": function() { return /* binding */ FuzzyTest; },\n/* harmony export */   \"HInt\": function() { return /* binding */ HInt; },\n/* harmony export */   \"HList\": function() { return /* binding */ HList; },\n/* harmony export */   \"HMap\": function() { return /* binding */ HMap; },\n/* harmony export */   \"HString\": function() { return /* binding */ HString; },\n/* harmony export */   \"HashedDatum\": function() { return /* binding */ HashedDatum; },\n/* harmony export */   \"HeliosData\": function() { return /* binding */ HeliosData; },\n/* harmony export */   \"IRAnonCallExpr\": function() { return /* binding */ IRAnonCallExpr; },\n/* harmony export */   \"IRExprRegistry\": function() { return /* binding */ IRExprRegistry; },\n/* harmony export */   \"IRFuncDefExpr\": function() { return /* binding */ IRFuncDefExpr; },\n/* harmony export */   \"IRNameExprRegistry\": function() { return /* binding */ IRNameExprRegistry; },\n/* harmony export */   \"IRNestedAnonCallExpr\": function() { return /* binding */ IRNestedAnonCallExpr; },\n/* harmony export */   \"IRParametricProgram\": function() { return /* binding */ IRParametricProgram; },\n/* harmony export */   \"IntData\": function() { return /* binding */ IntData; },\n/* harmony export */   \"ListData\": function() { return /* binding */ ListData; },\n/* harmony export */   \"MapData\": function() { return /* binding */ MapData; },\n/* harmony export */   \"MintingPolicyHash\": function() { return /* binding */ MintingPolicyHash; },\n/* harmony export */   \"NetworkEmulator\": function() { return /* binding */ NetworkEmulator; },\n/* harmony export */   \"NetworkParams\": function() { return /* binding */ NetworkParams; },\n/* harmony export */   \"Option\": function() { return /* binding */ Option; },\n/* harmony export */   \"Program\": function() { return /* binding */ Program; },\n/* harmony export */   \"PubKeyHash\": function() { return /* binding */ PubKeyHash; },\n/* harmony export */   \"ScriptHash\": function() { return /* binding */ ScriptHash; },\n/* harmony export */   \"Signature\": function() { return /* binding */ Signature; },\n/* harmony export */   \"Source\": function() { return /* binding */ Source; },\n/* harmony export */   \"StakeAddress\": function() { return /* binding */ StakeAddress; },\n/* harmony export */   \"StakeKeyHash\": function() { return /* binding */ StakeKeyHash; },\n/* harmony export */   \"StakingValidatorHash\": function() { return /* binding */ StakingValidatorHash; },\n/* harmony export */   \"Time\": function() { return /* binding */ Time; },\n/* harmony export */   \"TimeType\": function() { return /* binding */ TimeType; },\n/* harmony export */   \"Token\": function() { return /* binding */ Token; },\n/* harmony export */   \"Tokenizer\": function() { return /* binding */ Tokenizer; },\n/* harmony export */   \"Tx\": function() { return /* binding */ Tx; },\n/* harmony export */   \"TxId\": function() { return /* binding */ TxId; },\n/* harmony export */   \"TxOutput\": function() { return /* binding */ TxOutput; },\n/* harmony export */   \"TxOutputId\": function() { return /* binding */ TxOutputId; },\n/* harmony export */   \"TxRefInput\": function() { return /* binding */ TxRefInput; },\n/* harmony export */   \"TxWitnesses\": function() { return /* binding */ TxWitnesses; },\n/* harmony export */   \"UTxO\": function() { return /* binding */ UTxO; },\n/* harmony export */   \"UplcBool\": function() { return /* binding */ UplcBool; },\n/* harmony export */   \"UplcByteArray\": function() { return /* binding */ UplcByteArray; },\n/* harmony export */   \"UplcData\": function() { return /* binding */ UplcData; },\n/* harmony export */   \"UplcDataValue\": function() { return /* binding */ UplcDataValue; },\n/* harmony export */   \"UplcInt\": function() { return /* binding */ UplcInt; },\n/* harmony export */   \"UplcList\": function() { return /* binding */ UplcList; },\n/* harmony export */   \"UplcPair\": function() { return /* binding */ UplcPair; },\n/* harmony export */   \"UplcProgram\": function() { return /* binding */ UplcProgram; },\n/* harmony export */   \"UplcString\": function() { return /* binding */ UplcString; },\n/* harmony export */   \"UplcType\": function() { return /* binding */ UplcType; },\n/* harmony export */   \"UplcUnit\": function() { return /* binding */ UplcUnit; },\n/* harmony export */   \"UplcValue\": function() { return /* binding */ UplcValue; },\n/* harmony export */   \"UserError\": function() { return /* binding */ UserError; },\n/* harmony export */   \"VERSION\": function() { return /* binding */ VERSION; },\n/* harmony export */   \"ValidatorHash\": function() { return /* binding */ ValidatorHash; },\n/* harmony export */   \"Value\": function() { return /* binding */ Value; },\n/* harmony export */   \"WalletEmulator\": function() { return /* binding */ WalletEmulator; },\n/* harmony export */   \"WalletHelper\": function() { return /* binding */ WalletHelper; },\n/* harmony export */   \"buildScript\": function() { return /* binding */ buildScript; },\n/* harmony export */   \"bytesToHex\": function() { return /* binding */ bytesToHex; },\n/* harmony export */   \"bytesToText\": function() { return /* binding */ bytesToText; },\n/* harmony export */   \"config\": function() { return /* binding */ config; },\n/* harmony export */   \"deserializeUplc\": function() { return /* binding */ deserializeUplc; },\n/* harmony export */   \"deserializeUplcBytes\": function() { return /* binding */ deserializeUplcBytes; },\n/* harmony export */   \"exportedForTesting\": function() { return /* binding */ exportedForTesting; },\n/* harmony export */   \"extractScriptPurposeAndName\": function() { return /* binding */ extractScriptPurposeAndName; },\n/* harmony export */   \"findUplcBuiltin\": function() { return /* binding */ findUplcBuiltin; },\n/* harmony export */   \"hexToBytes\": function() { return /* binding */ hexToBytes; },\n/* harmony export */   \"highlight\": function() { return /* binding */ highlight; },\n/* harmony export */   \"hl\": function() { return /* binding */ hl; },\n/* harmony export */   \"isUplcBuiltin\": function() { return /* binding */ isUplcBuiltin; },\n/* harmony export */   \"reduceNullPairs\": function() { return /* binding */ reduceNullPairs; },\n/* harmony export */   \"setImportPathTranslator\": function() { return /* binding */ setImportPathTranslator; },\n/* harmony export */   \"textToBytes\": function() { return /* binding */ textToBytes; },\n/* harmony export */   \"tokenize\": function() { return /* binding */ tokenize; }\n/* harmony export */ });\n//@ts-check\n//////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////      Helios      /////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//\n// Author:        Christian Schmitz\n// Email:         cschmitz398@gmail.com\n// Website:       https://www.hyperion-bt.org\n// Repository:    https://github.com/hyperion-bt/helios\n// Version:       0.13.28\n// Last update:   April 2023\n// License type:  BSD-3-Clause\n//\n//\n// About: Helios is a smart contract DSL for Cardano.\n//     This Javascript library contains functions to compile Helios sources into Plutus-core.\n//     Transactions can also be built using Helios.\n//\n//\n// Dependencies: none\n//\n//\n// Disclaimer: I made Helios available as FOSS so that the Cardano community can test it \n//     extensively. I don't guarantee the library is bug-free, nor do I guarantee\n//     backward compatibility with future versions.\n//\n//\n// Example usage:\n//     > import * as helios from \"helios.js\";\n//     > console.log(helios.Program.new(\"spending my_validator ...\").compile().serialize());\n//     \n//\n// Documentation: https://www.hyperion-bt.org/helios-book\n//\n//\n// Note: I recommend keeping the Helios library as a single unminified file for optimal \n//     auditability.\n//\n// \n// License text:\n//     Copyright 2023 Christian Schmitz\n//     \n//     Redistribution and use in source and binary forms, with or without \n//     modification, are permitted provided that the following conditions are met:\n//     \n//     1. Redistributions of source code must retain the above copyright notice, this \n//     list of conditions and the following disclaimer.\n//     \n//     2. Redistributions in binary form must reproduce the above copyright notice, \n//     this list of conditions and the following disclaimer in the documentation \n//     and/or other materials provided with the distribution.\n//     \n//     3. Neither the name of the copyright holder nor the names of its contributors \n//     may be used to endorse or promote products derived from this software without \n//     specific prior written permission.\n//     \n//     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” \n//     AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n//     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n//     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \n//     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \n//     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \n//     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \n//     CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \n//     OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n//     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//     \n//\n//\n// Overview of internals:\n//     Section 1: Config                     VERSION, TAB, config\n//\n//     Section 2: Utilities                  assert, assertDefined, assertClass, assertNumber, \n//                                           reduceNull, reduceNullPairs, eq, assertEq, idiv, \n//                                           ipow2, imask, imod8, bigIntToBytes, bytesToBigInt, \n//                                           padZeroes, byteToBitString, hexToBytes, bytesToHex, \n//                                           textToBytes, bytesToText, replaceTabs, BitReader, \n//                                           BitWriter, Source, hl, deprecationWarning\n//\n//     Section 3: Tokens                     Site, RuntimeError, Token, assertToken, Word, \n//                                           SymbolToken, Group, PrimitiveLiteral, IntLiteral, \n//                                           BoolLiteral, ByteArrayLiteral, StringLiteral\n//\n//     Section 4: Cryptography functions     BLAKE2B_DIGEST_SIZE, setBlake2bDigestSize, imod32, \n//                                           irotr, posMod, UInt64, Crypto\n//\n//     Section 5: Cbor encoder/decoder       CborData\n//\n//     Section 6: Uplc data types            UPLC_DATA_NODE_MEM_SIZE, UplcData, IntData, \n//                                           ByteArrayData, ListData, MapData, ConstrData\n//\n//     Section 7: Helios data objects        HeliosData, HInt, Time, Duration, Bool, HString, \n//                                           ByteArray, HList, HMap, Option, Hash, DatumHash, \n//                                           PubKeyHash, ScriptHash, MintingPolicyHash, \n//                                           StakeKeyHash, StakingValidatorHash, ValidatorHash, \n//                                           TxId, TxOutputId, Address, AssetClass, Assets, Value\n//\n//     Section 8: Uplc cost-models           NetworkParams, CostModel, ConstCost, LinearCost, \n//                                           ArgSizeCost, Arg0SizeCost, Arg1SizeCost, \n//                                           Arg2SizeCost, MinArgSizeCost, MaxArgSizeCost, \n//                                           SumArgSizesCost, ArgSizeDiffCost, ArgSizeProdCost, \n//                                           ArgSizeDiagCost\n//\n//     Section 9: Uplc built-in functions    UPLC_BUILTINS, dumpCostModels, findUplcBuiltin, \n//                                           isUplcBuiltin\n//\n//     Section 10: Uplc AST                  ScriptPurpose, getPurposeName, UplcValue, UplcType, \n//                                           DEFAULT_UPLC_RTE_CALLBACKS, UplcRte, UplcStack, \n//                                           UplcAnon, UplcDelayedValue, UplcInt, UplcByteArray, \n//                                           UplcString, UplcUnit, UplcBool, UplcPair, UplcList, \n//                                           UplcDataValue, UplcTerm, UplcVariable, UplcDelay, \n//                                           UplcLambda, UplcCall, UplcConst, UplcForce, \n//                                           UplcError, UplcBuiltin\n//\n//     Section 11: Uplc program              UPLC_VERSION_COMPONENTS, UPLC_VERSION, \n//                                           PLUTUS_SCRIPT_VERSION, deserializeUplcBytes, \n//                                           deserializeUplc\n//\n//     Section 12: Tokenization              Tokenizer, tokenize, tokenizeIR\n//\n//     Section 13: Helios eval entities      EvalEntity, Type, AnyType, DataType, AnyDataType, \n//                                           BuiltinType, BuiltinEnumMember, StatementType, \n//                                           StructStatementType, EnumStatementType, \n//                                           EnumMemberStatementType, ArgType, FuncType, NotType, \n//                                           Instance, DataInstance, ConstStatementInstance, \n//                                           FuncInstance, FuncStatementInstance, MultiInstance, \n//                                           VoidInstance, ErrorInstance, BuiltinFuncInstance, \n//                                           PrintFunc, VoidType, ErrorType, IntType, BoolType, \n//                                           StringType, ByteArrayType, ParamType, ParamFuncValue, \n//                                           ListType, MapType, OptionType, OptionSomeType, \n//                                           OptionNoneType, HashType, PubKeyHashType, \n//                                           StakeKeyHashType, PubKeyType, ScriptHashType, \n//                                           ValidatorHashType, MintingPolicyHashType, \n//                                           StakingValidatorHashType, DatumHashType, \n//                                           ScriptContextType, ScriptPurposeType, \n//                                           MintingScriptPurposeType, SpendingScriptPurposeType, \n//                                           RewardingScriptPurposeType, \n//                                           CertifyingScriptPurposeType, StakingPurposeType, \n//                                           StakingRewardingPurposeType, \n//                                           StakingCertifyingPurposeType, DCertType, \n//                                           RegisterDCertType, DeregisterDCertType, \n//                                           DelegateDCertType, RegisterPoolDCertType, \n//                                           RetirePoolDCertType, TxType, TxIdType, TxInputType, \n//                                           TxOutputType, OutputDatumType, NoOutputDatumType, \n//                                           HashedOutputDatumType, InlineOutputDatumType, \n//                                           RawDataType, TxOutputIdType, AddressType, \n//                                           CredentialType, CredentialPubKeyType, \n//                                           CredentialValidatorType, StakingHashType, \n//                                           StakingHashStakeKeyType, StakingHashValidatorType, \n//                                           StakingCredentialType, StakingHashCredentialType, \n//                                           StakingPtrCredentialType, TimeType, DurationType, \n//                                           TimeRangeType, AssetClassType, ValueType\n//\n//     Section 14: Scopes                    GlobalScope, Scope, TopScope, ModuleScope, \n//                                           FuncStatementScope\n//\n//     Section 15: Helios AST expressions    Expr, TypeExpr, TypeRefExpr, TypePathExpr, \n//                                           ListTypeExpr, MapTypeExpr, OptionTypeExpr, \n//                                           VoidTypeExpr, FuncArgTypeExpr, FuncTypeExpr, \n//                                           ValueExpr, AssignExpr, PrintExpr, VoidExpr, \n//                                           ChainExpr, PrimitiveLiteralExpr, LiteralDataExpr, \n//                                           StructLiteralField, StructLiteralExpr, \n//                                           ListLiteralExpr, MapLiteralExpr, NameTypePair, \n//                                           FuncArg, FuncLiteralExpr, ValueRefExpr, \n//                                           ValuePathExpr, UnaryExpr, BinaryExpr, ParensExpr, \n//                                           CallArgExpr, CallExpr, MemberExpr, IfElseExpr, \n//                                           DestructExpr, SwitchCase, UnconstrDataSwitchCase, \n//                                           SwitchDefault, SwitchExpr, EnumSwitchExpr, \n//                                           DataSwitchExpr\n//\n//     Section 16: Literal functions         buildLiteralExprFromJson, buildLiteralExprFromValue\n//\n//     Section 17: Helios AST statements     Statement, ImportStatement, ConstStatement, \n//                                           DataField, DataDefinition, StructStatement, \n//                                           FuncStatement, EnumMember, EnumStatement, \n//                                           ImplDefinition\n//\n//     Section 18: Helios AST building       AUTOMATIC_METHODS, importPathTranslator, \n//                                           setImportPathTranslator, buildProgramStatements, \n//                                           buildScriptPurpose, buildScript, \n//                                           extractScriptPurposeAndName, buildConstStatement, \n//                                           splitDataImpl, buildStructStatement, buildDataFields, \n//                                           buildFuncStatement, buildFuncLiteralExpr, \n//                                           buildFuncArgs, buildEnumStatement, \n//                                           buildImportStatements, buildEnumMember, \n//                                           buildImplDefinition, buildImplMembers, buildTypeExpr, \n//                                           buildListTypeExpr, buildMapTypeExpr, \n//                                           buildOptionTypeExpr, buildFuncTypeExpr, \n//                                           buildFuncArgTypeExpr, buildFuncRetTypeExprs, \n//                                           buildTypePathExpr, buildTypeRefExpr, buildValueExpr, \n//                                           buildMaybeAssignOrPrintExpr, buildDestructExpr, \n//                                           buildDestructExprs, buildAssignLhs, \n//                                           makeBinaryExprBuilder, makeUnaryExprBuilder, \n//                                           buildChainedValueExpr, buildCallExpr, \n//                                           buildChainStartValueExpr, buildParensExpr, \n//                                           buildCallArgs, buildCallArgExpr, buildIfElseExpr, \n//                                           buildSwitchExpr, buildSwitchCaseName, \n//                                           buildSwitchCase, buildSwitchCaseNameType, \n//                                           buildMultiArgSwitchCase, buildSingleArgSwitchCase, \n//                                           buildSwitchCaseBody, buildSwitchDefault, \n//                                           buildListLiteralExpr, buildMapLiteralExpr, \n//                                           buildStructLiteralExpr, buildStructLiteralField, \n//                                           buildStructLiteralNamedField, \n//                                           buildStructLiteralUnnamedField, buildValuePathExpr\n//\n//     Section 19: IR definitions            onNotifyRawUsage, setRawUsageNotifier, RawFunc, \n//                                           makeRawFunctions, wrapWithRawFunctions\n//\n//     Section 20: IR Context objects        IRScope, IRVariable, IRValue, IRFuncValue, \n//                                           IRLiteralValue, IRDeferredValue, IRCallStack\n//\n//     Section 21: IR AST objects            IRNameExprRegistry, IRExprRegistry, IRExpr, \n//                                           IRNameExpr, IRLiteralExpr, IRConstExpr, IRFuncExpr, \n//                                           IRCallExpr, IRCoreCallExpr, IRUserCallExpr, \n//                                           IRAnonCallExpr, IRNestedAnonCallExpr, IRFuncDefExpr, \n//                                           IRErrorCallExpr\n//\n//     Section 22: IR AST build functions    buildIRExpr, buildIRFuncExpr\n//\n//     Section 23: IR Program                IRProgram, IRParametricProgram\n//\n//     Section 24: Helios program            Module, MainModule, RedeemerProgram, \n//                                           DatumRedeemerProgram, TestingProgram, \n//                                           SpendingProgram, MintingProgram, StakingProgram\n//\n//     Section 25: Tx types                  Tx, TxBody, TxWitnesses, TxInput, UTxO, TxRefInput, \n//                                           TxOutput, DCert, StakeAddress, Signature, Redeemer, \n//                                           SpendingRedeemer, MintingRedeemer, Datum, \n//                                           HashedDatum, InlineDatum, encodeMetadata, \n//                                           decodeMetadata, TxMetadata\n//\n//     Section 26: Highlighting function     SyntaxCategory, highlight\n//\n//     Section 27: Fuzzy testing framework   FuzzyTest\n//\n//     Section 28: CoinSelection             CoinSelection\n//\n//     Section 29: Wallets                   Cip30Wallet, WalletHelper\n//\n//     Section 30: Network                   BlockfrostV0\n//\n//     Section 31: Emulator                  WalletEmulator, GenesisTx, RegularTx, NetworkEmulator\n//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n////////////////////\n// Section 1: Config\n////////////////////\n\n/**\n * Version of the Helios library.\n */\nconst VERSION = \"0.13.28\";\n\n/**\n * A tab used for indenting of the IR.\n * 2 spaces.\n * @package\n * @type {string}\n */\nconst TAB = \"  \";\n\n/**\n * Modifiable config vars\n * @type {{\n *   DEBUG: boolean,\n *   STRICT_BABBAGE: boolean,\n *   IS_TESTNET: boolean,\n *   N_DUMMY_INPUTS: number\n * }}\n */\nconst config = {\n    /**\n     * Global debug flag. Not currently used for anything though.\n     */\n    DEBUG: false,\n\n    /**\n     * Set this to true if you want to experiment with transactions serialized using the strict babbage cddl format\n     */\n    STRICT_BABBAGE: false,\n\n    /**\n     * Set to false if using the library for mainnet (impacts Addresses)\n     */\n    IS_TESTNET: true,\n\n    /**\n     * Calculating the execution budget during tx building requires knowing all the inputs beforehand,\n     *   which is very difficult because balancing is done after the budget is calculated.\n     * Instead we use at least 1 dummy input, which should act as a representative balancing input.\n     * For increased robustness we use 2 dummy inputs, one with Txid 0 and other with TxId ffff...,\n     *   because eg. there are case where the TxId is being printed, and a Txid of ffff... would overestimate the fee\n     * This value must be '1' or '2'\n     */\n    N_DUMMY_INPUTS: 2\n}\n\n\n\n///////////////////////\n// Section 2: Utilities\n///////////////////////\n\n\n/**\n * Throws an error if 'cond' is false.\n * @package\n * @param {boolean} cond \n * @param {string} msg \n */\nfunction assert(cond, msg = \"unexpected\") {\n\tif (!cond) {\n\t\tthrow new Error(msg);\n\t}\n}\n\n/**\n * Throws an error if 'obj' is undefined. Returns 'obj' itself (for chained application).\n * @package\n * @template T\n * @param {T | undefined | null} obj \n * @param {string} msg \n * @returns {T}\n */\nfunction assertDefined(obj, msg = \"unexpected undefined value\") {\n\tif (obj === undefined || obj === null ) {\n\t\tthrow new Error(msg);\n\t}\n\n\treturn obj;\n}\n\n/**\n * @package\n * @template Tin, Tout\n * @param {Tin} obj\n * @param {{new(...any): Tout}} C\n * @returns {Tout}\n */\nfunction assertClass(obj, C, msg = \"unexpected class\") {\n\tif (obj instanceof C) {\n\t\treturn obj;\n\t} else {\n\t\tthrow new Error(msg);\n\t}\n}\n\n/**\n * @package\n * @param {any} obj \n * @param {string} msg \n * @returns {number}\n */\nfunction assertNumber(obj, msg = \"expected a number\") {\n\tif (obj === undefined || obj === null) {\n\t\tthrow new Error(msg);\n\t} else if (typeof obj == \"number\") {\n\t\treturn obj;\n\t} else {\n\t\tthrow new Error(msg);\n\t}\n}\n\n/**\n * @package\n * @template T\n * @param {(T | null)[]} lst\n * @returns {null | (T[])}\n */\nfunction reduceNull(lst) {\n\t/**\n\t * @type {T[]}\n\t */\n\tconst nonNullLst = [];\n\n\tlet someNull = false;\n\n\tlst.forEach(item => {\n\t\tif (item !== null && !someNull) {\n\t\t\tnonNullLst.push(item);\n\t\t} else {\n\t\t\tsomeNull = true;\n\t\t}\n\t});\n\n\tif (someNull) {\n\t\treturn null;\n\t} else {\n\t\treturn nonNullLst;\n\t}\n}\n\n/**\n * @template Ta\n * @template Tb\n * @param {[Ta | null, Tb | null][]} pairs\n * @returns {null | [Ta, Tb][]}\n */\nfunction reduceNullPairs(pairs) {\n\t/**\n\t * @type {[Ta, Tb][]}\n\t */\n\tconst nonNullPairs = [];\n\n\tlet someNull = false;\n\n\tpairs.forEach(([a, b]) => {\n\t\tif (a === null || b === null) {\n\t\t\tsomeNull = true;\n\t\t} else if (!someNull) {\n\t\t\tnonNullPairs.push([a, b]);\n\t\t}\n\t});\n\n\tif (someNull) {\n\t\treturn null;\n\t} else {\n\t\treturn nonNullPairs;\n\t}\n}\n\n/**\n * Compares two objects (deep recursive comparison)\n * @package\n * @template T\n * @param {T} a \n * @param {T} b \n * @returns {boolean}\n */\nfunction eq(a, b) {\n\tif (a === undefined || b === undefined) {\n\t\tthrow new Error(\"one of the args is undefined\");\n\t} else if (typeof a == \"string\") {\n\t\treturn a === b;\n\t} else if (typeof a == \"number\") {\n\t\treturn a === b;\n\t} else if (typeof a == \"boolean\") {\n\t\treturn a === b;\n\t} else if (typeof a == \"bigint\") {\n\t\treturn a === b;\n\t} else if (a instanceof Array && b instanceof Array) {\n\t\tif (a.length != b.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (!eq(a[i], b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t} else {\n\t\tthrow new Error(\"eq not yet implemented for these types\");\n\t}\n}\n\n/**\n * Throws an error if two object aren't equal (deep comparison).\n * Used by unit tests that are autogenerated from JSDoc inline examples.\n * @package\n * @template T\n * @param {T} a\n * @param {T} b\n * @param {string} msg\n */\nfunction assertEq(a, b, msg) {\n\tif (!eq(a, b)) {\n\t\tconsole.log(a);\n\t\tconsole.log(b);\n\t\tthrow new Error(msg);\n\t}\n}\n\n/**\n * Divides two integers. Assumes a and b are whole numbers. Rounds down the result.\n * @example\n * idiv(355, 113) => 3\n * @package\n * @param {number} a\n * @param {number} b \n */\nfunction idiv(a, b) {\n\treturn Math.floor(a / b);\n\t// alternatively: (a - a%b)/b\n}\n\n/**\n * 2 to the power 'p' for bigint.\n * @package\n * @param {bigint} p\n * @returns {bigint}\n */\nfunction ipow2(p) {\n\treturn (p <= 0n) ? 1n : 2n << (p - 1n);\n}\n\n/**\n * Masks bits of 'b' by setting bits outside the range ['i0', 'i1') to 0. \n * 'b' is an 8 bit integer (i.e. number between 0 and 255).\n * The return value is also an 8 bit integer, shift right by 'i1'.\n \n * @example\n * imask(0b11111111, 1, 4) => 0b0111 // (i.e. 7)\n * @package\n * @param {number} b \n * @param {number} i0 \n * @param {number} i1 \n * @returns {number}\n */\nfunction imask(b, i0, i1) {\n\tassert(i0 < i1);\n\n\tconst mask_bits = [\n\t\t0b11111111,\n\t\t0b01111111,\n\t\t0b00111111,\n\t\t0b00011111,\n\t\t0b00001111,\n\t\t0b00000111,\n\t\t0b00000011,\n\t\t0b00000001,\n\t];\n\n\treturn (b & mask_bits[i0]) >> (8 - i1);\n}\n\n/**\n * Make sure resulting number fits in uint8\n * @package\n * @param {number} x\n */\nfunction imod8(x) {\n\treturn x & 0xff;\n}\n\n/**\n * Converts an unbounded integer into a list of uint8 numbers (big endian)\n * Used by the CBOR encoding of data structures, and by Ed25519\n * @package\n * @param {bigint} x\n * @returns {number[]}\n */\nfunction bigIntToBytes(x) {\n\tif (x == 0n) {\n\t\treturn [0];\n\t} else {\n\t\t/**\n\t\t * @type {number[]}\n\t\t */\n\t\tconst res = [];\n\n\t\twhile (x > 0n) {\n\t\t\tres.unshift(Number(x%256n));\n\n\t\t\tx = x/256n;\n\t\t}\n\n\t\treturn res;\n\t}\n}\n\n/**\n * Converts a list of uint8 numbers into an unbounded int (big endian)\n * Used by the CBOR decoding of data structures.\n * @package\n * @param {number[]} b\n * @return {bigint}\n */\nfunction bytesToBigInt(b) {\n\tlet s = 1n;\n\tlet total = 0n;\n\n\twhile (b.length > 0) {\n\t\ttotal += BigInt(assertDefined(b.pop()))*s;\n\n\t\ts *= 256n;\n\t}\n\n\treturn total;\n}\n\n/**\n * Prepends zeroes to a bit-string so that 'result.length == n'.\n * @example\n * padZeroes(\"1111\", 8) => \"00001111\"\n * @package\n * @param {string} bits\n * @param {number} n \n * @returns {string}\n */\nfunction padZeroes(bits, n) {\n\t// padded to multiple of n\n\tif (bits.length % n != 0) {\n\t\tconst nPad = n - bits.length % n;\n\n\t\tbits = (new Array(nPad)).fill('0').join('') + bits;\n\t}\n\n\treturn bits;\n}\n\n/**\n * Converts a 8 bit integer number into a bit string with an optional \"0b\" prefix.\n * The result is padded with leading zeroes to become 'n' chars long ('2 + n' chars long if you count the \"0b\" prefix). \n * @example\n * byteToBitString(7) => \"0b00000111\"\n * @package\n * @param {number} b \n * @param {number} n\n * @param {boolean} prefix\n * @returns {string}\n */\nfunction byteToBitString(b, n = 8, prefix = true) {\n\tconst s = padZeroes(b.toString(2), n);\n\n\tif (prefix) {\n\t\treturn \"0b\" + s;\n\t} else {\n\t\treturn s;\n\t}\n}\n\n/**\n * Converts a hexadecimal representation of bytes into an actual list of uint8 bytes.\n * @example\n * hexToBytes(\"00ff34\") => [0, 255, 52] \n * @param {string} hex \n * @returns {number[]}\n */\nfunction hexToBytes(hex) {\n\thex = hex.trim();\n\t\n\tconst bytes = [];\n\n\tfor (let i = 0; i < hex.length; i += 2) {\n\t\tbytes.push(parseInt(hex.slice(i, i + 2), 16));\n\t}\n\n\treturn bytes;\n}\n\n/**\n * Converts a list of uint8 bytes into its hexadecimal string representation.\n * @example\n * bytesToHex([0, 255, 52]) => \"00ff34\"\n * @param {number[]} bytes\n * @returns {string}\n */\nfunction bytesToHex(bytes) {\n\tconst parts = [];\n\n\tfor (let b of bytes) {\n\t\tparts.push(padZeroes(b.toString(16), 2));\n\t}\n\n\treturn parts.join('');\n}\n\n/**\n * Encodes a string into a list of uint8 bytes using UTF-8 encoding.\n * @example\n * textToBytes(\"hello world\") => [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]\n * @param {string} str \n * @returns {number[]}\n */\nfunction textToBytes(str) {\n\treturn Array.from((new TextEncoder()).encode(str));\n}\n\n/**\n * Decodes a list of uint8 bytes into a string using UTF-8 encoding.\n * @example\n * bytesToText([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]) => \"hello world\"\n * @param {number[]} bytes \n * @returns {string}\n */\nfunction bytesToText(bytes) {\n\treturn (new TextDecoder(\"utf-8\", {fatal: true})).decode((new Uint8Array(bytes)).buffer);\n}\n\n/**\n * Replaces the tab characters of a string with spaces.\n * This is used to create a prettier IR (which is built-up from many template js strings in this file, which might contain tabs depending on the editor used)\n * @example\n * replaceTabs(\"\\t\\t\\t\") => [TAB, TAB, TAB].join(\"\")\n * @package\n * @param {string} str \n * @returns {string}\n */\nfunction replaceTabs(str) {\n\treturn str.replace(new RegExp(\"\\t\", \"g\"), TAB);\n}\n\n/**\n * Read non-byte aligned numbers\n * @package\n */\nclass BitReader {\n    /**\n     * @type {Uint8Array}\n     */\n\t#view;\n\n    /**\n     * @type {number}\n     */\n\t#pos;\n\n    /**\n     * @type {boolean}\n     */\n\t#truncate;\n\n\t/**\n\t * @param {number[]} bytes\n\t * @param {boolean} truncate - if true then read last bits as low part of number, if false pad with zero bits\n\t */\n\tconstructor(bytes, truncate = true) {\n\t\tthis.#view = new Uint8Array(bytes);\n\t\tthis.#pos = 0; // bit position, not byte position\n\t\tthis.#truncate = truncate;\n\t}\n\n\t/**\n     * @package\n\t * @returns {boolean}\n\t */\n\teof() {\n\t\treturn idiv(this.#pos, 8) >= this.#view.length;\n\t}\n\n\t/**\n\t * Reads a number of bits (<= 8) and returns the result as an unsigned number\n     * @package\n\t * @param {number} n - number of bits to read\n\t * @returns {number}\n\t */\n\treadBits(n) {\n\t\tassert(n <= 8, \"reading more than 1 byte\");\n\n\t\tlet leftShift = 0;\n\t\tif (this.#pos + n > this.#view.length * 8) {\n\t\t\tconst newN = (this.#view.length*8 - this.#pos);\n\n\t\t\tif (!this.#truncate) {\n\t\t\t\tleftShift = n - newN;\n\t\t\t}\n\n\t\t\tn = newN;\n\t\t}\n\n\t\tassert(n > 0, \"eof\");\n\n\t\t// it is assumed we don't need to be at the byte boundary\n\n\t\tlet res = 0;\n\t\tlet i0 = this.#pos;\n\n\t\tfor (let i = this.#pos + 1; i <= this.#pos + n; i++) {\n\t\t\tif (i % 8 == 0) {\n\t\t\t\tconst nPart = i - i0;\n\n\t\t\t\tres += imask(this.#view[idiv(i, 8) - 1], i0 % 8, 8) << (n - nPart);\n\n\t\t\t\ti0 = i;\n\t\t\t} else if (i == this.#pos + n) {\n\t\t\t\tres += imask(this.#view[idiv(i, 8)], i0 % 8, i % 8);\n\t\t\t}\n\t\t}\n\n\t\tthis.#pos += n;\n\t\treturn res << leftShift;\n\t}\n\n\t/**\n\t * Moves position to next byte boundary\n     * @package\n\t * @param {boolean} force - if true then move to next byte boundary if already at byte boundary\n\t */\n\tmoveToByteBoundary(force = false) {\n\t\tif (this.#pos % 8 != 0) {\n\t\t\tlet n = 8 - this.#pos % 8;\n\n\t\t\tvoid this.readBits(n);\n\t\t} else if (force) {\n\t\t\tthis.readBits(8);\n\t\t}\n\t}\n\n\t/**\n\t * Reads 8 bits\n     * @package\n\t * @returns {number}\n\t */\n\treadByte() {\n\t\treturn this.readBits(8);\n\t}\n\n\t/**\n\t * Dumps remaining bits we #pos isn't yet at end.\n\t * This is intended for debugging use.\n     * @package\n\t */\n\tdumpRemainingBits() {\n\t\tif (!this.eof()) {\n\t\t\tconsole.log(\"remaining bytes:\");\n\t\t\tfor (let first = true, i = idiv(this.#pos, 8); i < this.#view.length; first = false, i++) {\n\t\t\t\tif (first && this.#pos % 8 != 0) {\n\t\t\t\t\tconsole.log(byteToBitString(imask(this.#view[i], this.#pos % 8, 8) << 8 - this.#pos % 7));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(byteToBitString(this.#view[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(\"eof\");\n\t\t}\n\t}\n}\n\n/**\n * BitWriter turns a string of '0's and '1's into a list of bytes.\n * Finalization pads the bits using '0*1' if not yet aligned with the byte boundary.\n * @package\n */\nclass BitWriter {\n\t/**\n\t * Concatenated and padded upon finalization\n\t * @type {string[]}\n\t */\n\t#parts;\n\n\t/**\n\t * Number of bits written so far\n\t * @type {number}\n\t */\n\t#n;\n\n\tconstructor() {\n\t\tthis.#parts = [];\n\t\tthis.#n = 0;\n\t}\n\n\t/**\n     * @package\n\t * @type {number}\n\t */\n\tget length() {\n\t\treturn this.#n;\n\t}\n\n\t/**\n\t * Write a string of '0's and '1's to the BitWriter.\n     * @package\n\t * @param {string} bitChars\n\t */\n\twrite(bitChars) {\n\t\tfor (let c of bitChars) {\n\t\t\tif (c != '0' && c != '1') {\n\t\t\t\tthrow new Error(\"bad bit char\");\n\t\t\t}\n\t\t}\n\n\t\tthis.#parts.push(bitChars);\n\t\tthis.#n += bitChars.length;\n\t}\n\n\t/**\n     * @package\n\t * @param {number} byte\n\t */\n\twriteByte(byte) {\n\t\tthis.write(padZeroes(byte.toString(2), 8));\n\t}\n\n\t/**\n\t * Add padding to the BitWriter in order to align with the byte boundary.\n\t * If 'force == true' then 8 bits are added if the BitWriter is already aligned.\n     * @package\n\t * @param {boolean} force \n\t */\n\tpadToByteBoundary(force = false) {\n\t\tlet nPad = 0;\n\t\tif (this.#n % 8 != 0) {\n\t\t\tnPad = 8 - this.#n % 8;\n\t\t} else if (force) {\n\t\t\tnPad = 8;\n\t\t}\n\n\t\tif (nPad != 0) {\n\t\t\tlet padding = (new Array(nPad)).fill('0');\n\t\t\tpadding[nPad - 1] = '1';\n\n\t\t\tthis.#parts.push(padding.join(''));\n\n\t\t\tthis.#n += nPad;\n\t\t}\n\t}\n\n\t/**\n\t * Pads the BitWriter to align with the byte boundary and returns the resulting bytes.\n     * @package\n\t * @param {boolean} force - force padding (will add one byte if already aligned)\n\t * @returns {number[]}\n\t */\n\tfinalize(force = true) {\n\t\tthis.padToByteBoundary(force);\n\n\t\tlet chars = this.#parts.join('');\n\n\t\tlet bytes = [];\n\n\t\tfor (let i = 0; i < chars.length; i += 8) {\n\t\t\tlet byteChars = chars.slice(i, i + 8);\n\t\t\tlet byte = parseInt(byteChars, 2);\n\n\t\t\tbytes.push(byte);\n\t\t}\n\n\t\treturn bytes;\n\t}\n}\n\n/**\n * Function that generates a random number between 0 and 1\n * @typedef {() => number} NumberGenerator\n */\n\n/**\n * A Source instance wraps a string so we can use it cheaply as a reference inside a Site.\n * Also used by VSCode plugin\n */\nclass Source {\n\t#raw;\n\t#fileIndex;\n\t#errors; // errors are collected into this object\n\n\t/**\n\t * @param {string} raw \n\t * @param {?number} fileIndex\n\t */\n\tconstructor(raw, fileIndex = null) {\n\t\tthis.#raw = assertDefined(raw);\n\t\tthis.#fileIndex = fileIndex;\n\t\tthis.#errors = [];\n\t}\n\n    /**\n     * @package\n     * @type {string}\n     */\n\tget raw() {\n\t\treturn this.#raw;\n\t}\n\n    /**\n     * @package\n     * @type {?number}\n     */\n\tget fileIndex() {\n\t\treturn this.#fileIndex;\n\t}\n\n\t/**\n\t * @type {Error[]}\n\t */\n\tget errors() {\n\t\treturn this.#errors;\n\t}\n\n\tthrowErrors() {\n\t\tif (this.#errors.length > 0) {\n\t\t\tthrow this.#errors[0];\n\t\t}\n\t}\n\n\t/**\n\t * Get char from the underlying string.\n\t * Should work fine utf-8 runes.\n     * @package\n\t * @param {number} pos\n\t * @returns {string}\n\t */\n\tgetChar(pos) {\n\t\treturn this.#raw[pos];\n\t}\n\t\n\t/**\n\t * Returns word under pos\n     * @package\n\t * @param {number} pos \n\t * @returns {?string}\n\t */\n\tgetWord(pos) {\n\t\t/** @type {string[]} */\n\t\tconst chars = [];\n\n\t\t/**\n\t\t * @param {string | undefined} c \n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isWordChar(c) {\n\t\t\tif (c === undefined) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn (c == '_' || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));\n\t\t\t}\n\t\t}\n\n\t\tlet c = this.#raw[pos];\n\t\twhile (isWordChar(c)) {\n\t\t\tchars.push(c);\n\t\t\tpos += 1;\n\t\t\tc = this.#raw[pos];\n\t\t}\n\n\t\tif (chars.length == 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn chars.join(\"\");\n\t\t}\n\t}\n\n    /**\n     * @package\n     * @type {number}\n     */\n\tget length() {\n\t\treturn this.#raw.length;\n\t}\n\n\t/**\n\t * Calculates the line number of the line where the given character is located (0-based).\n     * @package\n\t * @param {number} pos \n\t * @returns {number}\n\t */\n\tposToLine(pos) {\n\t\tlet line = 0;\n\t\tfor (let i = 0; i < pos; i++) {\n\t\t\tif (this.#raw[i] == '\\n') {\n\t\t\t\tline += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn line;\n\t}\n\n\t/**\n\t * Calculates the column and line number where the given character is located (0-based).\n     * @package\n\t * @param {number} pos\n\t * @returns {[number, number]}\n\t */\n\t// returns [col, line]\n\tposToLineAndCol(pos) {\n\t\tlet col = 0;\n\t\tlet line = 0;\n\t\tfor (let i = 0; i < pos; i++) {\n\t\t\tif (this.#raw[i] == '\\n') {\n\t\t\t\tcol = 0;\n\t\t\t\tline += 1;\n\t\t\t} else {\n\t\t\t\tcol += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn [line, col];\n\t}\n\n\t/**\n\t * Creates a more human-readable version of the source by prepending the line-numbers to each line.\n\t * The line-numbers are at least two digits.\n\t * @example\n\t * (new Source(\"hello\\nworld\")).pretty() => \"01  hello\\n02  world\"\n     * @package\n\t * @returns {string}\n\t */\n\tpretty() {\n\t\tconst lines = this.#raw.split(\"\\n\");\n\n\t\tconst nLines = lines.length;\n\t\tconst nDigits = Math.max(Math.ceil(Math.log10(nLines)), 2); // line-number is at least two digits\n\n\t\tfor (let i = 0; i < nLines; i++) {\n\t\t\tlines[i] = String(i + 1).padStart(nDigits, '0') + \"  \" + lines[i];\n\t\t}\n\n\t\treturn lines.join(\"\\n\");\n\t}\n}\n\n/**\n * A tag function for a helios source.\n * Is just a marker so IDE support can work on literal helios sources inside javascript/typescript files.\n * @example\n * hl`hello ${\"world\"}!` => \"hello world!\"\n * @param {string[]} a \n * @param  {...any} b \n * @returns {string}\n */\nfunction hl(a, ...b) {\n\treturn a.map((part, i) => {\n\t\tif (i < b.length) {\n\t\t\treturn part + b[i].toString();\n\t\t} else {\n\t\t\treturn part;\n\t\t}\n\t}).join(\"\");\n}\n\n/**\n * Display a warning message that a certain feature will be deprecated at some point in the future.\n * @package\n * @param {string} feature\n * @param {string} futureVersion\n * @param {string} alternative\n * @param {string} docUrl\n */\nfunction deprecationWarning(feature, futureVersion, alternative, docUrl = \"\") {\n\tlet msg = `${feature} is DEPRECATED, and will be removed from version ${futureVersion} onwards!\n${alternative}`;\n\n\tif (docUrl != \"\") {\n\t\tmsg += `\\n(for more information: ${docUrl})`;\n\t}\n\n\tconsole.warn(msg);\n}\n\n\n\n////////////////////\n// Section 3: Tokens\n////////////////////\n\n/**\n * Each Token/Expression/Statement has a Site, which encapsulates a position in a Source\n * @package\n */\nclass Site {\n\t#src;\n\t#startPos;\n\t#endPos;\n\n\t/** @type {?Site} - end of token, exclusive, TODO: replace with endPos */\n\t#endSite;\n\n\t/**@type {?Site} */\n\t#codeMapSite;\n\n\t/**\n\t * @param {Source} src \n\t * @param {number} startPos\n\t * @param {number} endPos \n\t */\n\tconstructor(src, startPos, endPos = startPos + 1) {\n\t\tthis.#src = src;\n\t\tthis.#startPos = startPos;\n\t\tthis.#endPos = endPos;\n\t\tthis.#endSite = null;\n\t\tthis.#codeMapSite = null;\n\t}\n\n\tstatic dummy() {\n\t\treturn new Site(new Source(\"\"), 0);\n\t}\n\n\tget src() {\n\t\treturn this.#src;\n\t}\n\n\tget startPos() {\n\t\treturn this.#startPos;\n\t}\n\n\tget endPos() {\n\t\treturn this.#endPos;\n\t}\n\t\n\tget endSite() {\n\t\treturn this.#endSite;\n\t}\n\n\t/**\n\t * @param {Site} other \n\t * @returns {Site}\n\t */\n\tmerge(other) {\n\t\treturn new Site(this.#src, this.#startPos, other.#endPos);\n\t}\n\n\t/**\n\t * @param {?Site} site\n\t */\n\tsetEndSite(site) {\n\t\tthis.#endSite = site;\n\t}\n\n\t/**\n\t * @type {?Site} \n\t */\n\tget codeMapSite() {\n\t\treturn this.#codeMapSite;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t */\n\tsetCodeMapSite(site) {\n\t\tthis.#codeMapSite = site;\n\t}\n\n\t/**\n\t * Returns a SyntaxError\n\t * @param {string} info \n\t * @returns {UserError}\n\t */\n\tsyntaxError(info = \"\") {\n\t\treturn UserError.syntaxError(this.#src, this.#startPos, this.#endPos, info);\n\t}\n\n\t/**\n\t * Returns a TypeError\n\t * @param {string} info\n\t * @returns {UserError}\n\t */\n\ttypeError(info = \"\") {\n\t\treturn UserError.typeError(this.#src, this.#startPos, this.#endPos, info);\n\t}\n\n\t/**\n\t * Returns a ReferenceError\n\t * @param {string} info \n\t * @returns {UserError}\n\t */\n\treferenceError(info = \"\") {\n\t\treturn UserError.referenceError(this.#src, this.#startPos, this.#endPos, info);\n\t}\n\n\t/**\n\t * Returns a RuntimeError\n\t * @param {string} info\n\t * @returns {UserError}\n\t */\n\truntimeError(info = \"\") {\n\t\tif (this.#codeMapSite !== null) {\n\t\t\tlet site = this.#codeMapSite;\n\t\t\treturn RuntimeError.newRuntimeError(site.#src, site.#startPos, false, info);\n\t\t} else {\n\t\t\treturn RuntimeError.newRuntimeError(this.#src, this.#startPos, true, info);\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the column,line position in 'this.#src'\n\t * @returns {[number, number, number, number]} - [startLine, startCol, endLine, endCol]\n\t */\n\tgetFilePos() {\n\t\tconst [startLine, startCol] = this.#src.posToLineAndCol(this.#startPos);\n\n\t\tconst [endLine, endCol] = this.#src.posToLineAndCol(this.#endPos);\n\n\t\treturn [startLine, startCol, endLine, endCol];\n\t}\n}\n\n\n/**\n * UserErrors are generated when the user of Helios makes a mistake (eg. a syntax error),\n * or when the user of Helios throws an explicit error inside a script (eg. division by zero).\n */\n class UserError extends Error {\n\t#src;\n\t#startPos;\n\t#endPos;\n\n\t/**\n\t * @param {string} msg\n\t * @param {Source} src \n\t * @param {number} startPos \n\t * @param {number} endPos\n\t */\n\tconstructor(msg, src, startPos, endPos = startPos + 1) {\n\t\tsuper(msg);\n\t\tthis.#src = src;\n\t\tthis.#startPos = startPos;\n\t\tthis.#endPos = endPos;\n\t}\n\n\t/**\n\t * @param {string} type\n\t * @param {Source} src \n\t * @param {number} startPos \n\t * @param {number} endPos\n\t * @param {string} info \n\t */\n\tstatic new(type, src, startPos, endPos, info = \"\") {\n\t\tlet line = src.posToLine(startPos);\n\n\t\tlet msg = `${type} on line ${line + 1}`;\n\t\tif (info != \"\") {\n\t\t\tmsg += `: ${info}`;\n\t\t}\n\n\t\treturn new UserError(msg, src, startPos, endPos);\n\t}\n\n\t/**\n\t * @type {Source}\n\t */\n\tget src() {\n\t\treturn this.#src;\n\t}\n\n\t/**\n\t * Constructs a SyntaxError\n\t * @param {Source} src \n\t * @param {number} startPos \n\t * @param {number} endPos\n\t * @param {string} info \n\t * @returns {UserError}\n\t */\n\tstatic syntaxError(src, startPos, endPos, info = \"\") {\n\t\tconst error = UserError.new(\"SyntaxError\", src, startPos, endPos, info);\n\n\t\tsrc.errors.push(error);\n\n\t\treturn error;\n\t}\n\n\t/**\n\t * Constructs a TypeError\n\t * @param {Source} src \n\t * @param {number} startPos \n\t * @param {number} endPos\n\t * @param {string} info \n\t * @returns {UserError}\n\t */\n\tstatic typeError(src, startPos, endPos, info = \"\") {\n\t\tconst error = UserError.new(\"TypeError\", src, startPos, endPos, info);\n\n\t\tsrc.errors.push(error);\n\n\t\treturn error;\n\t}\n\n\t/**\n\t * @param {Error} e \n\t * @returns {boolean}\n\t */\n\tstatic isTypeError(e) {\n\t\treturn (e instanceof UserError) && e.message.startsWith(\"TypeError\");\n\t}\n\n\t/**\n\t * Constructs a ReferenceError (i.e. name undefined, or name unused)\n\t * @param {Source} src \n\t * @param {number} startPos \n\t * @param {number} endPos\n\t * @param {string} info \n\t * @returns {UserError}\n\t */\n\tstatic referenceError(src, startPos, endPos, info = \"\") {\n\t\tconst error = UserError.new(\"ReferenceError\", src, startPos, endPos, info);\n\n\t\tsrc.errors.push(error);\n\n\t\treturn error;\n\t}\n\n\t/**\n\t * @param {Error} e \n\t * @returns {boolean}\n\t */\n\tstatic isReferenceError(e) {\n\t\treturn (e instanceof UserError) && e.message.startsWith(\"ReferenceError\");\n\t}\n\n\tget data() {\n\t\tthrow new Error(\"is error\");\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget startPos() {\n\t\treturn this.#startPos;\n\t}\n\n\t/**\n\t * Calculates column/line position in 'this.src'.\n\t * @returns {[number, number, number, number]} - [startLine, startCol, endLine, endCol]\n\t */\n\tgetFilePos() {\n\t\tconst [startLine, startCol] = this.#src.posToLineAndCol(this.#startPos);\n\t\tconst [endLine, endCol] = this.#src.posToLineAndCol(this.#endPos);\n\n\t\treturn [startLine, startCol, endLine, endCol];\n\t}\n\n\t/**\n\t * Dumps the error without throwing.\n\t * If 'verbose == true' the Source is also pretty printed with line-numbers.\n\t * @param {boolean} verbose \n\t */\n\tdump(verbose = false) {\n\t\tif (verbose) {\n\t\t\tconsole.error(this.#src.pretty());\n\t\t}\n\n\t\tconsole.error(\"\\n\" + this.message);\n\t}\n\n\t/**\n\t * Returns the error message (alternative to e.message)\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.message;\n\t}\n\n\t/**\n\t * Catches any UserErrors thrown inside 'fn()`.\n\t * Dumps the error\n\t * @template T\n\t * @param {() => T} fn \n\t * @param {boolean} verbose \n\t * @returns {T | undefined}\t\n\t */\n\tstatic catch(fn, verbose = false) {\n\t\ttry {\n\t\t\treturn fn();\n\t\t} catch (error) {\n\t\t\tif (error instanceof UserError) {\n\t\t\t\terror.dump(verbose);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @typedef {(error: UserError) => void} Throw\n */\n\n/**\n * @package\n */\nclass RuntimeError extends UserError {\n\t#isIR; // last trace added\n\n\t/**\n\t * @param {string} msg \n\t * @param {Source} src \n\t * @param {number} pos \n\t * @param {boolean} isIR \n\t */\n\tconstructor(msg, src, pos, isIR) {\n\t\tsuper(msg, src, pos);\n\t\tthis.#isIR = isIR;\n\t}\n\n\t/**\n\t * @param {Source} src \n\t * @param {number} pos \n\t * @param {boolean} isIR\n\t * @param {string} info\n\t * @returns {RuntimeError}\n\t */\n\tstatic newRuntimeError(src, pos, isIR, info = \"\") {\n\t\tlet line = src.posToLine(pos);\n\n\t\tlet msg = `RuntimeError on line ${line + 1}${isIR ? \" of IR\" : \"\"}`;\n\t\tif (info != \"\") {\n\t\t\tmsg += `: ${info}`;\n\t\t}\n\n\t\treturn new RuntimeError(msg, src, pos, isIR);\n\t}\n\n\t/**\n\t * @param {Source} src \n\t * @param {number} pos \n\t * @param {boolean} isIR \n\t * @param {string} info \n\t * @returns {RuntimeError}\n\t */\n\taddTrace(src, pos, isIR, info = \"\") {\n\t\tif (isIR && !this.#isIR) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet line = src.posToLine(pos);\n\n\t\tlet msg = `Trace${info == \"\" ? \":\" : \",\"} line ${line + 1}`;\n\t\tif (isIR) {\n\t\t\tmsg += \" of IR\";\n\t\t} \n\n\t\tlet word = src.getWord(pos);\n\t\tif (word !== null && word !== \"print\") {\n\t\t\tmsg += ` in '${word}'`;\n\t\t}\n\n\t\tif (info != \"\") {\n\t\t\tmsg += `: ${info}`;\n\t\t}\n\n\t\t\n\t\tmsg += \"\\n\" + this.message;\n\n\t\treturn new RuntimeError(msg, this.src, this.startPos, isIR);\n\t}\n\t\n\t/**\n\t * @param {Site} site \n\t * @param {string} info \n\t * @returns {RuntimeError}\n\t */\n\taddTraceSite(site, info = \"\") {\n\t\tif (site.codeMapSite === null) {\n\t\t\treturn this.addTrace(site.src, site.startPos, true, info);\n\t\t} else {\n\t\t\treturn this.addTrace(site.codeMapSite.src, site.codeMapSite.startPos, false, info);\n\t\t}\n\t}\n}\n\n/**\n * Token is the base class of all Expressions and Statements\n */\nclass Token {\n\t#site;\n\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tthis.#site = assertDefined(site); // position in source of start of token\n\t}\n\n\tget site() {\n\t\treturn this.#site;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns 'true' if 'this' is a literal primitive, a literal struct constructor, or a literal function expression.\n\t * @returns {boolean}\n\t */\n\tisLiteral() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns 'true' if 'this' is a Word token.\n\t * @param {?(string | string[])} value\n\t * @returns {boolean}\n\t */\n\tisWord(value = null) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisKeyword() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns 'true' if 'this' is a Symbol token (eg. '+', '(' etc.)\n\t * @param {?(string | string[])} value\n\t * @returns {boolean}\n\t */\n\tisSymbol(value = null) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns 'true' if 'this' is a group (eg. '(...)').\n\t * @param {?string} value\n\t * @param {number | null} nFields\n\t * @returns {boolean}\n\t */\n\tisGroup(value, nFields = null) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns a SyntaxError at the current Site.\n\t * @param {string} msg \n\t * @returns {UserError}\n\t */\n\tsyntaxError(msg) {\n\t\treturn this.#site.syntaxError(msg);\n\t}\n\n\t/**\n\t * Returns a TypeError at the current Site.\n\t * @param {string} msg\n\t * @returns {UserError}\n\t */\n\ttypeError(msg) {\n\t\treturn this.#site.typeError(msg);\n\t}\n\n\t/**\n\t * Returns a ReferenceError at the current Site.\n\t * @param {string} msg\n\t * @returns {UserError}\n\t */\n\treferenceError(msg) {\n\t\treturn this.#site.referenceError(msg);\n\t}\n\n\t/**\n\t * Throws a SyntaxError if 'this' isn't a Word.\n\t * @param {?(string | string[])} value \n\t * @returns {Word | null}\n\t */\n\tassertWord(value = null) {\n\t\tif (value !== null) {\n\t\t\tthis.syntaxError(`expected \\'${value}\\', got \\'${this.toString()}\\'`);\n\t\t} else {\n\t\t\tthis.syntaxError(`expected word, got ${this.toString()}`);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Throws a SyntaxError if 'this' isn't a Symbol.\n\t * @param {?(string | string[])} value \n\t * @returns {SymbolToken | null}\n\t */\n\tassertSymbol(value = null) {\n\t\tif (value !== null) {\n\t\t\tthis.syntaxError(`expected '${value}', got '${this.toString()}'`);\n\t\t} else {\n\t\t\tthis.syntaxError(`expected symbol, got '${this.toString()}'`);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Throws a SyntaxError if 'this' isn't a Group.\n\t * @param {?string} type \n\t * @param {?number} nFields\n\t * @returns {Group | null}\n\t */\n\tassertGroup(type = null, nFields = null) {\n\t\tif (type !== null) {\n\t\t\tthis.syntaxError(`invalid syntax: expected '${type}...${Group.matchSymbol(type)}'`);\n\t\t} else {\n\t\t\tthis.syntaxError(`invalid syntax: expected group`);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * @package\n * @param {undefined | null | Token} t\n * @param {Site} site\n * @param {string} msg\n * @returns {null | Token}\n */\nfunction assertToken(t, site, msg = \"expected token\") {\n\tif (!t) {\n\t\tsite.syntaxError(msg);\n\t\treturn null;\n\t} else {\n\t\treturn t;\n\t}\n}\n\n/**\n * A Word token represents a token that matches /[A-Za-z_][A-Za-z_0-9]/\n * @package\n */\nclass Word extends Token {\n\t#value;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} value \n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * @param {string} value \n\t * @returns {Word}\n\t */\n\tstatic new(value) {\n\t\treturn new Word(Site.dummy(), value);\n\t}\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @param {?(string | string[])} value \n\t * @returns {boolean}\n\t */\n\tisWord(value = null) {\n\t\tif (value !== null) {\n\t\t\tif (value instanceof Array) {\n\t\t\t\treturn value.lastIndexOf(this.#value) != -1;\n\t\t\t} else {\n\t\t\t\treturn value == this.#value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * @param {?(string | string[])} value \n\t * @returns {Word}\n\t */\n\tassertWord(value = null) {\n\t\tif (!this.isWord(value)) {\n\t\t\tsuper.assertWord(value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {Word}\n\t */\n\tassertNotInternal() {\n\t\tif (this.#value == \"_\") {\n\t\t\tthrow this.syntaxError(\"_ is reserved\");\n\t\t} else if (this.#value.startsWith(\"__\")) {\n\t\t\tthrow this.syntaxError(\"__ prefix is reserved\");\n\t\t} else if (this.#value.endsWith(\"__\")) {\n\t\t\tthrow this.syntaxError(\"__ suffix is reserved\");\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisKeyword() {\n\t\tswitch (this.#value) {\n\t\t\tcase \"const\":\n\t\t\tcase \"func\":\n\t\t\tcase \"struct\":\n\t\t\tcase \"enum\":\n\t\t\tcase \"import\":\n\t\t\tcase \"if\":\n\t\t\tcase \"else\":\n\t\t\tcase \"switch\":\n\t\t\tcase \"self\":\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Word | null}\n\t */\n\tassertNotKeyword() {\n\t\tthis.assertNotInternal();\n\n\t\tif (this.isKeyword()) {\n\t\t\tthis.syntaxError(`'${this.#value}' is a reserved word`);\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Finds the index of the first Word(value) in a list of tokens\n\t * Returns -1 if none found\n\t * @param {Token[]} ts \n\t * @param {string | string[]} value \n\t * @returns {number}\n\t */\n\tstatic find(ts, value) {\n\t\treturn ts.findIndex(item => item.isWord(value));\n\t}\n}\n\n/**\n * Symbol token represent anything non alphanumeric\n * @package\n */\nclass SymbolToken extends Token {\n\t#value;\n\n\t/**\n\t * @param {Site} site\n\t * @param {string} value\n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @param {?(string | string[])} value \n\t * @returns {boolean}\n\t */\n\tisSymbol(value = null) {\n\t\tif (value !== null) {\n\t\t\tif (value instanceof Array) {\n\t\t\t\treturn value.lastIndexOf(this.#value) != -1;\n\t\t\t} else {\n\t\t\t\treturn value == this.#value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * @param {?(string | string[])} value \n\t * @returns {SymbolToken}\n\t */\n\tassertSymbol(value) {\n\t\tif (!this.isSymbol(value)) {\n\t\t\tsuper.assertSymbol(value);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Finds the index of the first Symbol(value) in a list of tokens.\n\t * Returns -1 if none found.\n\t * @param {Token[]} ts\n\t * @param {string | string[]} value\n\t * @returns {number}\n\t */\n\tstatic find(ts, value) {\n\t\treturn ts.findIndex(item => item.isSymbol(value));\n\t}\n\n\t/**\n\t * Finds the index of the last Symbol(value) in a list of tokens.\n\t * Returns -1 if none found.\n\t * @param {Token[]} ts \n\t * @param {string | string[]} value \n\t * @returns {number}\n\t */\n\tstatic findLast(ts, value) {\n\t\tfor (let i = ts.length - 1; i >= 0; i--) {\n\t\t\tif (ts[i].isSymbol(value)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n\n/**\n * Group token can '(...)', '[...]' or '{...}' and can contain comma separated fields.\n * @package\n */\nclass Group extends Token {\n\t#type;\n\t#fields;\n\t#firstComma;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} type - \"(\", \"[\" or \"{\"\n\t * @param {Token[][]} fields \n\t * @param {?SymbolToken} firstComma\n\t */\n\tconstructor(site, type, fields, firstComma = null) {\n\t\tsuper(site);\n\t\tthis.#type = type;\n\t\tthis.#fields = fields; // list of lists of tokens\n\t\tthis.#firstComma = firstComma;\n\n\t\tassert(fields.length < 2 || firstComma !== null);\n\t}\n\n\tget fields() {\n\t\treturn this.#fields.slice(); // copy, so fields_ doesn't get mutated\n\t}\n\n\t/**\n\t * @param {?string} type \n\t * @param {number | null} nFields\n\t * @returns {boolean}\n\t */\n\tisGroup(type = null, nFields = null) {\n\t\tconst nFieldsOk = (nFields === null) || (nFields == this.#fields.length);\n\n\t\tif (type !== null) {\n\t\t\treturn this.#type == type && nFieldsOk;\n\t\t} else {\n\t\t\treturn nFieldsOk;\n\t\t}\n\t}\n\n\t/**\n\t * @param {?string} type \n\t * @param {?number} nFields \n\t * @returns {Group | null}\n\t */\n\tassertGroup(type = null, nFields = null) {\n\t\tif (type !== null && this.#type != type) {\n\t\t\tthis.syntaxError(`invalid syntax: expected '${type}...${Group.matchSymbol(type)}', got '${this.#type}...${Group.matchSymbol(this.#type)}'`);\n\n\t\t\treturn null;\n\t\t} else if (type !== null && nFields !== null && nFields != this.#fields.length) {\n\t\t\tif (this.#fields.length > 1 && nFields <= 1 && this.#firstComma !== null) {\n\t\t\t\tthis.#firstComma.syntaxError(`invalid syntax, unexpected ','`);\n\t\t\t} else {\n\t\t\t\tthis.syntaxError(`invalid syntax: expected '${type}...${Group.matchSymbol(type)}' with ${nFields} field(s), got '${type}...${Group.matchSymbol(type)}' with ${this.#fields.length} fields`);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tlet s = this.#type;\n\n\t\tlet parts = [];\n\t\tfor (let f of this.#fields) {\n\t\t\tparts.push(f.map(t => t.toString()).join(\" \"));\n\t\t}\n\n\t\ts += parts.join(\", \") + Group.matchSymbol(this.#type);\n\n\t\treturn s;\n\t}\n\n\t/**\n\t * @param {Token} t \n\t * @returns {boolean}\n\t */\n\tstatic isOpenSymbol(t) {\n\t\treturn t.isSymbol(\"{\") || t.isSymbol(\"[\") || t.isSymbol(\"(\");\n\t}\n\n\t/**\n\t * @param {Token} t \n\t * @returns {boolean}\n\t */\n\tstatic isCloseSymbol(t) {\n\t\treturn t.isSymbol(\"}\") || t.isSymbol(\"]\") || t.isSymbol(\")\");\n\t}\n\n\t/**\n\t * Returns the corresponding closing bracket, parenthesis or brace.\n\t * Throws an error if not a group symbol.\n\t * @example\n\t * Group.matchSymbol(\"(\") => \")\"\n\t * @param {string | SymbolToken} t\n\t * @returns {string}\n\t */\n\tstatic matchSymbol(t) {\n\t\tif (t instanceof SymbolToken) {\n\t\t\tt = t.value;\n\t\t}\n\n\t\tif (t == \"{\") {\n\t\t\treturn \"}\";\n\t\t} else if (t == \"[\") {\n\t\t\treturn \"]\";\n\t\t} else if (t == \"(\") {\n\t\t\treturn \")\";\n\t\t} else if (t == \"}\") {\n\t\t\treturn \"{\";\n\t\t} else if (t == \"]\") {\n\t\t\treturn \"[\";\n\t\t} else if (t == \")\") {\n\t\t\treturn \"(\";\n\t\t} else {\n\t\t\tthrow new Error(\"not a group symbol\");\n\t\t}\n\t}\n\n\t/**\n\t * Finds the index of first Group(type) in list of tokens\n\t * Returns -1 if none found.\n\t * @param {Token[]} ts \n\t * @param {string} type \n\t * @returns {number}\n\t */\n\tstatic find(ts, type) {\n\t\treturn ts.findIndex(item => item.isGroup(type));\n\t}\n}\n\n/**\n * Base class of literal tokens\n * @package\n */\nclass PrimitiveLiteral extends Token {\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tsuper(site);\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisLiteral() {\n\t\treturn true;\n\t}\n}\n\n/**\n * Signed int literal token\n * @package\n */\nclass IntLiteral extends PrimitiveLiteral {\n\t#value;\n\n\t/**\n\t * @param {Site} site \n\t * @param {bigint} value \n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value.toString();\n\t}\n}\n\n/**\n * Bool literal token\n * @package\n */\nclass BoolLiteral extends PrimitiveLiteral {\n\t#value;\n\n\t/**\n\t * @param {Site} site \n\t * @param {boolean} value \n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value ? \"true\" : \"false\";\n\t}\n}\n\n/**\n * ByteArray literal token\n * @package\n */\nclass ByteArrayLiteral extends PrimitiveLiteral {\n\t#bytes;\n\n\t/**\n\t * @param {Site} site \n\t * @param {number[]} bytes \n\t */\n\tconstructor(site, bytes) {\n\t\tsuper(site);\n\t\tthis.#bytes = bytes;\n\t}\n\n\tget bytes() {\n\t\treturn this.#bytes;\n\t}\n\n\ttoString() {\n\t\treturn `#${bytesToHex(this.#bytes)}`;\n\t}\n}\n\n/**\n * String literal token (utf8)\n * @package\n */\nclass StringLiteral extends PrimitiveLiteral {\n\t#value;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} value \n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\ttoString() {\n\t\treturn `\"${this.#value.toString()}\"`;\n\t}\n}\n\n/**\n * @package\n * @typedef {[number, Site][]} CodeMap\n */\n\n/**\n * @package\n * @typedef {Map<string, IR>} IRDefinitions\n */\n\n/**\n * The IR class combines a string of intermediate representation sourcecode with an optional site.\n * The site is used for mapping IR code to the original source code.\n * @package\n */\n class IR {\n\t#content;\n\t#site;\n\n\t/**\n\t * @param {string | IR[]} content \n\t * @param {?Site} site \n\t */\n\tconstructor(content, site = null) {\n\t\tassert(!(Array.isArray(content) && content.some(item => item == undefined)), \"some items undefined\");\n\t\tthis.#content = content;\n\t\tthis.#site = site;\n\t}\n\n    /**\n     * @package\n     * @type {string | IR[]}\n     */\n\tget content() {\n\t\treturn this.#content;\n\t}\n\n    /**\n     * @package\n     * @type {?Site}\n     */\n\tget site() {\n\t\treturn this.#site;\n\t}\n\n\t/**\n\t * Returns a list containing IR instances that themselves only contain strings\n     * @package\n\t * @returns {IR[]}\n\t */\n\tflatten() {\n\t\tif (typeof this.#content == \"string\") {\n\t\t\treturn [this];\n\t\t} else {\n\t\t\t/**\n\t\t\t * @type {IR[]}\n\t\t\t */\n\t\t\tlet result = [];\n\n\t\t\tfor (let item of this.#content) {\n\t\t\t\tresult = result.concat(item.flatten());\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t/**\n\t * Intersperse nested IR content with a separator\n     * @package\n\t * @param {string} sep\n\t * @returns {IR}\n\t */\n\tjoin(sep) {\n\t\tif (typeof this.#content == \"string\") {\n\t\t\treturn this;\n\t\t} else {\n\t\t\t/** @type {IR[]} */\n\t\t\tconst result = [];\n\n\t\t\tfor (let i = 0; i < this.#content.length; i++) {\n\t\t\t\tresult.push(this.#content[i]);\n\n\t\t\t\tif (i < this.#content.length - 1) {\n\t\t\t\t\tresult.push(new IR(sep))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new IR(result);\n\t\t}\n\t}\n\n    /**\n     * @package\n\t * @returns {[string, CodeMap]}\n\t */\n\tgenerateSource() {\n\t\tconst parts = this.flatten();\n\n\t\t/** @type {string[]} */\n\t\tconst partSrcs = [];\n\n\t\t/** @type {CodeMap} */\n\t\tconst codeMap = [];\n\n\t\tlet pos = 0;\n\t\tfor (let part of parts) {\n\t\t\tconst rawPartSrc = part.content;\n\n\t\t\tif (typeof rawPartSrc == \"string\") {\n\t\t\t\tconst origSite = part.site;\n\t\t\t\tif (origSite !== null) {\n\t\t\t\t\t/** @type {[number, Site]} */\n\t\t\t\t\tconst pair = [pos, origSite];\n\n\t\t\t\t\tcodeMap.push(pair);\n\t\t\t\t}\n\n\t\t\t\tconst partSrc = replaceTabs(rawPartSrc);\n\n\t\t\t\tpos += partSrc.length;\n\t\t\t\tpartSrcs.push(partSrc);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"expected IR to contain only strings after flatten\");\n\t\t\t}\n\t\t}\n\n\t\treturn [partSrcs.join(\"\"), codeMap];\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tpretty() {\n\t\tconst [src, _] = this.generateSource();\n\n\t\treturn (new Source(src)).pretty();\n\t}\n\n\t/**\n\t * Wraps 'inner' IR source with some definitions (used for top-level statements and for builtins)\n     * @package\n\t * @param {IR} inner \n\t * @param {IRDefinitions} definitions - name -> definition\n\t * @returns {IR}\n\t */\n\tstatic wrapWithDefinitions(inner, definitions) {\n\t\tconst keys = Array.from(definitions.keys()).reverse();\n\n\t\tlet res = inner;\n\t\tfor (let key of keys) {\n\t\t\tconst definition = definitions.get(key);\n\n\t\t\tif (definition === undefined) {\n\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t} else {\n\n\t\t\t\tres = new IR([new IR(\"(\"), new IR(key), new IR(\") -> {\\n\"),\n\t\t\t\t\tres, new IR(`\\n}(\\n${TAB}/*${key}*/\\n${TAB}`), definition,\n\t\t\t\tnew IR(\"\\n)\")]);\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n}\n\n\n\n////////////////////////////////////\n// Section 4: Cryptography functions\n////////////////////////////////////\n/**\n * Size of default Blake2b digest\n * @package\n */\nvar BLAKE2B_DIGEST_SIZE = 32; // bytes\n\n/**\n * Changes the value of BLAKE2B_DIGEST_SIZE \n *  (because the nodejs crypto module only supports \n *   blake2b-512 and not blake2b-256, and we want to avoid non-standard dependencies in the \n *   test-suite)\n * @package\n * @param {number} s - 32 or 64\n */\nfunction setBlake2bDigestSize(s) {\n    BLAKE2B_DIGEST_SIZE = s;\n}\n \n/**\n * Make sure resulting number fits in uint32\n * @package\n * @param {number} x\n */\nfunction imod32(x) {\n\treturn x >>> 0;\n}\n\n/**\n * 32 bit number rotation\n * @package\n * @param {number} x - originally uint32\n * @param {number} n\n * @returns {number} - originally uint32\n */\nfunction irotr(x, n) {\n\treturn imod32((x >>> n) | (x << (32 - n)));\n}\n\n/**\n * @package\n * @param {bigint} x \n * @param {bigint} n \n * @returns {bigint}\n */\nfunction posMod(x, n) {\n\tconst res = x % n;\n\n\tif (res < 0n) {\n\t\treturn res + n;\n\t} else {\n\t\treturn res;\n\t}\n}\n\n/**\n * UInt64 number (represented by 2 UInt32 numbers)\n * @package\n */\nclass UInt64 {\n\t#high;\n\t#low;\n\n\t/**\n\t * @param {number} high  - uint32 number\n\t * @param {number} low - uint32 number\n\t */\n\tconstructor(high, low) {\t\t\n\t\tthis.#high = imod32(high);\n\t\tthis.#low = imod32(low);\n\t}\n\n\t/**\n     * @package\n\t * @returns {UInt64}\n\t */\n\tstatic zero() {\n\t\treturn new UInt64(0, 0);\n\t}\n\n\t/**\n     * @package\n\t * @param {number[]} bytes - 8 uint8 numbers\n\t * @param {boolean} littleEndian\n\t * @returns {UInt64}\n\t */\n\tstatic fromBytes(bytes, littleEndian = true) {\n\t\t/** @type {number} */\n\t\tlet low;\n\n\t\t/** @type {number} */\n\t\tlet high;\n\n\t\tif (littleEndian) {\n\t\t\tlow  = (bytes[0] << 0) | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24);\n\t\t\thigh = (bytes[4] << 0) | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24);\n\t\t} else {\n\t\t\thigh = (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | (bytes[3] << 0);\n\t\t\tlow  = (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | (bytes[7] << 0);\n\t\t}\n\n\t\treturn new UInt64(imod32(high), imod32(low));\n\t}\n\n\t/**\n     * @package\n\t * @param {string} str \n\t * @returns {UInt64}\n\t */\n\tstatic fromString(str) {\n\t\tconst high = parseInt(str.slice(0,  8), 16);\n\t\tconst low  = parseInt(str.slice(8, 16), 16);\n\n\t\treturn new UInt64(high, low);\n\t}\n\n    /**\n     * @package\n     * @type {number}\n     */\n\tget high() {\n\t\treturn this.#high;\n\t}\n\n    /**\n     * @package\n     * @type {number}\n     */\n\tget low() {\n\t\treturn this.#low;\n\t}\n\n\t/**\n\t * Returns [low[0], low[1], low[2], low[3], high[0], high[1], high[2], high[3]] if littleEndian==true\n     * @package\n\t * @param {boolean} littleEndian\n\t * @returns {number[]}\n\t */\n\ttoBytes(littleEndian = true) {\n\t\tconst res = [\n\t\t\t(0x000000ff & this.#low),\n\t\t\t(0x0000ff00 & this.#low) >>> 8,\n\t\t\t(0x00ff0000 & this.#low) >>> 16,\n\t\t\t(0xff000000 & this.#low) >>> 24,\n\t\t\t(0x000000ff & this.#high),\n\t\t\t(0x0000ff00 & this.#high) >>> 8,\n\t\t\t(0x00ff0000 & this.#high) >>> 16,\n\t\t\t(0xff000000 & this.#high) >>> 24,\n\t\t];\n\n\t\tif (!littleEndian) {\n\t\t\tres.reverse(); \n\t\t} \n\t\t\n\t\treturn res;\n\t}\n\n\t/**\n     * @package\n\t * @param {UInt64} other \n\t * @returns {boolean}\n\t */\n\teq(other) {\n\t\treturn (this.#high == other.#high) && (this.#low == other.#low);\n\t}\n\n\t/**\n     * @package\n\t * @returns {UInt64} \n\t */\n\tnot() {\n\t\treturn new UInt64(~this.#high, ~this.#low);\n\t}\n\n\t/**\n     * @package\n\t * @param {UInt64} other\n\t * @returns {UInt64}\n\t */\n\tand(other) {\n\t\treturn new UInt64(this.#high & other.#high, this.#low & other.#low);\n\t}\n\n\t/**\n     * @package\n\t * @param {UInt64} other \n\t * @returns {UInt64}\n\t */\n\txor(other) {\n\t\treturn new UInt64(this.#high ^ other.#high, this.#low ^ other.#low);\n\t}\n\n\t/**\n     * @package\n\t * @param {UInt64} other \n\t * @returns {UInt64}\n\t */\n\tadd(other) {\n\t\tconst low = this.#low + other.#low;\n\n\t\tlet high = this.#high + other.#high;\n\n\t\tif (low >= 0x100000000) {\n\t\t\thigh += 1;\n\t\t}\n\n\t\treturn new UInt64(high, low);\n\t}\n\n\t/**\n     * @package\n\t * @param {number} n \n\t * @returns {UInt64}\n\t */\n\trotr(n) {\n\t\tif (n == 32) {\n\t\t\treturn new UInt64(this.#low, this.#high);\n\t\t} else if (n > 32) {\n\t\t\treturn (new UInt64(this.#low, this.#high)).rotr(n - 32);\n\t\t} else {\n\t\t\treturn new UInt64(\n\t\t\t\timod32((this.#high >>> n) | (this.#low  << (32 - n))), \n\t\t\t\timod32((this.#low  >>> n) | (this.#high << (32 - n)))\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n     * @package\n\t * @param {number} n\n\t * @returns {UInt64}\n\t */\n\tshiftr(n) {\n\t\tif (n >= 32) {\n\t\t\treturn new UInt64(0, this.#high >>> n - 32);\n\t\t} else {\n\t\t\treturn new UInt64(this.#high >>> n, (this.#low >>> n) | (this.#high << (32 - n)));\n\t\t}\n\t}\t\n}\n\n/**\n * A collection of cryptography primitives are included here in order to avoid external dependencies\n *     mulberry32: random number generator\n *     base32 encoding and decoding\n *     bech32 encoding, checking, and decoding\n *     sha2_256, sha2_512, sha3 and blake2b hashing\n *     ed25519 pubkey generation, signing, and signature verification (NOTE: the current implementation is simple but slow)\n */\nclass Crypto {\n\t/**\n\t * Returns a simple random number generator\n     * @package\n\t * @param {number} seed\n\t * @returns {NumberGenerator} - a random number generator\n\t */\n\tstatic mulberry32(seed) {\n\t\t/**\n\t\t * @type {NumberGenerator}\n\t\t */\n\t\treturn function() {\n\t\t\tlet t = seed += 0x6D2B79F5;\n\t\t\tt = Math.imul(t ^ t >>> 15, t | 1);\n\t\t\tt ^= t + Math.imul(t ^ t >>> 7, t | 61);\n\t\t\treturn ((t ^ t >>> 14) >>> 0) / 4294967296;\n\t\t}\n\t}\n\n\t/**\n\t * Alias for rand generator of choice\n     * @package\n\t * @param {number} seed\n\t * @returns {NumberGenerator} - the random number generator function\n\t */\n\tstatic rand(seed) {\n\t\treturn this.mulberry32(seed);\n\t}\n\n\t/**\n\t * Rfc 4648 base32 alphabet\n\t * @type {string}\n\t */\n\tstatic get DEFAULT_BASE32_ALPHABET() {\n\t\treturn \"abcdefghijklmnopqrstuvwxyz234567\";\n\t}\n\n\t/**\n\t * Bech32 base32 alphabet\n\t * @type {string}\n\t */\n\tstatic get BECH32_BASE32_ALPHABET() {\n\t\treturn \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n\t}\n\t\n\t/**\n\t * Encode bytes in special base32.\n\t * @example\n\t * Crypto.encodeBase32(textToBytes(\"f\")) => \"my\"\n\t * @example\n\t * Crypto.encodeBase32(textToBytes(\"fo\")) => \"mzxq\"\n\t * @example\n\t * Crypto.encodeBase32(textToBytes(\"foo\")) => \"mzxw6\"\n\t * @example\n\t * Crypto.encodeBase32(textToBytes(\"foob\")) => \"mzxw6yq\"\n\t * @example\n\t * Crypto.encodeBase32(textToBytes(\"fooba\")) => \"mzxw6ytb\"\n\t * @example\n\t * Crypto.encodeBase32(textToBytes(\"foobar\")) => \"mzxw6ytboi\"\n     * @package\n\t * @param {number[]} bytes - uint8 numbers\n\t * @param {string} alphabet - list of chars\n\t * @return {string}\n\t */\n\tstatic encodeBase32(bytes, alphabet = Crypto.DEFAULT_BASE32_ALPHABET) {\n\t\treturn Crypto.encodeBase32Bytes(bytes).map(c => alphabet[c]).join(\"\");\n\t}\n\n\t/**\n\t * Internal method\n     * @package\n\t * @param {number[]} bytes \n\t * @returns {number[]} - list of numbers between 0 and 32\n\t */\n\tstatic encodeBase32Bytes(bytes)  {\n\t\tconst result = [];\n\n\t\tconst reader = new BitReader(bytes, false);\n\n\t\twhile (!reader.eof()) {\n\t\t\tresult.push(reader.readBits(5));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Decode base32 string into bytes.\n\t * @example\n\t * bytesToText(Crypto.decodeBase32(\"my\")) => \"f\"\n\t * @example\n\t * bytesToText(Crypto.decodeBase32(\"mzxq\")) => \"fo\"\n\t * @example\n\t * bytesToText(Crypto.decodeBase32(\"mzxw6\")) => \"foo\"\n\t * @example\n\t * bytesToText(Crypto.decodeBase32(\"mzxw6yq\")) => \"foob\"\n\t * @example\n\t * bytesToText(Crypto.decodeBase32(\"mzxw6ytb\")) => \"fooba\"\n\t * @example\n\t * bytesToText(Crypto.decodeBase32(\"mzxw6ytboi\")) => \"foobar\"\n     * @package\n\t * @param {string} encoded\n\t * @param {string} alphabet\n\t * @return {number[]}\n\t */\n\tstatic decodeBase32(encoded, alphabet = Crypto.DEFAULT_BASE32_ALPHABET) {\n\t\tconst writer = new BitWriter();\n\n\t\tconst n = encoded.length;\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst c = encoded[i];\n\t\t\tconst code = alphabet.indexOf(c.toLowerCase());\n\n\t\t\tif (i == n - 1) {\n\t\t\t\t// last, make sure we align to byte\n\n\t\t\t\tconst nCut = n*5 - 8*Math.floor(n*5/8);\n\n\t\t\t\tconst bits = padZeroes(code.toString(2), 5)\n\n\t\t\t\twriter.write(bits.slice(0, 5 - nCut));\n\t\t\t} else {\n\t\t\t\tconst bits = padZeroes(code.toString(2), 5);\n\n\t\t\t\twriter.write(bits);\n\t\t\t}\n\t\t}\n\n\t\tconst result = writer.finalize(false);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expand human readable prefix of the bech32 encoding so it can be used in the checkSum\n\t * Internal method.\n     * @package\n\t * @param {string} hrp\n\t * @returns {number[]}\n\t */\n\tstatic expandBech32HumanReadablePart(hrp) {\n\t\tconst bytes = [];\n\t\tfor (let c of hrp) {\n\t\t\tbytes.push(c.charCodeAt(0) >> 5);\n\t\t}\n\n\t\tbytes.push(0);\n\n\t\tfor (let c of hrp) {\n\t\t\tbytes.push(c.charCodeAt(0) & 31);\n\t\t}\n\n\t\treturn bytes;\n\t}\n\n\t/**\n\t * Used as part of the bech32 checksum.\n\t * Internal method.\n     * @package\n\t * @param {number[]} bytes \n\t * @returns {number}\n\t */\n\tstatic calcBech32Polymod(bytes) {\n\t\tconst GEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n\n\t\tlet chk = 1;\n\t\tfor (let b of bytes) {\n\t\t\tconst c = (chk >> 25);\n\t\t\tchk = (chk & 0x1fffffff) << 5 ^ b;\n\n\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\tif (((c >> i) & 1) != 0) {\n\t\t\t\t\tchk ^= GEN[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn chk;\n\t}\n\n\t/**\n\t * Generate the bech32 checksum\n\t * Internal method\n     * @package\n\t * @param {string} hrp \n\t * @param {number[]} data - numbers between 0 and 32\n\t * @returns {number[]} - 6 numbers between 0 and 32\n\t */\n\tstatic calcBech32Checksum(hrp, data) {\n\t\tconst bytes = Crypto.expandBech32HumanReadablePart(hrp).concat(data);\n\n\t\tconst chk = Crypto.calcBech32Polymod(bytes.concat([0,0,0,0,0,0])) ^ 1;\n\n\t\tconst chkSum = [];\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tchkSum.push((chk >> 5 * (5 - i)) & 31);\n\t\t}\n\n\t\treturn chkSum;\n\t}\n\n\t/**\n\t * Creates a bech32 checksummed string (used to represent Cardano addresses)\n\t * @example\n\t * Crypto.encodeBech32(\"foo\", textToBytes(\"foobar\")) => \"foo1vehk7cnpwgry9h96\"\n\t * @example\n\t * Crypto.encodeBech32(\"addr_test\", hexToBytes(\"70a9508f015cfbcffc3d88ac4c1c934b5b82d2bb281d464672f6c49539\")) => \"addr_test1wz54prcptnaullpa3zkyc8ynfddc954m9qw5v3nj7mzf2wggs2uld\"\n     * @package\n\t * @param {string} hrp \n\t * @param {number[]} data - uint8 0 - 256\n\t * @returns {string}\n\t */\n\tstatic encodeBech32(hrp, data) {\n\t\tassert(hrp.length > 0, \"human-readable-part must have non-zero length\");\n\n\t\tdata = Crypto.encodeBase32Bytes(data);\n\n\t\tconst chkSum = Crypto.calcBech32Checksum(hrp, data);\n\n\t\treturn hrp + \"1\" + data.concat(chkSum).map(i => Crypto.BECH32_BASE32_ALPHABET[i]).join(\"\");\n\t}\n\n\t/**\n\t * Decomposes a bech32 checksummed string (i.e. Cardano address), and returns the human readable part and the original bytes\n\t * Throws an error if checksum is invalid.\n\t * @example\n\t * bytesToHex(Crypto.decodeBech32(\"addr_test1wz54prcptnaullpa3zkyc8ynfddc954m9qw5v3nj7mzf2wggs2uld\")[1]) => \"70a9508f015cfbcffc3d88ac4c1c934b5b82d2bb281d464672f6c49539\"\n     * @package\n\t * @param {string} addr \n\t * @returns {[string, number[]]}\n\t */\n\tstatic decodeBech32(addr) {\n\t\tassert(Crypto.verifyBech32(addr), \"invalid bech32 addr\");\n\n\t\tconst i = addr.indexOf(\"1\");\n\n\t\tassert(i != -1);\n\n\t\tconst hrp = addr.slice(0, i);\n\n\t\taddr = addr.slice(i+1);\n\n\t\tconst data = Crypto.decodeBase32(addr.slice(0, addr.length - 6), Crypto.BECH32_BASE32_ALPHABET);\n\n\t\treturn [hrp, data];\n\t}\n\n\t/**\n\t * Verify a bech32 checksum\n\t * @example\n\t * Crypto.verifyBech32(\"foo1vehk7cnpwgry9h96\") => true\n\t * @example\n\t * Crypto.verifyBech32(\"foo1vehk7cnpwgry9h97\") => false\n\t * @example\n\t * Crypto.verifyBech32(\"a12uel5l\") => true\n\t * @example\n\t * Crypto.verifyBech32(\"mm1crxm3i\") => false\n\t * @example\n\t * Crypto.verifyBech32(\"A1G7SGD8\") => false\n\t * @example\n\t * Crypto.verifyBech32(\"abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw\") => true\n\t * @example\n\t * Crypto.verifyBech32(\"?1ezyfcl\") => true\n\t * @example\n\t * Crypto.verifyBech32(\"addr_test1wz54prcptnaullpa3zkyc8ynfddc954m9qw5v3nj7mzf2wggs2uld\") => true\n     * @package\n\t * @param {string} addr\n\t * @returns {boolean}\n\t */\n\tstatic verifyBech32(addr) {\n\t\tconst data =[];\n\n\t\tconst i = addr.indexOf(\"1\");\n        \n\t\tif (i == -1 || i == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hrp = addr.slice(0, i);\n\n\t\taddr = addr.slice(i + 1);\n\n\t\tfor (let c of addr) {\n\t\t\tconst j = Crypto.BECH32_BASE32_ALPHABET.indexOf(c);\n\t\t\tif (j == -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tdata.push(j);\n\t\t}\n\n\t\tconst chkSumA = data.slice(data.length - 6);\n\n\t\tconst chkSumB = Crypto.calcBech32Checksum(hrp, data.slice(0, data.length - 6));\n\n\t\tfor (let j = 0; j < 6; j++) {\n\t\t\tif (chkSumA[j] != chkSumB[j]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Calculates sha2-256 (32bytes) hash of a list of uint8 numbers.\n\t * Result is also a list of uint8 number.\n\t * @example \n\t * bytesToHex(Crypto.sha2_256([0x61, 0x62, 0x63])) => \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\"\n\t * @example\n\t * Crypto.sha2_256(textToBytes(\"Hello, World!\")) => [223, 253, 96, 33, 187, 43, 213, 176, 175, 103, 98, 144, 128, 158, 195, 165, 49, 145, 221, 129, 199, 247, 10, 75, 40, 104, 138, 54, 33, 130, 152, 111]\n     * @package\n\t * @param {number[]} bytes - list of uint8 numbers\n\t * @returns {number[]} - list of uint8 numbers\n\t */\n\tstatic sha2_256(bytes) {\n\t\t/**\n\t\t * Pad a bytearray so its size is a multiple of 64 (512 bits).\n\t\t * Internal method.\n\t\t * @param {number[]} src - list of uint8 numbers\n\t\t * @returns {number[]}\n\t\t */\n\t\tfunction pad(src) {\n\t\t\tconst nBits = src.length*8;\n\n\t\t\tconst dst = src.slice();\n\n\t\t\tdst.push(0x80);\n\n\t\t\tlet nZeroes = (64 - dst.length%64) - 8;\n\t\t\tif (nZeroes < 0) {\n\t\t\t\tnZeroes += 64;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < nZeroes; i++) {\n\t\t\t\tdst.push(0);\n\t\t\t}\n\n\t\t\t// assume nBits fits in 32 bits\n\n\t\t\tdst.push(0);\n\t\t\tdst.push(0);\n\t\t\tdst.push(0);\n\t\t\tdst.push(0);\n\t\t\tdst.push(imod8(nBits >> 24));\n\t\t\tdst.push(imod8(nBits >> 16));\n\t\t\tdst.push(imod8(nBits >> 8));\n\t\t\tdst.push(imod8(nBits >> 0));\n\t\t\t\n\t\t\treturn dst;\n\t\t}\n\n\t\t/**\n\t\t * @type {number[]} - 64 uint32 numbers\n\t\t */\n\t\tconst k = [\n\t\t\t0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n\t\t\t0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n\t\t\t0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n\t\t\t0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n\t\t\t0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n\t\t\t0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n\t\t\t0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n\t\t\t0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n\t\t\t0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n\t\t\t0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n\t\t\t0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n\t\t\t0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n\t\t\t0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n\t\t\t0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n\t\t\t0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n\t\t\t0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n\t\t];\n\n\t\t/**\n\t\t * Initial hash (updated during compression phase)\n\t\t * @type {number[]} - 8 uint32 number\n\t\t */\n\t\tconst hash = [\n\t\t\t0x6a09e667, \n\t\t\t0xbb67ae85, \n\t\t\t0x3c6ef372, \n\t\t\t0xa54ff53a, \n\t\t\t0x510e527f, \n\t\t\t0x9b05688c, \n\t\t\t0x1f83d9ab, \n\t\t\t0x5be0cd19,\n\t\t];\n\t\n\t\t/**\n\t\t * @param {number} x\n\t\t * @returns {number}\n\t\t */\n\t\tfunction sigma0(x) {\n\t\t\treturn irotr(x, 7) ^ irotr(x, 18) ^ (x >>> 3);\n\t\t}\n\n\t\t/**\n\t\t * @param {number} x\n\t\t * @returns {number}\n\t\t */\n\t\tfunction sigma1(x) {\n\t\t\treturn irotr(x, 17) ^ irotr(x, 19) ^ (x >>> 10);\n\t\t}\n\n\t\tbytes = pad(bytes);\n\n\t\t// break message in successive 64 byte chunks\n\t\tfor (let chunkStart = 0; chunkStart < bytes.length; chunkStart += 64) {\n\t\t\tconst chunk = bytes.slice(chunkStart, chunkStart + 64);\n\n\t\t\tconst w = (new Array(64)).fill(0); // array of 32 bit numbers!\n\n\t\t\t// copy chunk into first 16 positions of w\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tw[i] = (chunk[i*4 + 0] << 24) |\n\t\t\t\t\t   (chunk[i*4 + 1] << 16) |\n\t\t\t\t\t   (chunk[i*4 + 2] <<  8) |\n\t\t\t\t\t   (chunk[i*4 + 3]);\n\t\t\t}\n\n\t\t\t// extends the first 16 positions into the remaining 48 positions\n\t\t\tfor (let i = 16; i < 64; i++) {\n\t\t\t\tw[i] = imod32(w[i-16] + sigma0(w[i-15]) + w[i-7] + sigma1(w[i-2]));\n\t\t\t}\n\n\t\t\t// intialize working variables to current hash value\n\t\t\tlet a = hash[0];\n\t\t\tlet b = hash[1];\n\t\t\tlet c = hash[2];\n\t\t\tlet d = hash[3];\n\t\t\tlet e = hash[4];\n\t\t\tlet f = hash[5];\n\t\t\tlet g = hash[6];\n\t\t\tlet h = hash[7];\n\n\t\t\t// compression function main loop\n\t\t\tfor (let i = 0; i < 64; i++) {\n\t\t\t\tconst S1 = irotr(e, 6) ^ irotr(e, 11) ^ irotr(e, 25);\n\t\t\t\tconst ch = (e & f) ^ ((~e) & g);\n\t\t\t\tconst temp1 = imod32(h + S1 + ch + k[i] + w[i]);\n\t\t\t\tconst S0 = irotr(a, 2) ^ irotr(a, 13) ^ irotr(a, 22);\n\t\t\t\tconst maj = (a & b) ^ (a & c) ^ (b & c);\n\t\t\t\tconst temp2 = imod32(S0 + maj);\n\n\t\t\t\th = g;\n\t\t\t\tg = f;\n\t\t\t\tf = e;\n\t\t\t\te = imod32(d + temp1);\n\t\t\t\td = c;\n\t\t\t\tc = b;\n\t\t\t\tb = a;\n\t\t\t\ta = imod32(temp1 + temp2);\n\t\t\t}\n\n\t\t\t// update the hash\n\t\t\thash[0] = imod32(hash[0] + a);\n\t\t\thash[1] = imod32(hash[1] + b);\n\t\t\thash[2] = imod32(hash[2] + c);\n\t\t\thash[3] = imod32(hash[3] + d);\n\t\t\thash[4] = imod32(hash[4] + e);\n\t\t\thash[5] = imod32(hash[5] + f);\n\t\t\thash[6] = imod32(hash[6] + g);\n\t\t\thash[7] = imod32(hash[7] + h);\n\t\t}\n\n\t\t// produce the final digest of uint8 numbers\n\t\tconst result = [];\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tconst item = hash[i];\n\n\t\t\tresult.push(imod8(item >> 24));\n\t\t\tresult.push(imod8(item >> 16));\n\t\t\tresult.push(imod8(item >>  8));\n\t\t\tresult.push(imod8(item >>  0));\n\t\t}\n\t\n\t\treturn result;\n\t}\n\n\t/**\n\t * Calculates sha2-512 (64bytes) hash of a list of uint8 numbers.\n\t * Result is also a list of uint8 number.\n\t * @example \n\t * bytesToHex(Crypto.sha2_512([0x61, 0x62, 0x63])) => \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\"\n\t * @example \n\t * bytesToHex(Crypto.sha2_512([])) => \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\"\n     * @package\n\t * @param {number[]} bytes - list of uint8 numbers\n\t * @returns {number[]} - list of uint8 numbers\n\t */\n\tstatic sha2_512(bytes) {\n\t\t/**\n\t\t * Pad a bytearray so its size is a multiple of 128 (1024 bits).\n\t\t * Internal method.\n\t\t * @param {number[]} src - list of uint8 numbers\n\t\t * @returns {number[]}\n\t\t */\n\t\tfunction pad(src) {\n\t\t\tconst nBits = src.length*8;\n\n\t\t\tconst dst = src.slice();\n\n\t\t\tdst.push(0x80);\n\n\t\t\tlet nZeroes = (128 - dst.length%128) - 8;\n\t\t\tif (nZeroes < 0) {\n\t\t\t\tnZeroes += 128;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < nZeroes; i++) {\n\t\t\t\tdst.push(0);\n\t\t\t}\n\n\t\t\t// assume nBits fits in 32 bits\n\n\t\t\tdst.push(0);\n\t\t\tdst.push(0);\n\t\t\tdst.push(0);\n\t\t\tdst.push(0);\n\t\t\tdst.push(imod8(nBits >> 24));\n\t\t\tdst.push(imod8(nBits >> 16));\n\t\t\tdst.push(imod8(nBits >> 8));\n\t\t\tdst.push(imod8(nBits >> 0));\n\t\t\t\n\t\t\treturn dst;\n\t\t}\n\n\t\t/**\n\t\t * @type {UInt64[]} - 80 uint64 numbers\n\t\t */\n\t\tconst k = [\n\t\t\tnew UInt64(0x428a2f98, 0xd728ae22), new UInt64(0x71374491, 0x23ef65cd), \n\t\t\tnew UInt64(0xb5c0fbcf, 0xec4d3b2f), new UInt64(0xe9b5dba5, 0x8189dbbc),\n\t\t\tnew UInt64(0x3956c25b, 0xf348b538), new UInt64(0x59f111f1, 0xb605d019), \n\t\t\tnew UInt64(0x923f82a4, 0xaf194f9b), new UInt64(0xab1c5ed5, 0xda6d8118),\n\t\t\tnew UInt64(0xd807aa98, 0xa3030242), new UInt64(0x12835b01, 0x45706fbe), \n\t\t\tnew UInt64(0x243185be, 0x4ee4b28c), new UInt64(0x550c7dc3, 0xd5ffb4e2),\n\t\t\tnew UInt64(0x72be5d74, 0xf27b896f), new UInt64(0x80deb1fe, 0x3b1696b1), \n\t\t\tnew UInt64(0x9bdc06a7, 0x25c71235), new UInt64(0xc19bf174, 0xcf692694),\n\t\t\tnew UInt64(0xe49b69c1, 0x9ef14ad2), new UInt64(0xefbe4786, 0x384f25e3), \n\t\t\tnew UInt64(0x0fc19dc6, 0x8b8cd5b5), new UInt64(0x240ca1cc, 0x77ac9c65),\n\t\t\tnew UInt64(0x2de92c6f, 0x592b0275), new UInt64(0x4a7484aa, 0x6ea6e483), \n\t\t\tnew UInt64(0x5cb0a9dc, 0xbd41fbd4), new UInt64(0x76f988da, 0x831153b5),\n\t\t\tnew UInt64(0x983e5152, 0xee66dfab), new UInt64(0xa831c66d, 0x2db43210), \n\t\t\tnew UInt64(0xb00327c8, 0x98fb213f), new UInt64(0xbf597fc7, 0xbeef0ee4),\n\t\t\tnew UInt64(0xc6e00bf3, 0x3da88fc2), new UInt64(0xd5a79147, 0x930aa725), \n\t\t\tnew UInt64(0x06ca6351, 0xe003826f), new UInt64(0x14292967, 0x0a0e6e70),\n\t\t\tnew UInt64(0x27b70a85, 0x46d22ffc), new UInt64(0x2e1b2138, 0x5c26c926), \n\t\t\tnew UInt64(0x4d2c6dfc, 0x5ac42aed), new UInt64(0x53380d13, 0x9d95b3df),\n\t\t\tnew UInt64(0x650a7354, 0x8baf63de), new UInt64(0x766a0abb, 0x3c77b2a8), \n\t\t\tnew UInt64(0x81c2c92e, 0x47edaee6), new UInt64(0x92722c85, 0x1482353b),\n\t\t\tnew UInt64(0xa2bfe8a1, 0x4cf10364), new UInt64(0xa81a664b, 0xbc423001), \n\t\t\tnew UInt64(0xc24b8b70, 0xd0f89791), new UInt64(0xc76c51a3, 0x0654be30),\n\t\t\tnew UInt64(0xd192e819, 0xd6ef5218), new UInt64(0xd6990624, 0x5565a910), \n\t\t\tnew UInt64(0xf40e3585, 0x5771202a), new UInt64(0x106aa070, 0x32bbd1b8),\n\t\t\tnew UInt64(0x19a4c116, 0xb8d2d0c8), new UInt64(0x1e376c08, 0x5141ab53), \n\t\t\tnew UInt64(0x2748774c, 0xdf8eeb99), new UInt64(0x34b0bcb5, 0xe19b48a8),\n\t\t\tnew UInt64(0x391c0cb3, 0xc5c95a63), new UInt64(0x4ed8aa4a, 0xe3418acb), \n\t\t\tnew UInt64(0x5b9cca4f, 0x7763e373), new UInt64(0x682e6ff3, 0xd6b2b8a3),\n\t\t\tnew UInt64(0x748f82ee, 0x5defb2fc), new UInt64(0x78a5636f, 0x43172f60), \n\t\t\tnew UInt64(0x84c87814, 0xa1f0ab72), new UInt64(0x8cc70208, 0x1a6439ec),\n\t\t\tnew UInt64(0x90befffa, 0x23631e28), new UInt64(0xa4506ceb, 0xde82bde9), \n\t\t\tnew UInt64(0xbef9a3f7, 0xb2c67915), new UInt64(0xc67178f2, 0xe372532b),\n\t\t\tnew UInt64(0xca273ece, 0xea26619c), new UInt64(0xd186b8c7, 0x21c0c207), \n\t\t\tnew UInt64(0xeada7dd6, 0xcde0eb1e), new UInt64(0xf57d4f7f, 0xee6ed178),\n\t\t\tnew UInt64(0x06f067aa, 0x72176fba), new UInt64(0x0a637dc5, 0xa2c898a6), \n\t\t\tnew UInt64(0x113f9804, 0xbef90dae), new UInt64(0x1b710b35, 0x131c471b),\n\t\t\tnew UInt64(0x28db77f5, 0x23047d84), new UInt64(0x32caab7b, 0x40c72493), \n\t\t\tnew UInt64(0x3c9ebe0a, 0x15c9bebc), new UInt64(0x431d67c4, 0x9c100d4c),\n\t\t\tnew UInt64(0x4cc5d4be, 0xcb3e42b6), new UInt64(0x597f299c, 0xfc657e2a), \n\t\t\tnew UInt64(0x5fcb6fab, 0x3ad6faec), new UInt64(0x6c44198c, 0x4a475817),\n\t\t];\n\n\t\t/**\n\t\t * Initial hash (updated during compression phase)\n\t\t * @type {UInt64[]} - 8 uint64 numbers\n\t\t */\n\t\tconst hash = [\n\t\t\tnew UInt64(0x6a09e667, 0xf3bcc908),\n\t\t\tnew UInt64(0xbb67ae85, 0x84caa73b),\n\t\t\tnew UInt64(0x3c6ef372, 0xfe94f82b),\n\t\t\tnew UInt64(0xa54ff53a, 0x5f1d36f1),\n\t\t\tnew UInt64(0x510e527f, 0xade682d1),\n\t\t\tnew UInt64(0x9b05688c, 0x2b3e6c1f),\n\t\t\tnew UInt64(0x1f83d9ab, 0xfb41bd6b),\n\t\t\tnew UInt64(0x5be0cd19, 0x137e2179),\n\t\t];\n\t\n\t\t/**\n\t\t * @param {UInt64} x\n\t\t * @returns {UInt64} \n\t\t */\n\t\tfunction sigma0(x) {\n\t\t\treturn x.rotr(1).xor(x.rotr(8)).xor(x.shiftr(7));\n\t\t}\n\n\t\t/**\n\t\t * @param {UInt64} x\n\t\t * @returns {UInt64}\n\t\t */\n\t\tfunction sigma1(x) {\n\t\t\treturn x.rotr(19).xor(x.rotr(61)).xor(x.shiftr(6));\n\t\t}\n\n\t\tbytes = pad(bytes);\n\n\t\t// break message in successive 64 byte chunks\n\t\tfor (let chunkStart = 0; chunkStart < bytes.length; chunkStart += 128) {\n\t\t\tconst chunk = bytes.slice(chunkStart, chunkStart + 128);\n\n\t\t\tconst w = (new Array(80)).fill(UInt64.zero()); // array of 32 bit numbers!\n\n\t\t\t// copy chunk into first 16 hi/lo positions of w (i.e. into first 32 uint32 positions)\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tw[i] = UInt64.fromBytes(chunk.slice(i*8, i*8 + 8), false);\n\t\t\t}\n\n\t\t\t// extends the first 16 positions into the remaining 80 positions\n\t\t\tfor (let i = 16; i < 80; i++) {\n\t\t\t\tw[i] = sigma1(w[i-2]).add(w[i-7]).add(sigma0(w[i-15])).add(w[i-16]);\n\t\t\t}\n\n\t\t\t// intialize working variables to current hash value\n\t\t\tlet a = hash[0];\n\t\t\tlet b = hash[1];\n\t\t\tlet c = hash[2];\n\t\t\tlet d = hash[3];\n\t\t\tlet e = hash[4];\n\t\t\tlet f = hash[5];\n\t\t\tlet g = hash[6];\n\t\t\tlet h = hash[7];\n\n\t\t\t// compression function main loop\n\t\t\tfor (let i = 0; i < 80; i++) {\n\t\t\t\tconst S1 = e.rotr(14).xor(e.rotr(18)).xor(e.rotr(41));\n\t\t\t\tconst ch = e.and(f).xor(e.not().and(g));\n\t\t\t\tconst temp1 = h.add(S1).add(ch).add(k[i]).add(w[i]);\n\t\t\t\tconst S0 = a.rotr(28).xor(a.rotr(34)).xor(a.rotr(39));\n\t\t\t\tconst maj = a.and(b).xor(a.and(c)).xor(b.and(c));\n\t\t\t\tconst temp2 = S0.add(maj);\n\n\t\t\t\th = g;\n\t\t\t\tg = f;\n\t\t\t\tf = e;\n\t\t\t\te = d.add(temp1);\n\t\t\t\td = c;\n\t\t\t\tc = b;\n\t\t\t\tb = a;\n\t\t\t\ta = temp1.add(temp2);\n\t\t\t}\n\n\t\t\t// update the hash\n\t\t\thash[0] = hash[0].add(a);\n\t\t\thash[1] = hash[1].add(b);\n\t\t\thash[2] = hash[2].add(c);\n\t\t\thash[3] = hash[3].add(d);\n\t\t\thash[4] = hash[4].add(e);\n\t\t\thash[5] = hash[5].add(f);\n\t\t\thash[6] = hash[6].add(g);\n\t\t\thash[7] = hash[7].add(h);\n\t\t}\n\n\t\t// produce the final digest of uint8 numbers\n\t\tlet result = [];\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tconst item = hash[i];\n\n\t\t\tresult = result.concat(item.toBytes(false));\n\t\t}\n\t\n\t\treturn result;\n\t}\n\n\t/**\n\t * Calculates sha3-256 (32bytes) hash of a list of uint8 numbers.\n\t * Result is also a list of uint8 number.\n\t * Sha3 only bit-wise operations, so 64-bit operations can easily be replicated using 2 32-bit operations instead\n\t * @example\n\t * bytesToHex(Crypto.sha3(textToBytes(\"abc\"))) => \"3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532\"\n\t * @example\n\t * bytesToHex(Crypto.sha3((new Array(136)).fill(1))) => \"b36dc2167c4d9dda1a58b87046c8d76a6359afe3612c4de8a38857e09117b2db\"\n\t * @example\n\t * bytesToHex(Crypto.sha3((new Array(135)).fill(2))) => \"5bdf5d815d29a9d7161c66520efc17c2edd7898f2b99a029e8d2e4ff153407f4\"\n\t * @example\n\t * bytesToHex(Crypto.sha3((new Array(134)).fill(3))) => \"8e6575663dfb75a88f94a32c5b363c410278b65020734560d968aadd6896a621\"\n\t * @example\n\t * bytesToHex(Crypto.sha3((new Array(137)).fill(4))) => \"f10b39c3e455006aa42120b9751faa0f35c821211c9d086beb28bf3c4134c6c6\"\n     * @package\n\t * @param {number[]} bytes - list of uint8 numbers\n\t * @returns {number[]} - list of uint8 numbers\n\t */\n\tstatic sha3(bytes) {\n\t\t/**\n\t\t * @type {number} - state width (1600 bits, )\n\t\t */\n\t\tconst WIDTH = 200;\n\n\t\t/**\n\t\t * @type {number} - rate (1088 bits, 136 bytes)\n\t\t */\n\t\tconst RATE = 136;\n\n\t\t/**\n\t\t * @type {number} - capacity\n\t\t */\n\t\tconst CAP = WIDTH - RATE;\n\n\t\t/**\n\t\t * Apply 1000...1 padding until size is multiple of r.\n\t\t * If already multiple of r then add a whole block of padding.\n\t\t * @param {number[]} src - list of uint8 numbers\n\t\t * @returns {number[]} - list of uint8 numbers\n\t\t */\n\t\tfunction pad(src) {\n\t\t\tconst dst = src.slice();\n\n\t\t\t/** @type {number} */\n\t\t\tlet nZeroes = RATE - 2 - (dst.length%RATE);\n\t\t\tif (nZeroes < -1) {\n\t\t\t\tnZeroes += RATE - 2;\n\t\t\t}\n\n\t\t\tif (nZeroes == -1) {\n\t\t\t\tdst.push(0x86);\n\t\t\t} else {\n\t\t\t\tdst.push(0x06);\n\n\t\t\t\tfor (let i = 0; i < nZeroes; i++) {\n\t\t\t\t\tdst.push(0);\n\t\t\t\t}\n\n\t\t\t\tdst.push(0x80);\n\t\t\t}\n\n\t\t\tassert(dst.length%RATE == 0);\n\t\t\t\n\t\t\treturn dst;\n\t\t}\n\n\t\t/**\n\t\t * 24 numbers used in the sha3 permute function\n\t\t * @type {number[]}\n\t\t */\n\t\tconst OFFSETS = [6, 12, 18, 24, 3, 9, 10, 16, 22, 1, 7, 13, 19, 20, 4, 5, 11, 17, 23, 2, 8, 14, 15, 21];\n\n\t\t/**\n\t\t * 24 numbers used in the sha3 permute function\n\t\t * @type {number[]}\n\t\t */\n\t\tconst SHIFTS = [-12, -11, 21, 14, 28, 20, 3, -13, -29, 1, 6, 25, 8, 18, 27, -4, 10, 15, -24, -30, -23, -7, -9, 2];\n\n\t\t/**\n\t\t * Round constants used in the sha3 permute function\n\t\t * @type {UInt64[]} \n\t\t */\n\t\tconst RC = [\n\t\t\tnew UInt64(0x00000000, 0x00000001) , \n\t\t\tnew UInt64(0x00000000, 0x00008082) , \n\t\t\tnew UInt64(0x80000000, 0x0000808a) ,\n\t\t\tnew UInt64(0x80000000, 0x80008000) ,\n\t\t\tnew UInt64(0x00000000, 0x0000808b) ,\n\t\t\tnew UInt64(0x00000000, 0x80000001) ,\n\t\t\tnew UInt64(0x80000000, 0x80008081) ,\n\t\t\tnew UInt64(0x80000000, 0x00008009) ,\n\t\t\tnew UInt64(0x00000000, 0x0000008a) ,\n\t\t\tnew UInt64(0x00000000, 0x00000088) ,\n\t\t\tnew UInt64(0x00000000, 0x80008009) ,\n\t\t\tnew UInt64(0x00000000, 0x8000000a) ,\n\t\t\tnew UInt64(0x00000000, 0x8000808b) ,\n\t\t\tnew UInt64(0x80000000, 0x0000008b) ,\n\t\t\tnew UInt64(0x80000000, 0x00008089) ,\n\t\t\tnew UInt64(0x80000000, 0x00008003) ,\n\t\t\tnew UInt64(0x80000000, 0x00008002) ,\n\t\t\tnew UInt64(0x80000000, 0x00000080) ,\n\t\t\tnew UInt64(0x00000000, 0x0000800a) ,\n\t\t\tnew UInt64(0x80000000, 0x8000000a) ,\n\t\t\tnew UInt64(0x80000000, 0x80008081) ,\n\t\t\tnew UInt64(0x80000000, 0x00008080) ,\n\t\t\tnew UInt64(0x00000000, 0x80000001) ,\n\t\t\tnew UInt64(0x80000000, 0x80008008) ,\n\t\t];\n\t\t\n\t\t/**\n\t\t * @param {UInt64[]} s \n\t\t */\n\t\tfunction permute(s) {\t\n\t\t\t/**\n\t\t\t * @type {UInt64[]}\n\t\t\t */\t\t\n\t\t\tconst c = new Array(5);\n\n\t\t\t/**\n\t\t\t * @type {UInt64[]}\n\t\t\t */\n\t\t\tconst b = new Array(25);\n\t\t\t\n\t\t\tfor (let round = 0; round < 24; round++) {\n\t\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\t\tc[i] = s[i].xor(s[i+5]).xor(s[i+10]).xor(s[i+15]).xor(s[i+20]);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\t\tconst i1 = (i+1)%5;\n\t\t\t\t\tconst i2 = (i+4)%5;\n\n\t\t\t\t\tconst tmp = c[i2].xor(c[i1].rotr(63));\n\n\t\t\t\t\tfor (let j = 0; j < 5; j++) {\n\t\t\t\t\t\ts[i+5*j] = s[i+5*j].xor(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\tb[0] = s[0];\n\n\t\t\t\tfor(let i = 1; i < 25; i++) {\n\t\t\t\t\tconst offset = OFFSETS[i-1];\n\n\t\t\t\t\tconst left = Math.abs(SHIFTS[i-1]);\n\t\t\t\t\tconst right = 32 - left;\n\n\t\t\t\t\tif (SHIFTS[i-1] < 0) {\n\t\t\t\t\t\tb[i] = s[offset].rotr(right);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb[i] = s[offset].rotr(right + 32);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\t\tfor (let j = 0; j < 5; j++) {\n\t\t\t\t\t\ts[i*5+j] = b[i*5+j].xor(b[i*5 + (j+1)%5].not().and(b[i*5 + (j+2)%5]))\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ts[0] = s[0].xor(RC[round]);\n\t\t\t}\n\t\t}\n\n\t\tbytes = pad(bytes);\n\n\t\t// initialize the state\n\t\t/**\n\t\t * @type {UInt64[]}\n\t\t */\n\t\tconst state = (new Array(WIDTH/8)).fill(UInt64.zero());\n\n\t\tfor (let chunkStart = 0; chunkStart < bytes.length; chunkStart += RATE) {\n\t\t\t// extend the chunk to become length WIDTH\n\t\t\tconst chunk = bytes.slice(chunkStart, chunkStart + RATE).concat((new Array(CAP)).fill(0));\n\n\t\t\t// element-wise xor with 'state'\n\t\t\tfor (let i = 0; i < WIDTH; i += 8) {\n\t\t\t\tstate[i/8] = state[i/8].xor(UInt64.fromBytes(chunk.slice(i, i+8)));\n\n\t\t\t\t// beware: a uint32 is stored as little endian, but a pair of uint32s that form a uin64 are stored in big endian format!\n\t\t\t}\n\n\t\t\t// apply block permutations\n\t\t\tpermute(state);\n\t\t}\n\n\t\t/** @type {number[]} */\n\t\tlet hash = [];\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\thash = hash.concat(state[i].toBytes());\n\t\t}\n\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Calculates blake2b hash of a list of uint8 numbers (variable digest size).\n\t * Result is also a list of uint8 number.\n\t * Blake2b is a 64bit algorithm, so we need to be careful when replicating 64-bit operations with 2 32-bit numbers (low-word overflow must spill into high-word, and shifts must go over low/high boundary)\n\t * @example                                        \n\t * bytesToHex(Crypto.blake2b([0, 1])) => \"01cf79da4945c370c68b265ef70641aaa65eaa8f5953e3900d97724c2c5aa095\"\n\t * @example\n\t * bytesToHex(Crypto.blake2b(textToBytes(\"abc\"), 64)) => \"ba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d17d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923\"\n     * @package\n\t * @param {number[]} bytes \n\t * @param {number} digestSize - at most 64\n\t * @returns {number[]}\n\t */\n\tstatic blake2b(bytes, digestSize = BLAKE2B_DIGEST_SIZE) {\n\t\t/**\n\t\t * 128 bytes (16*8 byte words)\n\t\t * @type {number}\n\t\t */\n\t\tconst WIDTH = 128;\n\n\t\t/**\n\t\t * Initialization vector\n\t\t */\n\t\tconst IV = [\n\t\t\tnew UInt64(0x6a09e667, 0xf3bcc908), \n\t\t\tnew UInt64(0xbb67ae85, 0x84caa73b),\n\t\t\tnew UInt64(0x3c6ef372, 0xfe94f82b), \n\t\t\tnew UInt64(0xa54ff53a, 0x5f1d36f1),\n\t\t\tnew UInt64(0x510e527f, 0xade682d1),\n\t\t\tnew UInt64(0x9b05688c, 0x2b3e6c1f),\n\t\t\tnew UInt64(0x1f83d9ab, 0xfb41bd6b), \n\t\t\tnew UInt64(0x5be0cd19, 0x137e2179), \n\t\t];\n\n\t\tconst SIGMA = [\n\t\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n\t\t\t[14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n\t\t\t[11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n\t\t\t[7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n\t\t\t[9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n\t\t\t[2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9],\n\t\t\t[12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11],\n\t\t\t[13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10],\n\t\t\t[6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5],\n\t\t\t[10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0],\n\t\t];\n\n\t\t/**\n\t\t * @param {number[]} src - list of uint8 bytes\n\t\t * @returns {number[]} - list of uint8 bytes\n\t\t */\n\t\tfunction pad(src) {\n\t\t\tconst dst = src.slice();\n\n\t\t\tconst nZeroes = dst.length == 0 ? WIDTH : (WIDTH - dst.length%WIDTH)%WIDTH;\n\n\t\t\t// just padding with zeroes, the actual message length is used during compression stage of final block in order to uniquely hash messages of different lengths\n\t\t\tfor (let i = 0; i < nZeroes; i++) {\n\t\t\t\tdst.push(0);\n\t\t\t}\n\t\t\t\n\t\t\treturn dst;\n\t\t}\n\n\t\t/**\n\t\t * @param {UInt64[]} v\n\t\t * @param {UInt64[]} chunk\n\t\t * @param {number} a - index\n\t\t * @param {number} b - index\n\t\t * @param {number} c - index\n\t\t * @param {number} d - index\n\t\t * @param {number} i - index in chunk for low word 1\n\t\t * @param {number} j - index in chunk for low word 2\n\t\t */\n\t\tfunction mix(v, chunk, a, b, c, d, i, j) {\n\t\t\tconst x = chunk[i];\n\t\t\tconst y = chunk[j];\n\n\t\t\tv[a] = v[a].add(v[b]).add(x);\n\t\t\tv[d] = v[d].xor(v[a]).rotr(32);\n\t\t\tv[c] = v[c].add(v[d]);\n\t\t\tv[b] = v[b].xor(v[c]).rotr(24);\n\t\t\tv[a] = v[a].add(v[b]).add(y);\n\t\t\tv[d] = v[d].xor(v[a]).rotr(16);\n\t\t\tv[c] = v[c].add(v[d]);\n\t\t\tv[b] = v[b].xor(v[c]).rotr(63);\n\t\t}\n\n\t\t/**\n\t\t * @param {UInt64[]} h - state vector\n\t\t * @param {UInt64[]} chunk\n\t\t * @param {number} t - chunkEnd (expected to fit in uint32)\n\t\t * @param {boolean} last\n\t\t */\n\t\tfunction compress(h, chunk, t, last) {\n\t\t\t// work vectors\n\t\t\tconst v = h.slice().concat(IV.slice());\n\n\t\t\tv[12] = v[12].xor(new UInt64(0, imod32(t))); // v[12].high unmodified\n\t\t\t// v[13] unmodified\n\n\t\t\tif (last) {\n\t\t\t\tv[14] = v[14].xor(new UInt64(0xffffffff, 0xffffffff));\n\t\t\t}\n\n\t\t\tfor (let round = 0; round < 12; round++) {\n\t\t\t\tconst s = SIGMA[round%10];\n\n\t\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\t\tmix(v, chunk, i, i+4, i+8, i+12, s[i*2], s[i*2+1]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\t\tmix(v, chunk, i, (i+1)%4 + 4, (i+2)%4 + 8, (i+3)%4 + 12, s[8+i*2], s[8 + i*2 + 1]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\th[i] = h[i].xor(v[i].xor(v[i+8]));\n\t\t\t}\t\t\n\t\t}\n \n\t\tconst nBytes = bytes.length;\n\n\t\tbytes = pad(bytes);\n\n\t\t// init hash vector\n\t\tconst h = IV.slice();\n\t\t\n\n\t\t// setup the param block\n\t\tconst paramBlock = new Uint8Array(64);\n\t\tparamBlock[0] = digestSize; // n output  bytes\n\t\tparamBlock[1] = 0; // key-length (always zero in our case) \n\t\tparamBlock[2] = 1; // fanout\n\t\tparamBlock[3] = 1; // depth\n\n\t\t//mix in the parameter block\n\t\tconst paramBlockView = new DataView(paramBlock.buffer);\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\th[i] = h[i].xor(new UInt64(\n\t\t\t\tparamBlockView.getUint32(i*8+4, true),\n\t\t\t\tparamBlockView.getUint32(i*8, true),\n\t\t\t));\n\t\t}\n\t\t\n\t\t// loop all chunks\n\t\tfor (let chunkStart = 0; chunkStart < bytes.length; chunkStart += WIDTH) {\n\t\t\tconst chunkEnd = chunkStart + WIDTH; // exclusive\n\t\t\tconst chunk = bytes.slice(chunkStart, chunkStart + WIDTH);\n\n\t\t\tconst chunk64 = new Array(WIDTH/8);\n\t\t\tfor (let i = 0; i < WIDTH; i += 8) {\n\t\t\t\tchunk64[i/8] = UInt64.fromBytes(chunk.slice(i, i+8));\n\t\t\t}\n\t\t\t\n\t\t\tif (chunkStart == bytes.length - WIDTH) {\n\t\t\t\t// last block\n\t\t\t\tcompress(h, chunk64, nBytes, true);\n\t\t\t} else {\n\t\t\t\tcompress(h, chunk64, chunkEnd, false);\n\t\t\t}\n\t\t}\n\n\t\t// extract lowest BLAKE2B_DIGEST_SIZE bytes from h\n\n\t\t/** @type {number[]} */\n\t\tlet hash = [];\n\t\tfor (let i = 0; i < digestSize/8; i++) {\n\t\t\thash = hash.concat(h[i].toBytes());\n\t\t}\n\n\t\treturn hash.slice(0, digestSize);\n\t}\n\n\t/**\n\t * Crypto.Ed25519 exports the following functions:\n\t *  * Crypto.Ed25519.derivePublicKey(privateKey)\n\t *  * Crypto.Ed25519.sign(message, privateKey)\n\t *  * Crypto.Ed25519.verify(message, signature, publicKey)\n\t * \n\t * This is implementation is slow (~0.5s per verification), but should be good enough for simple client-side usage\n\t * \n\t * Ported from: https://ed25519.cr.yp.to/python/ed25519.py\n     * @package\n\t */\n\tstatic get Ed25519() {\n\t\tconst Q = 57896044618658097711785492504343953926634992332820282019728792003956564819949n; // ipowi(255n) - 19n\n\t\tconst Q38 = 7237005577332262213973186563042994240829374041602535252466099000494570602494n; // (Q + 3n)/8n\n\t\tconst CURVE_ORDER = 7237005577332262213973186563042994240857116359379907606001950938285454250989n; // ipow2(252n) + 27742317777372353535851937790883648493n;\n\t\tconst D = -4513249062541557337682894930092624173785641285191125241628941591882900924598840740n; // -121665n * invert(121666n);\n\t\tconst I = 19681161376707505956807079304988542015446066515923890162744021073123829784752n; // expMod(2n, (Q - 1n)/4n, Q);\n\t\t\n\t\t/**\n\t\t * @type {[bigint, bigint]}\n\t\t */\n\t\tconst BASE = [\n\t\t\t15112221349535400772501151409588531511454012693041857206046113283949847762202n, // recoverX(B[1]) % Q\n\t\t\t46316835694926478169428394003475163141307993866256225615783033603165251855960n, // (4n*invert(5n)) % Q\n\t\t];\n\n\t\t/**\n\t\t * @param {bigint} b \n\t\t * @param {bigint} e \n\t\t * @param {bigint} m \n\t\t * @returns {bigint}\n\t\t */\n\t\tfunction expMod(b, e, m) {\n\t\t\tif (e == 0n) {\n\t\t\t\treturn 1n;\n\t\t\t} else {\n\t\t\t\tlet t = expMod(b, e/2n, m);\n\t\t\t\tt = (t*t) % m;\n\n\t\t\t\tif ((e % 2n) != 0n) {\n\t\t\t\t\tt = posMod(t*b, m)\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {bigint} n \n\t\t * @returns {bigint}\n\t\t */\n\t\tfunction invert(n) {\n\t\t\tlet a = posMod(n, Q);\n\t\t\tlet b = Q;\n\n\t\t\tlet x = 0n;\n\t\t\tlet y = 1n;\n\t\t\tlet u = 1n;\n\t\t\tlet v = 0n;\n\n\t\t\twhile (a !== 0n) {\n\t\t\t\tconst q = b / a;\n\t\t\t\tconst r = b % a;\n\t\t\t\tconst m = x - u*q;\n\t\t\t\tconst n = y - v*q;\n\t\t\t\tb = a;\n\t\t\t\ta = r;\n\t\t\t\tx = u;\n\t\t\t\ty = v;\n\t\t\t\tu = m;\n\t\t\t\tv = n;\n\t\t\t}\n\n\t\t\treturn posMod(x, Q)\n\t\t}\n\n\t\t/**\n\t\t * @param {bigint} y \n\t\t * @returns {bigint}\n\t\t */\n\t\tfunction recoverX(y) {\n\t\t\tconst yy = y*y;\n\t\t\tconst xx = (yy - 1n) * invert(D*yy + 1n);\n\t\t\tlet x = expMod(xx, Q38, Q);\n\n\t\t\tif (((x*x - xx) % Q) != 0n) {\n\t\t\t\tx = (x*I) % Q;\n\t\t\t}\n\n\t\t\tif ((x%2n) != 0n) {\n\t\t\t\tx = Q - x;\n\t\t\t}\n\n\t\t\treturn x;\n\t\t}\t\t\n\n\t\t/**\n\t\t * Curve point 'addition'\n\t\t * Note: this is probably the bottleneck of this Ed25519 implementation\n\t\t * @param {[bigint, bigint]} a \n\t\t * @param {[bigint, bigint]} b \n\t\t * @returns {[bigint, bigint]}\n\t\t */\n\t\tfunction edwards(a, b) {\n\t\t\tconst x1 = a[0];\n\t\t\tconst y1 = a[1];\n\t\t\tconst x2 = b[0];\n\t\t\tconst y2 = b[1];\n\t\t\tconst dxxyy = D*x1*x2*y1*y2;\n\t\t\tconst x3 = (x1*y2+x2*y1) * invert(1n+dxxyy);\n\t\t\tconst y3 = (y1*y2+x1*x2) * invert(1n-dxxyy);\n\t\t\treturn [posMod(x3, Q), posMod(y3, Q)];\n\t\t}\n\n\t\t/**\n\t\t * @param {[bigint, bigint]} point \n\t\t * @param {bigint} n \n\t\t * @returns {[bigint, bigint]}\n\t\t */\n\t\tfunction scalarMul(point, n) {\n\t\t\tif (n == 0n) {\n\t\t\t\treturn [0n, 1n];\n\t\t\t} else {\n\t\t\t\tlet sum = scalarMul(point, n/2n);\n\t\t\t\tsum = edwards(sum, sum);\n\t\t\t\tif ((n % 2n) != 0n) {\n\t\t\t\t\tsum = edwards(sum, point);\n\t\t\t\t}\n\n\t\t\t\treturn sum;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Curve point 'multiplication'\n\t\t * @param {bigint} y \n\t\t * @returns {number[]}\n\t\t */\n\t\tfunction encodeInt(y) {\n\t\t\tconst bytes = bigIntToBytes(y).reverse();\n\t\t\t\n\t\t\twhile (bytes.length < 32) {\n\t\t\t\tbytes.push(0);\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t}\n\n\t\t/**\n\t\t * @param {number[]} s \n\t\t * @returns {bigint}\n\t\t */\n\t\tfunction decodeInt(s) {\n\t\t\treturn bytesToBigInt(s.reverse());\n\t\t}\n\n\t\t/**\n\t\t * @param {[bigint, bigint]} point\n\t\t * @returns {number[]}\n\t\t */\n\t\tfunction encodePoint(point) {\n\t\t\tconst [x, y] = point;\n\n\t\t\tconst bytes = encodeInt(y);\n\n\t\t\t// last bit is determined by x\n\n\t\t\tbytes[31] = (bytes[31] & 0b011111111) | (Number(x & 1n) * 0b10000000);\n\n\t\t\treturn bytes;\n\t\t}\n\n\t\t/**\n\t\t * @param {number[]} bytes \n\t\t * @param {number} i - bit index\n\t\t * @returns {number} - 0 or 1\n\t\t */\n\t\tfunction getBit(bytes, i) {\n\t\t\treturn (bytes[Math.floor(i/8)] >> i%8) & 1\n\t\t}\n\n\t\t/**\n\t\t * @param {[bigint, bigint]} point\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction isOnCurve(point) {\n\t\t\tconst x = point[0];\n\t\t\tconst y = point[1];\n\t\t\tconst xx = x*x;\n\t\t\tconst yy = y*y;\n\t\t\treturn (-xx + yy - 1n - D*xx*yy) % Q == 0n;\n\t\t}\n\n\t\t/**\n\t\t * @param {number[]} s \n\t\t */\n\t\tfunction decodePoint(s) {\n\t\t\tassert(s.length == 32);\n\n\t\t\tconst bytes = s.slice();\n\t\t\tbytes[31] = bytes[31] & 0b01111111;\n\n\t\t\tconst y = decodeInt(bytes);\n\n\t\t\tlet x = recoverX(y);\n\t\t\tif (Number(x & 1n) != getBit(s, 255)) {\n\t\t\t\tx = Q - x;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {[bigint, bigint]}\n\t\t\t */\n\t\t\tconst point = [x, y];\n\n\t\t\tif (!isOnCurve(point)) {\n\t\t\t\tthrow new Error(\"point isn't on curve\");\n\t\t\t}\n\n\t\t\treturn point;\n\t\t}\n\n\t\t/**\n\t\t * Couldn't think of a proper name for this function\n\t\t * @param {number[]} h \n\t\t * @returns {bigint}\n\t\t */\n\t\tfunction calca(h) {\n\t\t\tconst a = 28948022309329048855892746252171976963317496166410141009864396001978282409984n; // ipow2(253)\n\n\t\t\tconst bytes = h.slice(0, 32);\n\t\t\tbytes[0] = bytes[0] & 0b11111000;\n\t\t\tbytes[31] = bytes[31] & 0b00111111;\n\n\t\t\tconst x = bytesToBigInt(bytes.reverse());\n\t\t\treturn a + x;\n\t\t}\n\n\t\t/**\n\t\t * @param {number[]} m \n\t\t * @returns {bigint}\n\t\t */\n\t\tfunction ihash(m) {\n\t\t\tconst h = Crypto.sha2_512(m);\n\n\t\t\treturn decodeInt(h);\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * @param {number[]} privateKey \n\t\t\t * @returns {number[]}\n\t\t\t */\n\t\t\tderivePublicKey: function(privateKey) {\n\t\t\t\tconst privateKeyHash = Crypto.sha2_512(privateKey);\n\t\t\t\tconst a = calca(privateKeyHash);\n\t\t\t\tconst A = scalarMul(BASE, a);\n\n\t\t\t\treturn encodePoint(A);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {number[]} message \n\t\t\t * @param {number[]} privateKey \n\t\t\t * @returns {number[]}\n\t\t\t */\n\t\t\tsign: function(message, privateKey) {\n\t\t\t\tconst privateKeyHash = Crypto.sha2_512(privateKey);\n\t\t\t\tconst a = calca(privateKeyHash);\n\n\t\t\t\t// for convenience calculate publicKey here:\n\t\t\t\tconst publicKey = encodePoint(scalarMul(BASE, a));\n\n\t\t\t\tconst r = ihash(privateKeyHash.slice(32, 64).concat(message));\n\t\t\t\tconst R = scalarMul(BASE, r);\n\t\t\t\tconst S = posMod(r + ihash(encodePoint(R).concat(publicKey).concat(message))*a, CURVE_ORDER);\n\n\t\t\t\treturn encodePoint(R).concat(encodeInt(S));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {number[]} signature \n\t\t\t * @param {number[]} message \n\t\t\t * @param {number[]} publicKey \n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tverify: function(signature, message, publicKey) {\n\t\t\t\tif (signature.length != 64) {\n\t\t\t\t\tthrow new Error(`unexpected signature length ${signature.length}`);\n\t\t\t\t}\n\t\n\t\t\t\tif (publicKey.length != 32) {\n\t\t\t\t\tthrow new Error(`unexpected publickey length ${publicKey.length}`);\n\t\t\t\t}\n\n\t\t\t\tconst R = decodePoint(signature.slice(0, 32));\n\t\t\t\tconst A = decodePoint(publicKey);\n\t\t\t\tconst S = decodeInt(signature.slice(32, 64));\n\t\t\t\tconst h = ihash(signature.slice(0, 32).concat(publicKey).concat(message));\n\n\t\t\t\tconst left = scalarMul(BASE, S);\n\t\t\t\tconst right = edwards(R, scalarMul(A, h));\n\n\t\t\t\treturn (left[0] == right[0]) && (left[1] == right[1]);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//////////////////////////////////\n// Section 5: Cbor encoder/decoder\n//////////////////////////////////\n\n/**\n * @typedef {(i: number, bytes: number[]) => void} Decoder\n */\n\n/**\n * Base class of any Cbor serializable data class\n * Also contains helper methods for (de)serializing data to/from Cbor\n */\nclass CborData {\n\tconstructor() {\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {number} m - major type\n\t * @param {bigint} n - size parameter\n\t * @returns {number[]} - uint8 bytes\n\t */\n\tstatic encodeHead(m, n) {\n\t\tif (n <= 23n) {\n\t\t\treturn [32*m + Number(n)];\n\t\t} else if (n >= 24n && n <= 255n) {\n\t\t\treturn [32*m + 24, Number(n)];\n\t\t} else if (n >= 256n && n <= 256n*256n - 1n) {\n\t\t\treturn [32*m + 25, Number((n/256n)%256n), Number(n%256n)];\n\t\t} else if (n >= 256n*256n && n <= 256n*256n*256n*256n - 1n) {\n\t\t\tlet e4 = bigIntToBytes(n);\n\n\t\t\twhile (e4.length < 4) {\n\t\t\t\te4.unshift(0);\n\t\t\t}\n\t\t\treturn [32*m + 26].concat(e4);\n\t\t} else if (n >= 256n*256n*256n*256n && n <= 256n*256n*256n*256n*256n*256n*256n*256n - 1n) {\n\t\t\tlet e8 = bigIntToBytes(n);\n\n\t\t\twhile(e8.length < 8) {\n\t\t\t\te8.unshift(0);\n\t\t\t}\n\t\t\treturn [32*m + 27].concat(e8);\n\t\t} else {\n\t\t\tthrow new Error(\"n out of range\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes - mutated to contain the rest\n\t * @returns {[number, bigint]} - [majorType, n]\n\t */\n\tstatic decodeHead(bytes) {\n\t\tif (bytes.length == 0) {\n\t\t\tthrow new Error(\"empty cbor head\");\n\t\t}\n\n\t\tlet first = assertDefined(bytes.shift());\n\n\t\tif (first%32 <= 23) {\n\t\t\treturn [idiv(first, 32), BigInt(first%32)];\n\t\t} else if (first%32 == 24) {\n\t\t\treturn [idiv(first, 32), bytesToBigInt(bytes.splice(0, 1))];\n\t\t} else if (first%32 == 25) {\n\t\t\treturn [idiv(first, 32), bytesToBigInt(bytes.splice(0, 2))];\n\t\t} else if (first%32 == 26) {\n\t\t\treturn [idiv(first, 32), bytesToBigInt(bytes.splice(0, 4))];\n\t\t} else if (first%32 == 27) {\n\t\t\treturn [idiv(first, 32), bytesToBigInt(bytes.splice(0, 8))];\n\t\t} else {\n\t\t\tthrow new Error(\"bad header\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} m\n\t * @returns {number[]}\n\t */\n\tstatic encodeIndefHead(m) {\n\t\treturn [32*m + 31];\n\t}\n\n\t/**\n\t * @param {number[]} bytes - cbor bytes\n\t * @returns {number} - majorType\n\t */\n\tstatic decodeIndefHead(bytes) {\n\t\tlet first = assertDefined(bytes.shift());\n\n\t\tlet m = idiv(first - 31, 32);\n\n\t\treturn m;\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isNull(bytes) {\n\t\treturn bytes[0] == 246;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\tstatic encodeNull() {\n\t\treturn [246];\n\t}\n\n\t/**\n\t * Throws error if not null\n\t * @param {number[]} bytes\n\t */\n\tstatic decodeNull(bytes) {\n\t\tlet b = assertDefined(bytes.shift());\n\n\t\tif (b != 246) {\n\t\t\tthrow new Error(\"not null\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {boolean} b\n\t * @returns {number[]}\n\t */\n\tstatic encodeBool(b) {\n\t\tif (b) {\n\t\t\treturn [245];\n\t\t} else {\n\t\t\treturn [244];\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic decodeBool(bytes) {\n\t\tlet b = assertDefined(bytes.shift());\n\n\t\tif (b == 245) {\n\t\t\treturn true;\n\t\t} else if (b == 244) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected non-boolean cbor object\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isDefBytes(bytes) {\n\t\tif (bytes.length == 0) {\n\t\t\tthrow new Error(\"empty cbor bytes\");\n\t\t}\n\n\t\tlet [m, _] = CborData.decodeHead(bytes.slice(0, 9));\n\n\t\treturn m == 2;\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isIndefBytes(bytes) {\n\t\tif (bytes.length == 0) {\n\t\t\tthrow new Error(\"empty cbor bytes\");\n\t\t}\n\n\t\treturn 2*32 + 31 == bytes[0];\n\t}\n\n\t/**\n\t * @example\n\t * bytesToHex(CborData.encodeBytes(hexToBytes(\"4d01000033222220051200120011\"))) => \"4e4d01000033222220051200120011\"\n\t * @param {number[]} bytes\n\t * @param {boolean} splitInChunks\n\t * @returns {number[]} - cbor bytes\n\t */\n\tstatic encodeBytes(bytes, splitInChunks = false) {\n\t\tbytes = bytes.slice();\n\n\t\tif (bytes.length <= 64 || !splitInChunks) {\n\t\t\tlet head = CborData.encodeHead(2, BigInt(bytes.length));\n\t\t\treturn head.concat(bytes);\n\t\t} else {\n\t\t\tlet res = CborData.encodeIndefHead(2);\n\n\t\t\twhile (bytes.length > 0) {\n\t\t\t\tlet chunk = bytes.splice(0, 64);\n\n\t\t\t\tres = res.concat(CborData.encodeHead(2, BigInt(chunk.length))).concat(chunk);\n\t\t\t}\n\n\t\t\tres.push(255);\n\n\t\t\treturn res;\n\t\t}\n\t}\n\n\t/**\n\t * Decodes both an indef array of bytes, and a bytearray of specified length\n\t * @example\n\t * bytesToHex(CborData.decodeBytes(hexToBytes(\"4e4d01000033222220051200120011\"))) => \"4d01000033222220051200120011\"\n\t * @param {number[]} bytes - cborbytes, mutated to form remaining\n\t * @returns {number[]} - byteArray\n\t */\n\tstatic decodeBytes(bytes) {\n\t\t// check header type\n\t\tassert(bytes.length > 0);\n\n\t\tif (CborData.isIndefBytes(bytes)) {\n\t\t\t// multiple chunks\n\t\t\tvoid bytes.shift();\n\n\t\t\t/**\n\t\t\t * @type {number[]}\n\t\t\t */\n\t\t\tlet res = [];\n\n\t\t\twhile(bytes[0] != 255) {\n\t\t\t\tlet [_, n] = CborData.decodeHead(bytes);\n\t\t\t\tif (n > 64n) {\n\t\t\t\t\tthrow new Error(\"bytearray chunk too large\");\n\t\t\t\t}\n\n\t\t\t\tres = res.concat(bytes.splice(0, Number(n)));\n\t\t\t}\n\n\t\t\tassert(bytes.shift() == 255);\n\n\t\t\treturn res;\n\t\t} else {\n\t\t\tlet [_, n] = CborData.decodeHead(bytes);\n\n\t\t\treturn bytes.splice(0, Number(n));\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isUtf8(bytes) {\n\t\tif (bytes.length == 0) {\n\t\t\tthrow new Error(\"empty cbor bytes\");\n\t\t}\n\n\t\treturn bytes[0] === 120;\n\t}\n\n\t/**\n\t * Encodes a Utf8 string into Cbor bytes.\n\t * Strings longer than 64 bytes are split into lists with 64 byte chunks\n\t * Note: string splitting isn't reversible\n\t * @param {string} str\n\t * @param {boolean} split\n\t * @returns {number[]}\n\t */\n\tstatic encodeUtf8(str, split = false) {\n\t\tconst bytes = textToBytes(str);\n\n\t\tif (split && bytes.length > 64) {\n\t\t\t/** @type {number[][]} */\n\t\t\tconst chunks = [];\n\n\t\t\tfor (let i = 0; i < bytes.length; i += 64) {\n\t\t\t\tconst chunk = bytes.slice(i, i + 64);\n\n\t\t\t\tchunks.push([120, chunk.length].concat(chunk));\n\t\t\t}\n\n\t\t\treturn CborData.encodeDefList(chunks);\n\t\t} else {\n\t\t\treturn [120, bytes.length].concat(bytes);\n\t\t}\n\t}\n\n\t/**\n\t* @param {number[]} bytes\n\t* @returns {string}\n\t*/\n\tstatic decodeUtf8Internal(bytes) {\n\t\tassert(bytes.shift() === 120);\n\n\t\tconst length = bytes.shift();\n\n\t\treturn bytesToText(bytes.splice(0, length));\n\t}\n\n\t/**\n\t* @param {number[]} bytes\n\t* @returns {string}\n\t*/\n\tstatic decodeUtf8(bytes) {\n\t\tassert(bytes.length > 0);\n\n\t\tif (CborData.isDefList(bytes)) {\n\t\t\tlet result = \"\";\n\n\t\t\tCborData.decodeList(bytes, (_, itemBytes) => {\n\t\t\t\tresult += CborData.decodeUtf8Internal(itemBytes);\n\t\t\t});\n\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn CborData.decodeUtf8Internal(bytes);\n\t\t}\n\t}\n\n\t/**\n\t * @param {bigint} n\n\t * @returns {number[]} - cbor bytes\n\t */\n\tstatic encodeInteger(n) {\n\t\tif (n >= 0n && n <= (2n << 63n) - 1n) {\n\t\t\treturn CborData.encodeHead(0, n);\n\t\t} else if (n >= (2n << 63n)) {\n\t\t\treturn CborData.encodeHead(6, 2n).concat(CborData.encodeBytes(bigIntToBytes(n)));\n\t\t} else if (n <= -1n && n >= -(2n << 63n)) {\n\t\t\treturn CborData.encodeHead(1, -n - 1n);\n\t\t} else {\n\t\t\treturn CborData.encodeHead(6, 3n).concat(CborData.encodeBytes(bigIntToBytes(-n - 1n)));\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {bigint}\n\t */\n\tstatic decodeInteger(bytes) {\n\t\tlet [m, n] = CborData.decodeHead(bytes);\n\n\t\tif (m == 0) {\n\t\t\treturn n;\n\t\t} else if (m == 1) {\n\t\t\treturn -n - 1n;\n\t\t} else if (m == 6) {\n\t\t\tif (n == 2n) {\n\t\t\t\tlet b = CborData.decodeBytes(bytes);\n\n\t\t\t\treturn bytesToBigInt(b);\n\t\t\t} else if (n == 3n) {\n\t\t\t\tlet b = CborData.decodeBytes(bytes);\n\n\t\t\t\treturn -bytesToBigInt(b) - 1n;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`unexpected tag n:${n}`);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`unexpected tag m:${m}`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isIndefList(bytes) {\n\t\tif (bytes.length == 0) {\n\t\t\tthrow new Error(\"empty cbor bytes\");\n\t\t}\n\n\t\treturn 4*32 + 31 == bytes[0];\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\tstatic encodeIndefListStart() {\n\t\treturn CborData.encodeIndefHead(4);\n\t}\n\n\t/**\n\t * @param {CborData[] | number[][]} list\n\t * @returns {number[]}\n\t */\n\tstatic encodeListInternal(list) {\n\t\t/**\n\t\t * @type {number[]}\n\t\t */\n\t\tlet res = [];\n\t\tfor (let item of list) {\n\t\t\tif (item instanceof CborData) {\n\t\t\t\tres = res.concat(item.toCbor());\n\t\t\t} else {\n\t\t\t\tres = res.concat(item);\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\tstatic encodeIndefListEnd() {\n\t\treturn [255];\n\t}\n\n\t/**\n\t * @param {CborData[] | number[][]} list\n\t * @returns {number[]}\n\t */\n\tstatic encodeList(list) {\n\t\t// This follows the serialization format that the Haskell input-output-hk/plutus UPLC evaluator\n\t\t// https://github.com/well-typed/cborg/blob/4bdc818a1f0b35f38bc118a87944630043b58384/serialise/src/Codec/Serialise/Class.hs#L181\n\t\treturn list.length ? CborData.encodeIndefList(list) : CborData.encodeDefList(list);\n\t}\n\n\t/**\n\t * @param {CborData[] | number[][]} list\n\t * @returns {number[]}\n\t */\n\tstatic encodeIndefList(list) {\n\t\treturn CborData.encodeIndefListStart().concat(CborData.encodeListInternal(list)).concat(CborData.encodeIndefListEnd());\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isDefList(bytes) {\n\t\ttry {\n\t\t\tlet [m, _] = CborData.decodeHead(bytes.slice(0, 9));\n\t\t\treturn m == 4;\n\t\t} catch (error) {\n\t\t\tif (error.message.includes(\"bad header\")) return false;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @param {bigint} n\n\t * @returns {number[]}\n\t */\n\tstatic encodeDefListStart(n) {\n\t\treturn CborData.encodeHead(4, n);\n\t}\n\n\t/**\n\t * @param {CborData[] | number[][]} list\n\t * @returns {number[]}\n\t */\n\tstatic encodeDefList(list) {\n\t\treturn CborData.encodeDefListStart(BigInt(list.length)).concat(CborData.encodeListInternal(list));\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isList(bytes) {\n\t\treturn CborData.isIndefList(bytes) || CborData.isDefList(bytes);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @param {Decoder} itemDecoder\n\t */\n\tstatic decodeList(bytes, itemDecoder) {\n\t\tif (CborData.isIndefList(bytes)) {\n\t\t\tassert(CborData.decodeIndefHead(bytes) == 4);\n\n\t\t\tlet i = 0;\n\t\t\twhile(bytes[0] != 255) {\n\t\t\t\titemDecoder(i, bytes);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tassert(bytes.shift() == 255);\n\t\t} else {\n\t\t\tlet [m, n] = CborData.decodeHead(bytes);\n\n\t\t\tassert(m == 4);\n\n\t\t\tfor (let i = 0; i < Number(n); i++) {\n\t\t\t\titemDecoder(i, bytes);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isTuple(bytes) {\n\t\treturn CborData.isIndefList(bytes) || CborData.isDefList(bytes);\n\t}\n\n\t/**\n\t * @param {number[][]} tuple\n\t * @returns {number[]}\n\t */\n\tstatic encodeTuple(tuple) {\n\t\treturn CborData.encodeDefList(tuple);\n\t}\n\n\n\t/**\n\t * @param {number[]} bytes\n\t * @param {Decoder} tupleDecoder\n\t * @returns {number} - returns the size of the tuple\n\t */\n\tstatic decodeTuple(bytes, tupleDecoder) {\n\t\tlet count = 0;\n\n\t\tCborData.decodeList(bytes, (_, itemBytes) => {\n\t\t\ttupleDecoder(count, itemBytes);\n\t\t\tcount++;\n\t\t});\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isMap(bytes) {\n\t\tlet [m, _] = CborData.decodeHead(bytes.slice(0, 9));\n\n\t\treturn m == 5;\n\t}\n\n\t/**\n\t * @param {[CborData | number[], CborData | number[]][]} pairList\n\t * @returns {number[]}\n\t */\n\tstatic encodeMapInternal(pairList) {\n\t\t/**\n\t\t * @type {number[]}\n\t\t */\n\t\tlet res = [];\n\n\t\tfor (let pair of pairList) {\n\t\t\tlet key = pair[0];\n\t\t\tlet value = pair[1];\n\n\t\t\tif (key instanceof CborData) {\n\t\t\t\tres = res.concat(key.toCbor());\n\t\t\t} else {\n\t\t\t\tres = res.concat(key);\n\t\t\t}\n\n\t\t\tif (value instanceof CborData) {\n\t\t\t\tres = res.concat(value.toCbor());\n\t\t\t} else {\n\t\t\t\tres = res.concat(value);\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * A decode map method doesn't exist because it specific for the requested type\n\t * @param {[CborData | number[], CborData | number[]][]} pairList\n\t * @returns {number[]}\n\t */\n\tstatic encodeMap(pairList) {\n\t\treturn CborData.encodeHead(5, BigInt(pairList.length)).concat(CborData.encodeMapInternal(pairList));\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @param {Decoder} pairDecoder\n\t */\n\tstatic decodeMap(bytes, pairDecoder) {\n\t\tlet [m, n] = CborData.decodeHead(bytes);\n\n\t\tassert(m == 5);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tpairDecoder(i, bytes);\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isObject(bytes) {\n\t\treturn CborData.isMap(bytes);\n\t}\n\n\t/**\n\t * @param {Map<number, CborData | number[]>} object\n\t * @returns {number[]}\n\t */\n\tstatic encodeObject(object) {\n\t\treturn CborData.encodeMap(Array.from(object.entries()).map(pair => [\n\t\t\tCborData.encodeInteger(BigInt(pair[0])),\n\t\t\tpair[1]\n\t\t]));\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @param {Decoder} fieldDecoder\n\t * @returns {Set<number>}\n\t */\n\tstatic decodeObject(bytes, fieldDecoder) {\n\t\t/** @type {Set<number>} */\n\t\tlet done = new Set();\n\n\t\tCborData.decodeMap(bytes, (_, pairBytes) => {\n\t\t\tlet i = Number(CborData.decodeInteger(pairBytes));\n\n\t\t\tfieldDecoder(i, pairBytes);\n\t\t\t\n\t\t\tdone.add(i);\n\t\t});\n\n\t\treturn done;\n\t}\n\n\t/**\n\t * Unrelated to constructor\n\t * @param {bigint} tag\n\t * @returns {number[]}\n\t */\n\tstatic encodeTag(tag) {\n\t\treturn CborData.encodeHead(6, tag);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {bigint}\n\t */\n\tstatic decodeTag(bytes) {\n\t\tlet [m, n] = CborData.decodeHead(bytes);\n\n\t\tassert(m == 6);\n\n\t\treturn n;\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {boolean}\n\t */\n\tstatic isConstr(bytes) {\n\t\tif (bytes.length == 0) {\n\t\t\tthrow new Error(\"empty cbor bytes\");\n\t\t}\n\n\t\tlet [m, _] = CborData.decodeHead(bytes.slice(0, 9));\n\n\t\treturn m == 6;\n\t}\n\n\t/**\n\t * Encode a constructor tag of a ConstrData type\n\t * @param {number} tag\n\t * @returns {number[]}\n\t */\n\tstatic encodeConstrTag(tag) {\n\t\tif (tag >= 0 && tag <= 6) {\n\t\t\treturn CborData.encodeHead(6, 121n + BigInt(tag));\n\t\t} else if (tag >= 7 && tag <= 127) {\n\t\t\treturn CborData.encodeHead(6, 1280n + BigInt(tag - 7));\n\t\t} else {\n\t\t\treturn CborData.encodeHead(6, 102n).concat(CborData.encodeHead(4, 2n)).concat(CborData.encodeInteger(BigInt(tag)));\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} tag\n\t * @param {CborData[] | number[][]} fields\n\t * @returns {number[]}\n\t */\n\tstatic encodeConstr(tag, fields) {\n\t\treturn CborData.encodeConstrTag(tag).concat(CborData.encodeList(fields));\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {number}\n\t */\n\tstatic decodeConstrTag(bytes) {\n\t\t// constr\n\t\tlet [m, n] = CborData.decodeHead(bytes);\n\n\t\tassert(m == 6);\n\n\t\tif (n < 127n) {\n\t\t\treturn Number(n - 121n);\n\t\t} else if (n == 102n) {\n\t\t\tlet [mCheck, nCheck] = CborData.decodeHead(bytes);\n\t\t\tassert(mCheck == 4 && nCheck == 2n);\n\n\t\t\treturn Number(CborData.decodeInteger(bytes));\n\t\t} else {\n\t\t\treturn Number(n - 1280n + 7n);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the tag\n\t * @param {number[]} bytes\n\t * @param {Decoder} fieldDecoder\n\t * @returns {number}\n\t */\n\tstatic decodeConstr(bytes, fieldDecoder) {\n\t\tlet tag = CborData.decodeConstrTag(bytes);\n\n\t\tCborData.decodeList(bytes, fieldDecoder);\n\n\t\treturn tag;\n\t}\n}\n\n\n\n/////////////////////////////\n// Section 6: Uplc data types\n/////////////////////////////\n\n/**\n * Min memory used by a UplcData value during validation\n * @package\n * @type {number}\n */\nconst UPLC_DATA_NODE_MEM_SIZE = 4;\n\n/**\n * Base class for Plutus-core data classes (not the same as Plutus-core value classes!)\n */\nclass UplcData extends CborData {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Estimate of memory usage during validation\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Compares the schema jsons\n\t * @param {UplcData} other\n\t * @returns {boolean}\n\t */\n\tisSame(other) {\n\t\treturn this.toSchemaJson() == other.toSchemaJson();\n\t}\n\n\t/**\n\t * @type {number[]}\n\t */\n\tget bytes() {\n\t\tthrow new Error(\"not a bytearray\");\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget int() {\n\t\tthrow new Error(\"not an int\");\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget index() {\n\t\tthrow new Error(\"not a constr\");\n\t}\n\n\t/**\n\t * @type {UplcData[]}\n\t */\n\tget fields() {\n\t\tthrow new Error(\"not a constr\");\n\t}\n\n\t/**\n\t * @type {UplcData[]}\n\t */\n\tget list() {\n\t\tthrow new Error(\"not a list\");\n\t}\n\n\t/**\n\t * @type {[UplcData, UplcData][]}\n\t */\n\tget map() {\n\t\tthrow new Error(\"not a map\");\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoSchemaJson() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {string | number[]} bytes\n\t * @returns {UplcData}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tif (typeof bytes == \"string\") {\n\t\t\treturn UplcData.fromCbor(hexToBytes(bytes));\n\t\t} else {\n\t\t\tif (CborData.isList(bytes)) {\n\t\t\t\treturn ListData.fromCbor(bytes);\n\t\t\t} else if (CborData.isIndefBytes(bytes)) {\n\t\t\t\treturn ByteArrayData.fromCbor(bytes);\n\t\t\t} else {\n\t\t\t\tif (CborData.isDefBytes(bytes)) {\n\t\t\t\t\treturn ByteArrayData.fromCbor(bytes);\n\t\t\t\t} else if (CborData.isMap(bytes)) {\n\t\t\t\t\treturn MapData.fromCbor(bytes);\n\t\t\t\t} else if (CborData.isConstr(bytes)) {\n\t\t\t\t\treturn ConstrData.fromCbor(bytes);\n\t\t\t\t} else {\n\t\t\t\t\t// int, must come last\n\t\t\t\t\treturn IntData.fromCbor(bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Plutus-core int data class\n */\nclass IntData extends UplcData {\n\t#value;\n\n\t/**\n\t * @param {bigint} value\n\t */\n\tconstructor(value) {\n\t\tsuper();\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Alias getter\n\t * @type {bigint}\n\t */\n\tget int() {\n\t\treturn this.#value;\n\t}\n\n    /**\n     * Calculate the mem size of a integer (without the DATA_NODE overhead)\n     * @param {bigint} value\n     * @returns {number}\n     */\n    static memSizeInternal(value) {\n        if (value == 0n) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tconst abs = value > 0n ? value : -value;\n\n\t\t\treturn Math.floor(Math.floor(Math.log2(Number(abs)))/64) + 1;\n\t\t}\n    }\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\treturn UPLC_DATA_NODE_MEM_SIZE + IntData.memSizeInternal(this.#value);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value.toString();\n\t}\n\n\t/**\n\t * Returns integer literal wrapped with integer data function call.\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\treturn new IR(`__core__iData(${this.#value.toString()})`);\n\t}\n\n\t/**\n\t * Returns string, not js object, because of unbounded integers\n\t * @returns {string}\n\t */\n\ttoSchemaJson() {\n\t\treturn `{\"int\": ${this.#value.toString()}}`;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeInteger(this.#value);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {IntData}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new IntData(CborData.decodeInteger(bytes));\n\t}\n}\n\n/**\n * Plutus-core bytearray data class.\n * Wraps a regular list of uint8 numbers (so not Uint8Array)\n */\nclass ByteArrayData extends UplcData {\n\t#bytes;\n\n\t/**\n\t * @param {number[]} bytes\n\t */\n\tconstructor(bytes) {\n\t\tsuper();\n\t\tthis.#bytes = bytes;\n\t}\n\n\t/**\n\t * Applies utf-8 encoding\n\t * @param {string} s\n\t * @returns {ByteArrayData}\n\t */\n\tstatic fromString(s) {\n\t\tlet bytes = textToBytes(s);\n\n\t\treturn new ByteArrayData(bytes);\n\t}\n\n\tget bytes() {\n\t\treturn this.#bytes.slice();\n\t}\n\n    /**\n     * Calculates the mem size of a byte array without the DATA_NODE overhead.\n     * @param {number[]} bytes\n     * @returns {number}\n     */\n    static memSizeInternal(bytes) {\n        let n = bytes.length;\n\t\tif (n === 0) {\n\t\t\treturn 1; // this is so annoying: haskell reference implementation says it should be 0, but current (20220925) testnet and mainnet settings say it's 1\n\t\t} else {\n\t\t\treturn Math.floor((bytes.length - 1)/8) + 1;\n\t\t}\n    }\n\n\tget memSize() {\n\t\treturn UPLC_DATA_NODE_MEM_SIZE + ByteArrayData.memSizeInternal(this.#bytes);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoHex() {\n\t\treturn bytesToHex(this.#bytes);\n\t}\n\n\ttoString() {\n\t\treturn `#${this.toHex()}`;\n\t}\n\n\t/**\n\t * Returns bytearray literal wrapped with bytearray data function as IR.\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\treturn new IR(`__core__bData(#${this.toHex()})`);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoSchemaJson() {\n\t\treturn `{\"bytes\": \"${this.toHex()}\"}`;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeBytes(this.#bytes, true);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {ByteArrayData}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new ByteArrayData(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * Bytearray comparison, which can be used for sorting bytearrays\n\t * @example\n\t * ByteArrayData.comp(hexToBytes(\"0101010101010101010101010101010101010101010101010101010101010101\"), hexToBytes(\"0202020202020202020202020202020202020202020202020202020202020202\")) => -1\n\t * @param {number[]} a\n\t * @param {number[]} b\n\t * @returns {number} - 0 -> equals, 1 -> gt, -1 -> lt\n\t */\n\tstatic comp(a, b) {\n\t\t/** @return {boolean} */\n\t\tfunction lessThan() {\n\t\t\tfor (let i = 0; i < Math.min(a.length, b.length); i++) {\n\t\t\t\tif (a[i] != b[i]) {\n\t\t\t\t\treturn a[i] < b[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a.length < b.length;\n\t\t}\n\n\t\t/** @return {number} */\n\t\tfunction lessOrGreater() {\n\t\t\treturn lessThan() ? -1 : 1;\n\t\t}\n\n\t\tif (a.length != b.length) {\n\t\t\treturn lessOrGreater();\n\t\t} else {\n\t\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i] != b[i]) {\n\t\t\t\t\treturn lessOrGreater();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\n/**\n * Plutus-core list data class\n */\nclass ListData extends UplcData {\n\t#items;\n\n\t/**\n\t * @param {UplcData[]} items\n\t */\n\tconstructor(items) {\n\t\tsuper();\n\t\tthis.#items = items;\n\t}\n\n\t/**\n\t * @type {UplcData[]}\n\t */\n\tget list() {\n\t\treturn this.#items.slice();\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\tlet sum = UPLC_DATA_NODE_MEM_SIZE;\n\n\t\tfor (let item of this.#items) {\n\t\t\tsum += item.memSize;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\ttoString() {\n\t\treturn `[${this.#items.map(item => item.toString()).join(\", \")}]`;\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\tlet ir = new IR(\"__core__mkNilData(())\");\n\t\tfor (let i = this.#items.length - 1; i >= 0; i--) {\n\t\t\tir = new IR([new IR(\"__core__mkCons(\"), this.#items[i].toIR(), new IR(\", \"), ir, new IR(\")\")]);\n\t\t}\n\n\t\treturn new IR([new IR(\"__core__listData(\"), ir, new IR(\")\")]);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoSchemaJson() {\n\t\treturn `{\"list\":[${this.#items.map(item => item.toSchemaJson()).join(\", \")}]}`;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeList(this.#items);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {ListData}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/**\n\t\t * @type {UplcData[]}\n\t\t */\n\t\tlet list = [];\n\n\t\tCborData.decodeList(bytes, (_, itemBytes) => {\n\t\t\tlist.push(UplcData.fromCbor(itemBytes));\n\t\t});\n\n\t\treturn new ListData(list);\n\t}\n}\n\n/**\n * Plutus-core map data class\n */\nclass MapData extends UplcData {\n\t#pairs;\n\n\t/**\n\t * @param {[UplcData, UplcData][]} pairs\n\t */\n\tconstructor(pairs) {\n\t\tsuper();\n\t\tthis.#pairs = pairs;\n\t}\n\n\t/**\n\t * @type {[UplcData, UplcData][]}\n\t */\n\tget map() {\n\t\treturn this.#pairs.slice();\n\t}\n\n\tget memSize() {\n\t\tlet sum = UPLC_DATA_NODE_MEM_SIZE;\n\n\t\tfor (let [k, v] of this.#pairs) {\n\t\t\tsum += k.memSize + v.memSize;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\ttoString() {\n\t\treturn `{${this.#pairs.map(([fst, snd]) => `${fst.toString()}: ${snd.toString()}`).join(\", \")}}`;\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\tlet ir = new IR(\"__core__mkNilPairData(())\");\n\n\t\tfor (let i = this.#pairs.length - 1; i >= 0; i--) {\n\t\t\tlet a = this.#pairs[i][0].toIR();\n\t\t\tlet b = this.#pairs[i][1].toIR();\n\n\t\t\tir = new IR([new IR(\"__core__mkCons(__core__mkPairData(\"), a, new IR(\", \"), b, new IR(\", \"), new IR(\")\"), new IR(\", \"), ir, new IR(\")\")]);\n\t\t}\n\n\t\treturn new IR([new IR(\"__core__mapData(\"), ir, new IR(\")\")]);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoSchemaJson() {\n\t\treturn `{\"map\": [${this.#pairs.map(pair => { return \"{\\\"k\\\": \" + pair[0].toSchemaJson() + \", \\\"v\\\": \" + pair[1].toSchemaJson() + \"}\" }).join(\", \")}]}`;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeMap(this.#pairs);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {MapData}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/**\n\t\t * @type {[UplcData, UplcData][]}\n\t\t */\n\t\tlet pairs = [];\n\n\t\tCborData.decodeMap(bytes, (_, pairBytes) => {\n\t\t\tpairs.push([UplcData.fromCbor(pairBytes), UplcData.fromCbor(pairBytes)]);\n\t\t});\n\n\t\treturn new MapData(pairs);\n\t}\n}\n\n/**\n * Plutus-core constructed data class\n */\nclass ConstrData extends UplcData {\n\t#index;\n\t#fields;\n\n\t/**\n\t * @param {number} index\n\t * @param {UplcData[]} fields\n\t */\n\tconstructor(index, fields) {\n\t\tsuper();\n\t\tthis.#index = index;\n\t\tthis.#fields = fields;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget index() {\n\t\treturn this.#index;\n\t}\n\n\t/**\n\t * @type {UplcData[]}\n\t */\n\tget fields() {\n\t\treturn this.#fields.slice();\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\tlet sum = UPLC_DATA_NODE_MEM_SIZE;\n\n\t\tfor (let field of this.#fields) {\n\t\t\tsum += field.memSize;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tlet parts = this.#fields.map(field => field.toString());\n\t\treturn `${this.#index.toString()}{${parts.join(\", \")}}`;\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\tlet ir = new IR(\"__core__mkNilData(())\");\n\t\tfor (let i = this.#fields.length - 1; i >= 0; i--) {\n\t\t\tir = new IR([new IR(\"__core__mkCons(\"), this.#fields[i].toIR(), new IR(\", \"), ir, new IR(\")\")]);\n\t\t}\n\n\t\treturn new IR([new IR(\"__core__constrData(\"), new IR(this.#index.toString()), new IR(\", \"), ir, new IR(\")\")]);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoSchemaJson() {\n\t\treturn `{\"constructor\": ${this.#index.toString()}, \"fields\": [${this.#fields.map(f => f.toSchemaJson()).join(\", \")}]}`;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeConstr(this.#index, this.#fields);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {ConstrData}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/**\n\t\t * @type {UplcData[]}\n\t\t */\n\t\tlet fields = [];\n\n\t\tlet tag = CborData.decodeConstr(bytes, (_, fieldBytes) => {\n\t\t\tfields.push(UplcData.fromCbor(fieldBytes));\n\t\t});\n\n\t\treturn new ConstrData(tag, fields);\n\t}\n}\n\n\n\n/////////////////////////////////\n// Section 7: Helios data objects\n/////////////////////////////////\n\n/**\n * Base-type of all data-types that exist both on- and off-chain, and map directly to Helios instances.\n */\nclass HeliosData extends CborData {\n\tconstructor() {\n        super();\n\t}\n\n    /**\n     * Name begins with underscore so it can never conflict with structure field names.\n     * @package\n     * @returns {UplcData}\n     */\n\t_toUplcData() {\n        throw new Error(\"not yet implemented\");\n\t}\n\n    /**\n     * @returns {string}\n     */\n\ttoSchemaJson() {\n\t\treturn this._toUplcData().toSchemaJson();\n\t}\n}\n\n/**\n * @template {HeliosData} T\n * @typedef {{\n *   new(...args: any[]): T;\n *   fromUplcCbor: (bytes: (string | number[])) => T,\n *   fromUplcData: (data: UplcData) => T\n * }} HeliosDataClass\n */\n\n/**\n * Helios Int type\n */\nclass HInt extends HeliosData {\n    /** \n     * @type {bigint} \n     */\n    #value;\n\n    /**\n     * @package\n     * @param {number | bigint | string} rawValue\n     * @returns {bigint}\n     */\n    static cleanConstructorArg(rawValue) {\n        const value = BigInt(rawValue);\n\n        if (value.toString() != rawValue.toString()) {\n            throw new Error(\"not a valid integer\");\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {number | bigint | string} rawValue\n     */\n    constructor(rawValue) {\n        super();\n\n        this.#value = HInt.cleanConstructorArg(rawValue);\n    }\n\n    /**\n     * @type {bigint}\n     */\n    get value() {\n        return this.#value;\n    }\n\n    /**\n     * @package\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new IntData(this.#value);\n    }\n\n    /**\n     * @param {UplcData} data\n     * @returns {HInt}\n     */\n    static fromUplcData(data) {\n        return new HInt(data.int);\n    }\n\n    /**\n     * @param {string | number[]} bytes\n     * @returns {HInt}\n     */\n    static fromUplcCbor(bytes) {\n        return HInt.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * Milliseconds since 1 jan 1970\n */\nclass Time extends HInt {\n     /**\n     * @package\n     * @param {number | bigint | string | Date} rawValue\n     * @returns {bigint}\n     */\n      static cleanConstructorArg(rawValue) {\n\n        if (rawValue instanceof Date) {\n            return BigInt(rawValue.getTime());\n        } else {\n            const value = BigInt(rawValue);\n\n            if (value.toString() != rawValue.toString()) {\n                throw new Error(\"not a valid integer\");\n            } else {\n                return value;\n            }\n        }\n    }\n\n    /**\n     * @param {number | bigint | string | Date} rawValue\n     */\n    constructor(rawValue) {\n        super(Time.cleanConstructorArg(rawValue));\n    }\n\n    /**\n     * @param {UplcData} data\n     * @returns {Time}\n     */\n    static fromUplcData(data) {\n        return new Time(data.int);\n    }\n\n    /**\n     * @param {string | number[]} bytes\n     * @returns {Time}\n     */\n    static fromUplcCbor(bytes) {\n        return Time.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * Difference between two time values in milliseconds.\n */\nclass Duration extends HInt {\n    /**\n     * @param {UplcData} data\n     * @returns {Duration}\n     */\n    static fromUplcData(data) {\n        return new Duration(data.int);\n    }\n\n    /**\n     * @param {string | number[]} bytes\n     * @returns {Duration}\n     */\n    static fromUplcCbor(bytes) {\n        return Duration.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * Helios Bool type\n */\nclass Bool extends HeliosData {\n    /** \n     * @type {boolean} \n     */\n    #value;\n\n    /**\n     * @package\n     * @param {boolean | string} rawValue \n     * @returns {boolean}\n     */\n    static cleanConstructorArg(rawValue) {\n        if (typeof rawValue == \"string\") {\n            if (rawValue == \"false\") {\n                return false;\n            } else if (rawValue == \"true\") {\n                return true;\n            } else {\n                throw new Error(\"not a valid string representation of a Bool\");\n            }\n        } else if (typeof rawValue == \"boolean\") {\n            return rawValue;\n        } else {\n            throw new Error(\"can't convert to boolean\");\n        }\n    }\n\n    /**\n     * @param {boolean | string} rawValue \n     */\n    constructor(rawValue) {\n        super();\n\n        this.#value = Bool.cleanConstructorArg(rawValue);\n    }\n\n    get bool() {\n        return this.#value;\n    }\n    \n    /**\n     * @package\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new ConstrData(this.#value ? 1 : 0, []);\n    }\n\n    /** \n     * @param {UplcData} data\n     * @returns {Bool}\n     */\n    static fromUplcData(data) {\n        assert(data.fields.length == 0, \"bool data can't have fields\");\n\n        if (data.index == 0) {\n            return new Bool(false);\n        } else if (data.index == 1) {\n            return new Bool(true);\n        } else {\n            throw new Error(\"expected 0 or 1 for ConstrData representing Bool\");\n        }\n    }\n\n    /**\n     * @param {string | number[]} bytes \n     * @returns {Bool}\n     */\n    static fromUplcCbor(bytes) {\n        return Bool.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * Helios String type.\n * Can't be named 'String' because that would interfere with the javascript 'String'-type\n */\nclass HString extends HeliosData {\n    /**\n     * @type {string}\n     */\n    #value;\n\n    /**\n     * @param {string} value \n     */\n    constructor(value) {\n        super();\n\n        this.#value = value;\n    }\n\n    get string() {\n        return this.#value;\n    }\n\n    /**\n     * @package\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new ByteArrayData(textToBytes(this.#value));\n    }\n\n    /**\n     * @param {UplcData} data \n     * @returns {HString}\n     */\n    static fromUplcData(data) {\n        return new HString(bytesToText(data.bytes));\n    }\n\n    /**\n     * @param {string | number[]} bytes \n     * @returns {HString}\n     */\n    static fromUplcCbor(bytes) {\n        return HString.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * Helios ByteArray type\n */\nclass ByteArray extends HeliosData {\n    /**\n     * @type {number[]}\n     */\n    #bytes;\n\n    /**\n     * @package\n     * @param {string | number[]} rawValue \n     */\n    static cleanConstructorArg(rawValue) {\n        if (Array.isArray(rawValue)) {\n            return rawValue;\n        } else if (typeof rawValue == \"string\") {\n            if (rawValue.startsWith(\"#\")) {\n                rawValue = rawValue.slice(1);\n            }\n\n            return hexToBytes(rawValue);\n        } else {\n            throw new Error(\"unexpected bytes type\");\n        }\n    }\n\n    /**\n     * @param {string | number[]} rawValue \n     */\n    constructor(rawValue) {\n        super();\n\n        this.#bytes = ByteArray.cleanConstructorArg(rawValue);\n    }\n\n    /**\n     * @type {number[]}\n     */\n    get bytes() {\n        return this.#bytes;\n    }\n\n    /**\n     * @type {string}\n     */\n    get hex() {\n        return bytesToHex(this.#bytes);\n    }\n\n    /**\n     * @package\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new ByteArrayData(this.#bytes);\n    }\n\n    /**\n     * @param {UplcData} data \n     * @returns {ByteArray}\n     */\n    static fromUplcData(data) {\n        return new ByteArray(data.bytes);\n    }\n\n    /**\n     * @param {string | number[]} bytes\n     * @returns {ByteArray}\n     */\n    static fromUplcCbor(bytes) {\n        return ByteArray.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * Dynamically constructs a new List class, depending on the item type.\n * @template {HeliosData} T\n * @param {HeliosDataClass<T>} ItemClass\n * @returns {HeliosDataClass<HList_>}\n */\nfunction HList(ItemClass) {\n    assert(!new.target, \"List can't be called with new\");\n    assert(ItemClass.prototype instanceof HeliosData);\n\n    const typeName = `[]${ItemClass.name}`;\n\n    class HList_ extends HeliosData {\n        /** \n         * @type {T[]} \n         */\n        #items;\n\n        /**\n         * @param {any[]} rawList \n         */\n        constructor(rawList) {\n            super();\n\n            this.#items = rawList.map(item => {\n                if (item instanceof ItemClass) {\n                    return item;\n                } else {\n                    return new ItemClass(item);\n                }\n            });\n        }\n\n        /**\n         * @package\n         * @type {string}\n         */\n        get _listTypeName() {\n            return typeName;\n        }\n\n        /**\n         * Overload 'instanceof' operator\n         * @package\n         * @param {any} other \n         * @returns {boolean}\n         */\n        static [Symbol.hasInstance](other) {\n            return (other._listTypeName === typeName) && (other instanceof HeliosData);\n        }\n\n        /**\n         * @type {T[]}\n         */\n        get items() {\n            return this.#items;\n        }\n\n        /**\n         * @package\n         * @returns {UplcData}\n         */\n        _toUplcData() {\n            return new ListData(this.#items.map(item => item._toUplcData()))\n        }\n\n        /**\n         * @param {UplcData} data \n         * @returns {HList_}\n         */\n        static fromUplcData(data) {\n            return new HList_(data.list.map(d => ItemClass.fromUplcData(d)));\n        }\n\n        /**\n         * @param {string | number[]} bytes \n         * @returns {HList_}\n         */\n        static fromUplcCbor(bytes) {\n            return HList_.fromUplcData(UplcData.fromCbor(bytes));\n        }\n    }\n\n    Object.defineProperty(HList_, \"name\", {\n        value: typeName,\n        writable: false\n    });\n\n    return HList_;\n}\n\n/**\n * @template {HeliosData} TKey\n * @template {HeliosData} TValue\n * @param {HeliosDataClass<TKey>} KeyClass \n * @param {HeliosDataClass<TValue>} ValueClass\n * @returns {HeliosDataClass<HMap_>}\n */\nfunction HMap(KeyClass, ValueClass) {\n    assert(!new.target, \"HMap can't be called with new\");\n    assert(KeyClass.prototype instanceof HeliosData);\n    assert(ValueClass.prototype instanceof HeliosData);\n    \n    const typeName = `Map[${KeyClass.name}]${ValueClass.name}`;\n\n    class HMap_ extends HeliosData {\n        /**\n         * @type {[TKey, TValue][]}\n         */\n        #pairs;\n\n        /**\n         * @package\n         * @param {...any} args\n         * @returns {[any, any][]}\n         */\n        static cleanConstructorArgs(...args) {\n            /** @type {[any, any][]} */\n            let pairs = [];\n\n            if (args.length == 1) {\n                const arg = args[0];\n\n                if (arg instanceof Map) {\n                    return HMap_.cleanConstructorArgs(Array.from(arg.entries()));\n                } else if (!Array.isArray(arg)) {\n                    throw new Error(\"expected array or Map arg\");\n                } else {\n                    const lst = arg;\n\n                    pairs = lst.map(item => {\n                        if (!Array.isArray(item)) {\n                            throw new Error(\"expected array item (pair)\");\n                        } else if (item.length != 2) {\n                            throw new Error(\"expected array item of length 2 (pair)\");\n                        } else {\n                            return [item[0], item[1]];\n                        }\n                    });\n                }\n            } else if (args.length == 2) {\n                const [keys, values] = args;\n\n                if (!Array.isArray(keys)) {\n                    throw new Error(\"expected keys array arg\");\n                } else if (!Array.isArray(values)) {\n                    throw new Error(\"expected values array arg\");\n                } else if (keys.length != values.length) {\n                    throw new Error(\"keys and values list don't have same length\");\n                } else {\n                    pairs = keys.map((key, i) => {\n                        const value = values[i];\n\n                        return [key, value];\n                    });\n                }\n            } else {\n                throw new Error(\"unexpected number of args\");\n            }\n\n            return pairs;\n        }\n\n        /**\n         * @param  {...any} args\n         */\n        constructor(...args) {\n            const rawPairs = HMap_.cleanConstructorArgs(...args);\n\n            /**\n             * @type {[TKey, TValue][]}\n             */\n            const pairs = rawPairs.map(([rawKey, rawValue]) => {\n                const key = function() {\n                    if (rawKey instanceof KeyClass) {\n                        return rawKey;\n                    } else {\n                        return new KeyClass(rawKey);\n                    }\n                }();\n\n                const value = function() {\n                    if (rawValue instanceof ValueClass) {\n                        return rawValue;\n                    } else {\n                        return new ValueClass(rawValue);\n                    }\n                }();\n\n                return [key, value];\n            });\n\n            super();\n\n            this.#pairs = pairs;\n        }\n\n        /**\n         * @package\n         * @type {string}\n         */\n        get _mapTypeName() {\n            return typeName;\n        }\n\n        /**\n         * Overload 'instanceof' operator\n         * @package\n         * @param {any} other \n         * @returns {boolean}\n         */\n        static [Symbol.hasInstance](other) {\n            return (other._mapTypeName === typeName) && (other instanceof HeliosData);\n        }\n\n        /**\n         * @type {[TKey, TValue][]}\n         */\n        get pairs() {\n            return this.#pairs;\n        }\n\n        /**\n         * @package\n         * @returns {UplcData}\n         */\n        _toUplcData() {\n            return new MapData(this.#pairs.map(([key, value]) => [key._toUplcData(), value._toUplcData()]));\n        }\n\n        /**\n         * @param {UplcData} data \n         * @returns {HMap_}\n         */\n        static fromUplcData(data) {\n            return new HMap_(data.map.map(([kd, vd]) => [KeyClass.fromUplcData(kd), ValueClass.fromUplcData(vd)]));\n        }\n\n        /**\n         * @param {string | number[]} bytes \n         * @returns {HMap_}\n         */\n        static fromUplcCbor(bytes) {\n            return HMap_.fromUplcData(UplcData.fromCbor(bytes));\n        }\n    }\n\n    Object.defineProperty(HMap_, \"name\", {\n        value: typeName,\n        writable: false\n    });\n\n    return HMap_;\n}\n\n/**\n * @template {HeliosData} T\n * @param {HeliosDataClass<T>} SomeClass\n * @returns {HeliosDataClass<Option_>}\n */\nfunction Option(SomeClass) {\n    assert(!new.target, \"Option can't be called with new\");\n    assert(SomeClass.prototype instanceof HeliosData);\n\n    const typeName = `Option[${SomeClass.name}]`;\n\n    class Option_ extends HeliosData {\n        /**\n         * @type {?T}\n         */\n        #value;\n\n        /**\n         * @package\n         * @param {?any} rawValue \n         * @returns {?T}\n         */\n        static cleanConstructorArg(rawValue) {\n            if (rawValue == null) {\n                return null;\n            } else if (!(rawValue instanceof SomeClass)) {\n                return new SomeClass(rawValue);\n            } else {\n                return rawValue;\n            }\n        }\n\n        /** \n         * @param {?any} rawValue\n         */\n        constructor(rawValue = null) {\n            super();\n\n            this.#value = Option_.cleanConstructorArg(rawValue);\n        }\n\n        /**\n         * @package\n         * @type {string}\n         */\n        get _optionTypeName() {\n            return typeName;\n        }\n\n        /**\n         * Overload 'instanceof' operator\n         * @package\n         * @param {any} other \n         * @returns {boolean}\n         */\n        static [Symbol.hasInstance](other) {\n            return (other._optionTypeName === typeName) && (other instanceof HeliosData);\n        }\n\n        /**\n         * @type {?T}\n         */\n        get some() {\n            return this.#value;\n        }\n\n        /**\n         * @package\n         * @returns {UplcData}\n         */\n        _toUplcData() {\n            return new ConstrData(this.#value === null ? 1 : 0, this.#value === null ? [] : [this.#value._toUplcData()]);\n        }\n\n        /**\n         * @param {UplcData} data \n         * @returns {Option_}\n         */\n        static fromUplcData(data) {\n            if (data.index == 1) {\n                assert(data.fields.length == 0);\n\n                return new Option_(null);\n            } else if (data.index == 0) {\n                assert(data.fields.length == 1);\n\n                return new Option_(SomeClass.fromUplcData(data.fields[0]))\n            } else {\n                throw new Error(\"unexpected option constr index\");\n            }\n        }\n\n        /**\n         * @param {string | number[]} bytes\n         * @returns {Option_}\n         */\n        static fromUplcCbor(bytes) {\n            return Option_.fromUplcData(UplcData.fromCbor(bytes));\n        }\n    }\n\n    Object.defineProperty(HList, \"name\", {\n        value: typeName,\n        writable: false\n    });\n\n    return Option_;\n}\n\n\n/**\n * Base class of all hash-types\n * @package\n */\nclass Hash extends HeliosData {\n\t/** @type {number[]} */\n\t#bytes;\n\n\t/**\n\t * @param {string | number[]} rawValue \n\t * @returns {number[]}\n\t */\n\tstatic cleanConstructorArg(rawValue) {\n\t\tif (typeof rawValue == \"string\") {\n\t\t\treturn hexToBytes(rawValue);\n\t\t} else {\n\t\t\treturn rawValue;\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t */\n\tconstructor(bytes) {\n\t\tsuper();\n\t\tthis.#bytes = bytes;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\tget bytes() {\n\t\treturn this.#bytes;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tget hex() {\n\t\treturn bytesToHex(this.#bytes);\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeBytes(this.#bytes);\n\t}\n\n    /**\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new ByteArrayData(this.#bytes);\n    }\n\n\t/**\n\t * Used internally for metadataHash and scriptDataHash\n\t * @param {number[]} bytes \n\t * @returns {Hash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new Hash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * Might be needed for internal use\n\t * @param {string} str \n\t * @returns {Hash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new Hash(hexToBytes(str));\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\treturn bytesToHex(this.#bytes);\n\t}\n\n\t/**\n\t * @param {Hash} other\n\t */\n\teq(other) {\n\t\treturn eq(this.#bytes, other.#bytes);\n\t}\n\n\t/**\n\t * @param {Hash} a \n\t * @param {Hash} b \n\t * @returns {number}\n\t */\n\tstatic compare(a, b) {\n\t\treturn ByteArrayData.comp(a.#bytes, b.#bytes);\n\t}\n}\n\nclass DatumHash extends Hash {\n\t/**\n\t * @param {string | number[]} rawValue\n\t */\n\tconstructor(rawValue) {\n\t\tconst bytes = Hash.cleanConstructorArg(rawValue);\n\n\t\tassert(bytes.length == 32);\n\t\tsuper(bytes);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {DatumHash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new DatumHash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {DatumHash}\n\t */\n\t static fromUplcData(data) {\n\t\treturn new DatumHash(data.bytes);\n\t}\n\t\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {DatumHash}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn DatumHash.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n\n\t/**\n\t * @param {string} str \n\t * @returns {DatumHash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new DatumHash(hexToBytes(str));\n\t}\n}\n\nclass PubKeyHash extends Hash {\n\t\n\t/**\n\t * @param {string | number[]} rawValue \n\t */\n\tconstructor(rawValue) {\n\t\tconst bytes = Hash.cleanConstructorArg(rawValue);\n\n\t\tassert(bytes.length == 28, `expected 28 bytes for PubKeyHash, got ${bytes.length}`);\n\t\tsuper(bytes);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {PubKeyHash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new PubKeyHash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {PubKeyHash}\n\t */\n\tstatic fromUplcData(data) {\n\t\treturn new PubKeyHash(data.bytes);\n\t}\n\t\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {PubKeyHash}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn PubKeyHash.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n\n\t/**\n\t * @param {string} str \n\t * @returns {PubKeyHash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new PubKeyHash(hexToBytes(str));\n\t}\n}\n\nclass ScriptHash extends Hash {\n\t/**\n\t * @param {string | number[]} rawValue\n\t */\n\tconstructor(rawValue) {\n\t\tconst bytes = Hash.cleanConstructorArg(rawValue);\n\n\t\tassert(bytes.length == 28, `expected 28 bytes for ScriptHash, got ${bytes.length}`);\n\t\tsuper(bytes);\n\t}\n}\n\nclass MintingPolicyHash extends ScriptHash {\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {MintingPolicyHash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new MintingPolicyHash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {MintingPolicyHash}\n\t */\n\tstatic fromUplcData(data) {\n\t\treturn new MintingPolicyHash(data.bytes);\n\t}\n\t\t\t\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {MintingPolicyHash}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn MintingPolicyHash.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n\n\t/**\n\t * @param {string} str \n\t * @returns {MintingPolicyHash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new MintingPolicyHash(hexToBytes(str));\n\t}\n\n\t/**\n\t * Encodes as bech32 string using 'asset' as human readable part\n\t * @returns {string}\n\t */\n\ttoBech32() {\n\t\treturn Crypto.encodeBech32(\"asset\", Crypto.blake2b(this.bytes, 20));\n\t}\n}\n\nclass StakeKeyHash extends Hash {\n\t/**\n\t * @param {number[]} rawValue\n\t */\n\tconstructor(rawValue) {\n\t\tconst bytes = Hash.cleanConstructorArg(rawValue);\n\t\t\n\t\tassert(bytes.length == 28, `expected 28 bytes for StakeKeyHash, got ${bytes.length}`);\n\t\tsuper(bytes);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {StakeKeyHash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new StakeKeyHash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {StakeKeyHash}\n\t */\n\tstatic fromUplcData(data) {\n\t\treturn new StakeKeyHash(data.bytes);\n\t}\n\t\t\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {StakeKeyHash}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn StakeKeyHash.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n\n\t/**\n\t * @param {string} str \n\t * @returns {StakeKeyHash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new StakeKeyHash(hexToBytes(str));\n\t}\n}\n\nclass StakingValidatorHash extends ScriptHash {\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {StakingValidatorHash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new StakingValidatorHash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {StakingValidatorHash}\n\t */\n\tstatic fromUplcData(data) {\n\t\treturn new StakingValidatorHash(data.bytes);\n\t}\n\t\t\t\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {StakingValidatorHash}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn StakingValidatorHash.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n\n\t/**\n\t * @param {string} str \n\t * @returns {StakingValidatorHash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new StakingValidatorHash(hexToBytes(str));\n\t}\n}\n\nclass ValidatorHash extends ScriptHash {\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {ValidatorHash}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new ValidatorHash(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {ValidatorHash}\n\t */\n\tstatic fromUplcData(data) {\n\t\treturn new ValidatorHash(data.bytes);\n\t}\n\t\t\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {ValidatorHash}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn ValidatorHash.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n\n\t/**\n\t * @param {string} str \n\t * @returns {ValidatorHash}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new ValidatorHash(hexToBytes(str));\n\t}\n}\n\n/**\n * Hash of a transaction\n */\nclass TxId extends Hash {\n\t/**\n\t * @param {string | number[]} rawValue \n\t */\n\tconstructor(rawValue) {\n        const bytes = Hash.cleanConstructorArg(rawValue);\n\n\t\tassert(bytes.length == 32, `expected 32 bytes for TxId, got ${bytes.length}`);\n\t\tsuper(bytes);\n\t}\n\n    /**\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new ConstrData(0, [new ByteArrayData(this.bytes)]);\n    }\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {TxId}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new TxId(CborData.decodeBytes(bytes));\n\t}\n\n    /**\n     * @param {UplcData} data\n     * @returns {TxId}\n     */\n    static fromUplcData(data) {\n        assert(data.index == 0);\n        assert(data.fields.length == 1);\n\n        return new TxId(data.fields[0].bytes);\n    }\n\n    /**\n     * @param {string | number[]} bytes \n     * @returns {TxId}\n     */\n    static fromUplcCbor(bytes) {\n        return TxId.fromUplcData(UplcData.fromCbor(bytes));\n    }\n\n\t/**\n\t * @param {string} str \n\t * @returns {TxId}\n\t */\n\tstatic fromHex(str) {\n\t\treturn new TxId(hexToBytes(str));\n\t}\n\n\t/**\n\t * Filled with 255 so that the internal show() function has max execution budget cost\n\t * @param {number} fill\n\t * @returns {TxId}\n\t */\n\tstatic dummy(fill = 255) {\n\t\treturn new TxId((new Array(32)).fill(fill));\n\t}\n}\n\n/**\n * Id of a Utxo\n */\nclass TxOutputId extends HeliosData {\n    /** @type {TxId} */\n    #txId;\n\n    /** @type {HInt} */\n    #utxoIdx;\n\n    /**\n     * @param  {...any} args\n     * @returns {[any, any]}\n     */\n    static cleanConstructorArgs(...args) {\n        if (args.length == 1) {\n            const arg = args[0];\n\n            if (typeof arg == \"string\") {\n                const parts = arg.split(\"#\");\n\n                assert(parts.length == 2);\n\n                return [parts[0], parts[1]];\n            } else {\n                throw new Error(\"unexpected single arg type\");\n            }\n        } else if (args.length == 2) {\n            return [args[0], args[1]];\n        } else {\n            throw new Error(\"unexpected number of args\");\n        }\n    }\n\n    /**\n     * @param {...any} args\n     */\n    constructor(...args) {\n        const [rawTxId, rawUtxoIdx] = TxOutputId.cleanConstructorArgs(...args);\n\n        const txId = (rawTxId instanceof TxId) ? rawTxId : new TxId(rawTxId);\n        const utxoIdx = (rawUtxoIdx instanceof HInt) ? rawUtxoIdx : new HInt(rawUtxoIdx);\n\n        super();\n\n        this.#txId = txId;\n        this.#utxoIdx = utxoIdx;\n    }\n\n    get txId() {\n        return this.#txId;\n    }\n\n    get utxoIdx() {\n        return this.#utxoIdx;\n    }\n\n    /**\n     * @returns {UplcData}\n     */\n    _toUplcData() {\n        return new ConstrData(0, [this.#txId._toUplcData(), this.#utxoIdx._toUplcData()])\n    }\n\n    /**\n     * @param {UplcData} data\n     * @returns {TxOutputId}\n     */\n    static fromUplcData(data) {\n        assert(data.index == 0);\n        assert(data.fields.length == 2);\n\n        return new TxOutputId(TxId.fromUplcData(data.fields[0]), HInt.fromUplcData(data.fields[1]));\n    }\n\n    /**\n     * @param {string | number[]} bytes \n     * @returns {TxOutputId}\n     */\n    static fromUplcCbor(bytes) {\n        return TxOutputId.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n/**\n * See CIP19 for formatting of first byte\n */\nclass Address extends HeliosData {\n\t/** @type {number[]} */\n\t#bytes;\n\n    /**\n\t * @param {number[] | string} rawValue\n\t * @returns {number[]}\n\t */\n    static cleanConstructorArg(rawValue) {\n        if (typeof rawValue == \"string\") {\n            if (rawValue.startsWith(\"addr\")) {\n                return Address.fromBech32(rawValue).bytes;\n            } else {\n                if (rawValue.startsWith(\"#\")) {\n                    rawValue = rawValue.slice(1);\n                }\n\n                return hexToBytes(rawValue);\n            }\n        } else {\n            return rawValue;\n        }\n    }\n\n\t/**\n\t * @param {string | number[]} rawValue\n\t */\n\tconstructor(rawValue) {\n\t\tsuper();\n\t\tthis.#bytes = Address.cleanConstructorArg(rawValue);\n\n        assert(this.#bytes.length == 29 || this.#bytes.length == 57, `expected 29 or 57 bytes for Address, got ${this.#bytes.length}`);\n\t}\n\n\tget bytes() {\n\t\treturn this.#bytes.slice();\n\t}\n\n\ttoCbor() {\n\t\treturn CborData.encodeBytes(this.#bytes);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {Address}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new Address(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @param {string} str\n\t * @returns {Address}\n\t */\n\tstatic fromBech32(str) {\n\t\t// ignore the prefix (encoded in the bytes anyway)\n\t\tlet [prefix, bytes] = Crypto.decodeBech32(str);\n\n\t\tlet result = new Address(bytes);\n\n\t\tassert(prefix == (Address.isForTestnet(result) ? \"addr_test\" : \"addr\"), \"invalid Address prefix\");\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Doesn't check validity\n\t * @param {string} hex\n\t * @returns {Address}\n\t */\n\tstatic fromHex(hex) {\n\t\treturn new Address(hexToBytes(hex));\n\t}\n\n\t/**\n\t * Returns the raw Address bytes as a hex encoded string\n\t * @returns {string}\n\t */\n\ttoHex() {\n\t\treturn bytesToHex(this.#bytes);\n\t}\n\n    /**\n     * @param {PubKeyHash | ValidatorHash} hash \n     * @param {?(StakeKeyHash | StakingValidatorHash)} stakingHash \n     * @param {boolean} isTestnet\n     * @returns {Address}\n     */\n    static fromHashes(hash, stakingHash = null, isTestnet = config.IS_TESTNET) {\n        if (hash instanceof PubKeyHash) {\n            return Address.fromPubKeyHash(hash, stakingHash, isTestnet);\n        } else if (hash instanceof ValidatorHash) {\n            return Address.fromValidatorHash(hash, stakingHash, isTestnet);\n        } else {\n            throw new Error(\"unexpected\");\n        }\n    }\n\n\t/**\n\t * Simple payment address without a staking part\n\t * @param {PubKeyHash} hash\n\t * @param {?(StakeKeyHash | StakingValidatorHash)} stakingHash\n     * @param {boolean} isTestnet\n\t * @returns {Address}\n\t */\n\tstatic fromPubKeyHash(hash, stakingHash = null, isTestnet = config.IS_TESTNET) {\n\t\tif (stakingHash !== null) {\n\t\t\tif (stakingHash instanceof StakeKeyHash) {\n\t\t\t\treturn new Address(\n\t\t\t\t\t[isTestnet ? 0x00 : 0x01].concat(hash.bytes).concat(stakingHash.bytes)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tassert(stakingHash instanceof StakingValidatorHash);\n\t\t\t\treturn new Address(\n\t\t\t\t\t[isTestnet ? 0x20 : 0x21].concat(hash.bytes).concat(stakingHash.bytes)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Address([isTestnet ? 0x60 : 0x61].concat(hash.bytes));\n\t\t}\n\t}\n\n\t/**\n\t * Simple script address without a staking part\n\t * Only relevant for validator scripts\n\t * @param {ValidatorHash} hash\n\t * @param {?(StakeKeyHash | StakingValidatorHash)} stakingHash\n     * @param {boolean} isTestnet\n\t * @returns {Address}\n\t */\n\tstatic fromValidatorHash(hash, stakingHash = null, isTestnet = config.IS_TESTNET) {\n\t\tif (stakingHash !== null) {\n\t\t\tif (stakingHash instanceof StakeKeyHash) {\n\t\t\t\treturn new Address(\n\t\t\t\t\t[isTestnet ? 0x10 : 0x11].concat(hash.bytes).concat(stakingHash.bytes)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tassert(stakingHash instanceof StakingValidatorHash);\n\t\t\t\treturn new Address(\n\t\t\t\t\t[isTestnet ? 0x30 : 0x31].concat(hash.bytes).concat(stakingHash.bytes)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Address([isTestnet ? 0x70 : 0x71].concat(hash.bytes));\n\t\t}\n\t}\n\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoBech32() {\n\t\treturn Crypto.encodeBech32(\n\t\t\tAddress.isForTestnet(this) ? \"addr_test\" : \"addr\",\n\t\t\tthis.#bytes\n\t\t);\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\thex: bytesToHex(this.#bytes),\n\t\t\tbech32: this.toBech32(),\n\t\t};\n\t}\n\n\t/**\n\t * @param {Address} address\n\t * @returns {boolean}\n\t */\n\tstatic isForTestnet(address) {\n\t\tlet type = address.bytes[0] & 0b00001111;\n\n\t\treturn type == 0;\n\t}\n\n\t/**\n     * \n     * @private\n\t * @returns {ConstrData}\n\t */\n\ttoCredentialData() {\n\t\tlet vh = this.validatorHash;\n\n\t\tif (vh !== null) {\n\t\t\treturn new ConstrData(1, [new ByteArrayData(vh.bytes)]);\n\t\t} else {\n\t\t\tlet pkh = this.pubKeyHash;\n\n\t\t\tif (pkh === null) {\n\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t} else {\n\t\t\t\treturn new ConstrData(0, [new ByteArrayData(pkh.bytes)]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {ConstrData}\n\t */\n\ttoStakingData() {\n        const type = this.#bytes[0] >> 4;\n\t\tconst sh = this.stakingHash;\n\n\t\tif (sh == null) {\n\t\t\treturn new ConstrData(1, []); // none\n\t\t} else {\n            if (type == 4 || type == 5) {\n                throw new Error(\"not yet implemented\");\n            } else if (type == 3 || type == 2) {\n                // some\n                return new ConstrData(0, [\n                    // staking credential -> 0, 1 -> pointer\n                    new ConstrData(0, [\n                        // StakingValidator credential\n                        new ConstrData(1, [new ByteArrayData(sh.bytes)]),\n                    ]),\n                ]);\n            } else if (type == 0 || type == 1) {\n                // some\n                return new ConstrData(0, [\n                    // staking credential -> 0, 1 -> pointer\n                    new ConstrData(0, [\n                        // StakeKeyHash credential\n                        new ConstrData(0, [new ByteArrayData(sh.bytes)]),\n                    ]),\n                ]);\n            } else {\n                throw new Error(\"unexpected\");\n            }\n\t\t}\n\t}\n\n\t/**\n\t * @returns {UplcData}\n\t */\n\t_toUplcData() {\n\t\treturn new ConstrData(0, [this.toCredentialData(), this.toStakingData()]);\n\t}\n\n    /**\n     * @param {UplcData} data \n     * @param {boolean} isTestnet\n     * @returns {Address}\n     */\n    static fromUplcData(data, isTestnet = config.IS_TESTNET) {\n        assert(data.index == 0);\n        assert(data.fields.length == 2);\n        \n        const credData = data.fields[0];\n        const stakData = data.fields[1];\n\n        assert(credData.fields.length == 1);\n\n        /**\n         * @type {?(StakeKeyHash | StakingValidatorHash)}\n         */\n        let sh;\n\n\t\t// for some weird reason Option::None has index 1\n        if (stakData.index == 1) {\n            sh = null;\n        } else if (stakData.index == 0) {\n            assert(stakData.fields.length == 1);\n\n            const inner = stakData.fields[0];\n            assert(inner.fields.length == 1);\n\n            if (inner.index == 0) {\n                const innerInner = inner.fields[0];\n                assert(innerInner.fields.length == 1);\n\n                if (innerInner.index == 0) {\n                    sh = new StakeKeyHash(innerInner.fields[0].bytes);\n                } else if (innerInner.index == 1) {\n                    sh = new StakingValidatorHash(innerInner.fields[0].bytes);\n                } else {\n                    throw new Error(\"unexpected\");\n                }\n            } else if (inner.index == 1) {\n                throw new Error(\"staking pointer not yet handled\");\n            } else {\n                throw new Error(\"unexpected\");\n            }\n        } else {\n            throw new Error(\"unexpected\");\n        }\n\n        if (credData.index == 0) {\n            return Address.fromPubKeyHash(new PubKeyHash(credData.fields[0].bytes), sh, isTestnet);\n        } else if (credData.index == 1) {\n            return Address.fromValidatorHash(new ValidatorHash(credData.fields[0].bytes), sh, isTestnet);\n        } else {\n            throw new Error(\"unexpected\");\n        }\n    }\n\n    /**\n     * @param {string | number[]} bytes \n     * @param {boolean} isTestnet\n     * @returns {Address}\n     */\n    static fromUplcCbor(bytes, isTestnet = config.IS_TESTNET) {\n        return Address.fromUplcData(UplcData.fromCbor(bytes), isTestnet);\n    }\n\n\t/**\n\t * @type {?PubKeyHash}\n\t */\n\tget pubKeyHash() {\n\t\tlet type = this.#bytes[0] >> 4;\n\n\t\tif (type % 2 == 0) {\n\t\t\treturn new PubKeyHash(this.#bytes.slice(1, 29));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @type {?ValidatorHash}\n\t */\n\tget validatorHash() {\n\t\tlet type = this.#bytes[0] >> 4;\n\n\t\tif (type % 2 == 1) {\n\t\t\treturn new ValidatorHash(this.#bytes.slice(1, 29));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @type {?(StakeKeyHash | StakingValidatorHash)}\n\t */\n\tget stakingHash() {\n\t\tlet type = this.#bytes[0] >> 4;\n\n        let bytes = this.#bytes.slice(29);\n        \n\n        if (type == 0 || type == 1) {\n            assert(bytes.length == 28);\n            return new StakeKeyHash(bytes);\n        } else if (type == 2 || type == 3) {\n            assert(bytes.length == 28);\n            return new StakingValidatorHash(bytes);\n        } else if (type == 4 || type == 5) {\n            throw new Error(\"staking pointer not yet supported\");\n        } else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Used to sort txbody withdrawals\n\t * @param {Address} a\n\t * @param {Address} b\n\t * @return {number}\n\t */\n\tstatic compStakingHashes(a, b) {\n\t\treturn Hash.compare(assertDefined(a.stakingHash), assertDefined(b.stakingHash));\n\t}\n}\n\nclass AssetClass extends HeliosData {\n\t/**\n\t * @type {MintingPolicyHash}\n\t */\n\t#mph;\n\n\t/**\n\t * @type {number[]}\n\t */\n\t#tokenName;\n\n\t/**\n\t * @param {any[]} args\n\t * @returns {[MintingPolicyHash, number[]]}\n\t */\n\tstatic cleanConstructorArgs(args) {\n\t\tif (args.length == 1) {\n\t\t\tconst arg = args[0];\t\n\n\t\t\tif (typeof arg == \"string\") {\n\t\t\t\tconst fields = arg.split(\".\")\n\n\t\t\t\tassert(fields.length == 2, \"expected '.' in hex encoded AssetClass\");\n\n\t\t\t\treturn [new MintingPolicyHash(fields[0]), hexToBytes(fields[1])];\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"unexpected AssetClass arg type\");\n\t\t\t}\n\t\t} else if (args.length == 2) {\n\t\t\tconst arg0 = args[0];\n\t\t\tconst arg1 = args[1];\n\n\t\t\treturn [\n\t\t\t\targ0 instanceof MintingPolicyHash ? arg0 : new MintingPolicyHash(arg0),\n\t\t\t\tArray.isArray(arg1) ? arg1 : hexToBytes(arg1)\n\t\t\t];\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected number of AssetClass args\");\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @param {any[]} args \n\t */\n\tconstructor(...args) {\n\t\tsuper();\n\t\tconst [mph, tokenName] = AssetClass.cleanConstructorArgs(args);\n\n\t\tthis.#mph = mph;\n\t\tthis.#tokenName = tokenName;\n\t}\n\n\t/**\n\t * Used when generating script contexts for running programs\n\t * @returns {ConstrData}\n\t */\n\t_toUplcData() {\n\t\treturn new ConstrData(0, [\n\t\t\tthis.#mph._toUplcData(),\n\t\t\tnew ByteArrayData(this.#tokenName)\n\t\t])\n\t}\n\n\t/**\n\t * \n\t * @param {UplcData} data \n\t * @returns {AssetClass}\n\t */\n\tstatic fromUplcData(data) {\n\t\tassert(data.index == 0);\n\t\tassert(data.fields.length == 2);\n\n\t\tconst mph = MintingPolicyHash.fromUplcData(data.fields[0]);\n\t\tconst tokenName = data.fields[1].bytes;\n\n\t\treturn new AssetClass(mph, tokenName);\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeConstr(0, [\n\t\t\tthis.#mph.toCbor(),\n\t\t\tCborData.encodeBytes(this.#tokenName)\n\t\t]);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t */\n\tstatic fromCbor(bytes) {\n\t\t/**\n\t\t * @type {MintingPolicyHash | null}\n\t\t */\n\t\tlet mph = null;\n\n\t\t/**\n\t\t * @type {number[] | null}\n\t\t */\n\t\tlet tokenName = null;\n\n\t\tconst tag = CborData.decodeConstr(bytes, (i, fieldBytes) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tmph = MintingPolicyHash.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\ttokenName = CborData.decodeBytes(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unexpected field\");\n\t\t\t} \n\t\t});\n\n\t\tassert(tag == 0);\n\n\t\tif (mph == null || tokenName == null) {\n\t\t\tthrow new Error(\"insufficient fields\");\n\t\t} else {\n\t\t\treturn new AssetClass(mph, tokenName);\n\t\t}\n\t}\n\n    /**\n     * @param {string | number[]} bytes\n     * @returns {AssetClass}\n     */\n    static fromUplcCbor(bytes) {\n        return AssetClass.fromUplcData(UplcData.fromCbor(bytes));\n    }\n}\n\n\n/**\n * Collection of non-lovelace assets\n */\nclass Assets extends CborData {\n\t/** @type {[MintingPolicyHash, [number[], bigint][]][]} */\n\t#assets;\n\n\t/**\n\t * @param {[MintingPolicyHash | number[] | string, [number[] | string, bigint | number][]][]} assets \n\t */\n\tconstructor(assets = []) {\n\t\tsuper();\n\t\tthis.#assets = assets.map(([rawMph, tokens]) => {\n\t\t\tconst mph = rawMph instanceof MintingPolicyHash ? rawMph : new MintingPolicyHash(rawMph);\n\n\t\t\treturn [\n\t\t\t\tmph,\n\t\t\t\ttokens.map(([rawName, amount]) => {\n\t\t\t\t\tconst name = Array.isArray(rawName) ? rawName : hexToBytes(rawName);\n\n\t\t\t\t\treturn [name, BigInt(amount)];\n\t\t\t\t})\n\t\t\t];\n\t\t});\n\t}\n\n\t/**\n\t * @type {MintingPolicyHash[]}\n\t */\n\tget mintingPolicies() {\n\t\treturn this.#assets.map(([mph, _]) => mph);\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget nTokenTypes() {\n\t\tlet count = 0;\n\t\t\n\t\tthis.#assets.forEach(([mph, tokens]) => {\n\t\t\ttokens.forEach(([tokenName, _]) => {\n\t\t\t\tcount += 1\n\t\t\t})\n\t\t})\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisZero() {\n\t\treturn this.#assets.length == 0;\n\t}\n\n\t/**\n\t * @param {MintingPolicyHash} mph\n\t * @param {number[]} tokenName \n\t * @returns {boolean}\n\t */\n\thas(mph, tokenName) {\n\t\tlet inner = this.#assets.find(asset => mph.eq(asset[0]));\n\n\t\tif (inner !== undefined) {\n\t\t\treturn inner[1].findIndex(pair => eq(pair[0], tokenName)) != -1;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {MintingPolicyHash} mph\n\t * @param {number[]} tokenName \n\t * @returns {bigint}\n\t */\n\tget(mph, tokenName) {\n\t\tlet inner = this.#assets.find(asset => mph.eq(asset[0]));\n\n\t\tif (inner !== undefined) {\n\t\t\tlet token = inner[1].find(pair => eq(pair[0], tokenName));\n\n\t\t\tif (token !== undefined) {\n\t\t\t\treturn token[1];\n\t\t\t} else {\n\t\t\t\treturn 0n;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0n;\n\t\t}\n\t}\n\n\t/**\n\t * Mutates 'this'\n\t */\n\tremoveZeroes() {\n\t\tfor (let asset of this.#assets) {\n\t\t\tasset[1] = asset[1].filter(token => token[1] != 0n);\n\t\t}\n\n\t\tthis.#assets = this.#assets.filter(asset => asset[1].length != 0);\n\t}\n\n\t/**\n\t * Mutates 'this'\n\t * @param {MintingPolicyHash} mph\n\t * @param {number[]} tokenName \n\t * @param {bigint} quantity\n\t */\n\taddComponent(mph, tokenName, quantity) {\n\t\tif (quantity == 0n) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet inner = this.#assets.find(asset => mph.eq(asset[0]));\n\n\t\tif (inner === undefined) {\n\t\t\tthis.#assets.push([mph, [[tokenName, quantity]]]);\n\t\t} else {\n\t\t\tlet token = inner[1].find(pair => eq(pair[0], tokenName));\n\n\t\t\tif (token === undefined) {\n\t\t\t\tinner[1].push([tokenName, quantity]);\n\t\t\t} else {\n\t\t\t\ttoken[1] += quantity;\n\t\t\t}\n\t\t}\n\n\t\tthis.removeZeroes();\n\t}\n\n\t/**\n\t * @param {Assets} other \n\t * @param {(a: bigint, b: bigint) => bigint} op \n\t * @returns {Assets}\n\t */\n\tapplyBinOp(other, op) {\n\t\tlet res = new Assets();\n\n\t\tfor (let [mph, tokens] of this.#assets) {\n\t\t\tfor (let [tokenName, quantity] of tokens) {\n\t\t\t\tres.addComponent(mph, tokenName, op(quantity, 0n));\n\t\t\t}\n\t\t}\n\n\t\tfor (let [mph, tokens] of other.#assets) {\n\t\t\tfor (let [tokenName, quantity] of tokens) {\n\t\t\t\tres.addComponent(mph, tokenName, op(0n, quantity));\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * @param {Assets} other \n\t * @returns {Assets}\n\t */\n\tadd(other) {\n\t\treturn this.applyBinOp(other, (a, b) => a + b);\n\t}\n\n\t/**\n\t * @param {Assets} other \n\t * @returns {Assets}\n\t */\n\tsub(other) {\n\t\treturn this.applyBinOp(other, (a, b) => a - b);\n\t}\n\n\t/**\n\t * Mutates 'this'\n\t * Throws error if mph is already contained in 'this'\n\t * @param {MintingPolicyHash} mph\n\t * @param {[number[], bigint][]} tokens\n\t */\n\taddTokens(mph, tokens) {\n\t\tfor (let asset of this.#assets) {\n\t\t\tif (asset[0].eq(mph)) {\n\t\t\t\tthrow new Error(`MultiAsset already contains ${bytesToHex(mph.bytes)}`);\n\t\t\t}\n\t\t}\n\n\t\tthis.#assets.push([mph, tokens.slice()]);\n\n\t\t// sort immediately\n\t\tthis.sort();\n\t}\n\n\t/**\n\t * @param {MintingPolicyHash} mph\n\t * @returns {number[][]}\n\t */\n\tgetTokenNames(mph) {\n\t\tfor (let [otherMph, tokens] of this.#assets) {\n\t\t\tif (otherMph.eq(mph)) {\n\t\t\t\treturn tokens.map(([tokenName, _]) => tokenName);\n\t\t\t}\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * @param {Assets} other \n\t * @returns {boolean}\n\t */\n\teq(other) {\n\t\tfor (let asset of this.#assets) {\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tif (token[1] != other.get(asset[0], token[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let asset of other.#assets) {\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tif (token[1] != this.get(asset[0], token[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Strict gt, if other contains assets this one doesn't contain => return false\n\t * @param {Assets} other \n\t * @returns {boolean}\n\t */\n\tgt(other) {\n\t\tif (this.isZero()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let asset of this.#assets) {\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tif (token[1] <= other.get(asset[0], token[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let asset of other.#assets) {\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tif (!this.has(asset[0], token[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Assets} other \n\t * @returns {boolean}\n\t */\n\tge(other) {\n\t\tif (this.isZero()) {\n\t\t\treturn other.isZero();\n\t\t}\n\n\t\tfor (let asset of this.#assets) {\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tif (token[1] < other.get(asset[0], token[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let asset of other.#assets) {\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tif (!this.has(asset[0], token[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tallPositive() {\n\t\tfor (let asset of this.#assets) {\n\t\t\tfor (let pair of asset[1]) {\n\t\t\t\tif (pair[1] < 0n) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (pair[1] == 0n) {\n\t\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Throws an error if any contained quantity <= 0n\n\t */\n\tassertAllPositive() {\n\t\tassert(this.allPositive(), \"non-positive token amounts detected\");\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeMap(\n\t\t\tthis.#assets.map(\n\t\t\t\touterPair => {\n\t\t\t\t\treturn [outerPair[0].toCbor(), CborData.encodeMap(outerPair[1].map(\n\t\t\t\t\t\tinnerPair => {\n\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\tCborData.encodeBytes(innerPair[0]), CborData.encodeInteger(innerPair[1])\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t))]\n\t\t\t\t}\n\t\t\t)\n\t\t)\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {Assets}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tlet ms = new Assets();\n\n\t\tCborData.decodeMap(bytes, (_, pairBytes) => {\n\t\t\tlet mph = MintingPolicyHash.fromCbor(pairBytes);\n\n\t\t\t/**\n\t\t\t * @type {[number[], bigint][]}\n\t\t\t */\n\t\t\tlet innerMap = [];\n\t\t\t\n\t\t\tCborData.decodeMap(pairBytes, (_, innerPairBytes) => {\n\t\t\t\tinnerMap.push([\n\t\t\t\t\tCborData.decodeBytes(innerPairBytes),\n\t\t\t\t\tCborData.decodeInteger(innerPairBytes),\n\t\t\t\t]);\n\t\t\t});\n\n\t\t\tms.#assets.push([mph, innerMap]);\n\t\t});\n\n\t\treturn ms;\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\tlet obj = {};\n\n\t\tfor (let [mph, tokens] of this.#assets) {\n\t\t\tlet innerObj = {};\n\n\t\t\tfor (let [tokenName, quantity] of tokens) {\n\t\t\t\tinnerObj[bytesToHex(tokenName)] = quantity.toString();\n\t\t\t}\n\n\t\t\tobj[mph.dump()] = innerObj;\n\t\t}\n\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Used when generating script contexts for running programs\n\t * @returns {MapData}\n\t */\n\t_toUplcData() {\n\t\t/** @type {[UplcData, UplcData][]} */\n\t\tlet pairs = [];\n\n\t\tfor (let asset of this.#assets) {\n\t\t\t/** @type {[UplcData, UplcData][]} */\n\t\t\tlet innerPairs = [];\n\n\t\t\tfor (let token of asset[1]) {\n\t\t\t\tinnerPairs.push([\n\t\t\t\t\tnew ByteArrayData(token[0]),\n\t\t\t\t\tnew IntData(token[1]),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tpairs.push([\n\t\t\t\tnew ByteArrayData(asset[0].bytes),\n\t\t\t\tnew MapData(innerPairs),\n\t\t\t])\n\t\t}\n\n\t\treturn new MapData(pairs);\n\t}\n\n\t/**\n\t * Makes sure minting policies are in correct order\n\t * Mutates 'this'\n\t * Order of tokens per mintingPolicyHash isn't changed\n\t */\n\tsort() {\n\t\tthis.#assets.sort((a, b) => {\n\t\t\treturn Hash.compare(a[0], b[0]);\n\t\t});\n\t}\n\n\tassertSorted() {\n\t\tthis.#assets.forEach((b, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tconst a = this.#assets[i-1];\n\n\t\t\t\tassert(Hash.compare(a[0], b[0]) == -1, \"assets not sorted\")\n\t\t\t}\n\t\t})\n\t}\n}\n\nclass Value extends HeliosData {\n\t/** @type {bigint} */\n\t#lovelace;\n\n\t/** @type {Assets} */\n\t#assets;\n\t\n\t/**\n\t * @param {bigint} lovelace \n\t * @param {Assets} assets \n\t */\n\tconstructor(lovelace = 0n, assets = new Assets()) {\n\t\tsuper();\n\t\tthis.#lovelace = lovelace;\n\t\tthis.#assets = assets;\n\t}\n\n\t/**\n\t * @param {MintingPolicyHash} mph \n\t * @param {number[]} tokenName \n\t * @param {bigint} quantity \n\t * @returns {Value}\n\t */\n\tstatic asset(mph, tokenName, quantity) {\n\t\treturn new Value(0n, new Assets([\n\t\t\t[mph, [\n\t\t\t\t[tokenName, quantity]\n\t\t\t]]\n\t\t]));\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget lovelace() {\n\t\treturn this.#lovelace;\n\t}\n\n\t/**\n\t * Setter for lovelace\n\t * Note: mutation is handy when balancing transactions\n\t * @param {bigint} lovelace\n\t */\n\tsetLovelace(lovelace) {\n\t\tthis.#lovelace = lovelace;\n\t}\n\n\t/**\n\t * @type {Assets}\n\t */\n\tget assets() {\n\t\treturn this.#assets;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\tif (this.#assets.isZero()) {\n\t\t\treturn CborData.encodeInteger(this.#lovelace);\n\t\t} else {\n\t\t\treturn CborData.encodeTuple([\n\t\t\t\tCborData.encodeInteger(this.#lovelace),\n\t\t\t\tthis.#assets.toCbor()\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {Value}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tlet mv = new Value();\n\n\t\tif (CborData.isTuple(bytes)) {\n\t\t\tCborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\t\tswitch(i) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tmv.#lovelace = CborData.decodeInteger(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tmv.#assets = Assets.fromCbor(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tmv.#lovelace = CborData.decodeInteger(bytes);\n\t\t}\n\n\t\treturn mv;\n\t}\n\n\t/**\n\t * @param {Value[]} values \n\t * @returns {Value}\n\t */\n\tstatic sum(values) {\n\t\tlet s = new Value(0n);\n\n\t\tvalues.forEach(v => {\n\t\t\ts = s.add(v);\n\t\t});\n\n\t\treturn s;\n\t}\n\t\n\t/**\n\t * @param {Value} other \n\t * @returns {Value}\n\t */\n\tadd(other) {\n\t\treturn new Value(this.#lovelace + other.#lovelace, this.#assets.add(other.#assets));\n\t}\n\n\t/**\n\t * @param {Value} other \n\t * @returns {Value}\n\t */\n\tsub(other) {\n\t\treturn new Value(this.#lovelace - other.#lovelace, this.#assets.sub(other.#assets));\n\t}\n\n\t/**\n\t * @param {Value} other \n\t * @returns {boolean}\n\t */\n\teq(other) {\n\t\treturn (this.#lovelace == other.#lovelace) && (this.#assets.eq(other.#assets));\n\t}\n\n\t/**\n\t * Strictly greater than. Returns false if any asset is missing \n\t * @param {Value} other \n\t * @returns {boolean}\n\t */\n\tgt(other) {\n\t\treturn (this.#lovelace > other.#lovelace) && (this.#assets.gt(other.#assets));\n\t}\n\n\t/**\n\t * Strictly >= \n\t * @param {Value} other \n\t * @returns {boolean}\n\t */\n\tge(other) {\n\t\treturn (this.#lovelace >= other.#lovelace) && (this.#assets.ge(other.#assets));\n\t}\n\n\t/**\n\t * Throws an error if any contained quantity is negative\n\t * Used when building transactions because transactions can't contain negative values\n\t * @returns {Value} - returns this\n\t */\n\tassertAllPositive() {\n\t\tassert(this.#lovelace >= 0n);\n\n\t\tthis.#assets.assertAllPositive();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\tlovelace: this.#lovelace.toString(),\n\t\t\tassets: this.#assets.dump()\n\t\t};\n\t}\n\n\t/**\n\t * Used when building script context\n\t * @param {boolean} isInScriptContext\n\t * @returns {MapData}\n\t */\n\t_toUplcData(isInScriptContext = false) {\n\t\tlet map = this.#assets._toUplcData();\n\n\t\tif (this.#lovelace != 0n || isInScriptContext) {\n\t\t\tlet inner = map.map; \n\n\t\t\tinner.unshift([\n\t\t\t\tnew ByteArrayData([]),\n\t\t\t\tnew MapData([\n\t\t\t\t\t[new ByteArrayData([]), new IntData(this.#lovelace)]\n\t\t\t\t]),\n\t\t\t]);\n\n\t\t\t// 'inner' is copy, so mutating won't change the original\n\t\t\tmap = new MapData(inner);\n\t\t}\n\n\t\treturn map;\n\t}\n\n\t/**\n\t * Useful when deserializing inline datums\n\t * @param {UplcData} data\n\t * @returns {Value}\n\t */\n\tstatic fromUplcData(data) {\n\t\tlet sum = new Value();\n\n\t\tlet outerMap = data.map;\n\n\t\tfor (let [mphData, tokensData] of outerMap) {\n\t\t\tlet mphBytes = mphData.bytes;\n\n\t\t\tlet innerMap = tokensData.map;\n\n\t\t\tif (mphBytes.length == 0) {\n\t\t\t\t//lovelace\n\t\t\t\tassert(innerMap.length == 1 && innerMap[0][0].bytes.length == 0); \n\t\t\t\tsum = sum.add(new Value(innerMap[0][1].int));\n\t\t\t} else {\n\t\t\t\t// other assets\n\t\t\t\tlet mph = new MintingPolicyHash(mphBytes);\n\n\t\t\t\tfor (let [tokenNameData, quantityData] of innerMap) {\n\t\t\t\t\tlet tokenName = tokenNameData.bytes;\n\t\t\t\t\tlet quantity = quantityData.int;\n\n\t\t\t\t\tsum = sum.add(Value.asset(mph, tokenName, quantity));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\t/**\n\t * @param {string | number[]} bytes \n\t * @returns {Value}\n\t */\n\tstatic fromUplcCbor(bytes) {\n\t\treturn Value.fromUplcData(UplcData.fromCbor(bytes));\n\t}\n}\n\n\n//////////////////////////////\n// Section 8: Uplc cost-models\n//////////////////////////////\n\n/**\n * @typedef {Object} Cost\n * @property {bigint} mem\n * @property {bigint} cpu\n */\n\n/**\n * NetworkParams contains all protocol parameters. These are needed to do correct, up-to-date, cost calculations.\n */\nclass NetworkParams {\n\t#raw;\n\n\t/**\n\t * @param {Object} raw \n\t */\n\tconstructor(raw) {\n\t\tthis.#raw = raw;\n\t}\n\t\n    /**\n     * @package\n     * @type {Object}\n     */\n\tget costModel() {\n\t\treturn assertDefined(this.#raw?.latestParams?.costModels?.PlutusScriptV2, \"'obj.latestParams.costModels.PlutusScriptV2' undefined\");\n\t}\n\n\t/**\n     * @package\n\t * @param {string} key \n\t * @returns {number}\n\t */\n\tgetCostModelParameter(key) {\n\t\treturn assertNumber(this.costModel[key], `'obj.${key}' undefined`);\n\t}\n\n\t/**\n     * @package\n\t * @param {string} name \n\t * @returns {Cost}\n\t */\n\tgetTermCost(name) {\n\t\tlet memKey = `cek${name}Cost-exBudgetMemory`;\n\t\tlet cpuKey = `cek${name}Cost-exBudgetCPU`;\n\n\t\treturn {\n\t\t\tmem: BigInt(assertNumber(this.costModel[memKey], `'obj.${memKey}' undefined`)),\n\t\t\tcpu: BigInt(assertNumber(this.costModel[cpuKey], `'obj.${cpuKey}' undefined`)),\n\t\t};\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreStartupCost() {\n\t\treturn this.getTermCost(\"Startup\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreVariableCost() {\n\t\treturn this.getTermCost(\"Var\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreLambdaCost() {\n\t\treturn this.getTermCost(\"Lam\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreDelayCost() {\n\t\treturn this.getTermCost(\"Delay\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreCallCost() {\n\t\treturn this.getTermCost(\"Apply\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreConstCost() {\n\t\treturn this.getTermCost(\"Const\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreForceCost() {\n\t\treturn this.getTermCost(\"Force\");\n\t}\n\n\t/**\n     * @package\n\t * @type {Cost}\n\t */\n\tget plutusCoreBuiltinCost() {\n\t\treturn this.getTermCost(\"Builtin\");\n\t}\n\n\t/**\n     * @package\n\t * @type {[number, number]} - a + b*size\n\t */\n\tget txFeeParams() {\n\t\treturn [\n\t\t\tassertNumber(this.#raw?.latestParams?.txFeeFixed),\n\t\t\tassertNumber(this.#raw?.latestParams?.txFeePerByte),\n\t\t];\n\t}\n\n\t/**\n     * @package\n\t * @type {[number, number]} - [memFee, cpuFee]\n\t */\n\tget exFeeParams() {\n\t\treturn [\n\t\t\tassertNumber(this.#raw?.latestParams?.executionUnitPrices?.priceMemory),\n\t\t\tassertNumber(this.#raw?.latestParams?.executionUnitPrices?.priceSteps),\n\t\t];\n\t}\n\t\n\t/**\n     * @package\n\t * @type {number[]}\n\t */\n\tget sortedCostParams() {\n\t\tlet baseObj = this.#raw?.latestParams?.costModels?.PlutusScriptV2;\n\t\tlet keys = Object.keys(baseObj);\n\n\t\tkeys.sort();\n\n\t\treturn keys.map(key => assertNumber(baseObj[key]));\n\t}\n\n\t/**\n     * @package\n\t * @type {number}\n\t */\n\tget lovelacePerUTXOByte() {\n\t\treturn assertNumber(this.#raw?.latestParams?.utxoCostPerByte);\n\t}\n\n\t/**\n     * @package\n\t * @type {number}\n\t */\n\tget minCollateralPct() {\n\t\treturn assertNumber(this.#raw?.latestParams?.collateralPercentage);\n\t}\n\n\t/**\n     * @package\n\t * @type {number}\n\t */\n\tget maxCollateralInputs() {\n\t\treturn assertNumber(this.#raw?.latestParams?.maxCollateralInputs);\n\t}\n\n\t/**\n     * @package\n\t * @type {[number, number]} - [mem, cpu]\n\t */\n\tget maxTxExecutionBudget() {\n\t\treturn [\n\t\t\tassertNumber(this.#raw?.latestParams?.maxTxExecutionUnits?.memory),\n\t\t\tassertNumber(this.#raw?.latestParams?.maxTxExecutionUnits?.steps),\n\t\t];\n\t}\n\n\t/**\n     * @package\n\t * @type {number}\n\t */\n\tget maxTxSize() {\n\t\treturn assertNumber(this.#raw?.latestParams?.maxTxSize);\n\t}\n\n\t/**\n\t * @package\n\t * @type {bigint}\n\t */\n\tget maxTxFee() {\n\t\tconst [a, b] = this.txFeeParams;\n\t\tconst [feePerMem, feePerCpu] = this.exFeeParams;\n\t\tconst [maxMem, maxCpu] = this.maxTxExecutionBudget;\n\n\t\treturn BigInt(a) + BigInt(Math.ceil(b*this.maxTxSize)) + BigInt(Math.ceil(feePerMem*maxMem)) + BigInt(Math.ceil(feePerCpu*maxCpu));\n\t}\n\n\t/**\n\t * Use the latest slot in networkParameters to determine time.\n     * @package\n\t * @param {bigint} slot\n\t * @returns {bigint}\n\t */\n\tslotToTime(slot) {\n\t\tlet secondsPerSlot = assertNumber(this.#raw?.shelleyGenesis?.slotLength);\n\n\t\tlet lastSlot = BigInt(assertNumber(this.#raw?.latestTip?.slot));\n\t\tlet lastTime = BigInt(assertNumber(this.#raw?.latestTip?.time));\n\n\t\tlet slotDiff = slot - lastSlot;\n\n\t\treturn lastTime + slotDiff*BigInt(secondsPerSlot*1000);\n\t}\n\n\t/**\n\t * Use the latest slot in network parameters to determine slot.\n     * @package\n\t * @param {bigint} time - milliseconds since 1970\n\t * @returns {bigint}\n\t */\n\ttimeToSlot(time) {\n\t\tlet secondsPerSlot = assertNumber(this.#raw?.shelleyGenesis?.slotLength);\n\n\t\tlet lastSlot = BigInt(assertNumber(this.#raw?.latestTip?.slot));\n\t\tlet lastTime = BigInt(assertNumber(this.#raw?.latestTip?.time));\n\n\t\tlet timeDiff = time - lastTime;\n\n\t\treturn lastSlot + BigInt(Math.round(Number(timeDiff)/(1000*secondsPerSlot)));\n\t}\n}\n\n/**\n * Each builtin has an associated CostModel.\n * The CostModel calculates the execution cost of a builtin, depending on the byte-size of the inputs.\n * @package\n */\nclass CostModel {\n\tconstructor() {\n\t}\n\n\t/**\n\t * @param {NetworkParams} params\n\t * @param {string} baseName\n\t * @returns {CostModel}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {number[]} args \n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * A simple constant cost, independent of arg size.\n * @package\n */\nclass ConstCost extends CostModel {\n\t#constant;\n\n\t/**\n\t * @param {bigint} constant\n\t */\n\tconstructor(constant) {\n\t\tsuper();\n\t\tthis.#constant = constant;\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {ConstCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet a = params.getCostModelParameter(`${baseName}`);\n\n\t\treturn new ConstCost(BigInt(a));\n\t}\n\n\t/**\n\t * @param {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\treturn this.#constant;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\treturn `const: ${this.#constant.toString()}`;\n\t}\n}\n\n/**\n * cost = a + b*size(arg)\n * @package\n */\nclass LinearCost extends CostModel {\n\t#a;\n\t#b;\n\n\t/**\n\t * a + b*SizeFn(x, y)\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tthis.#a = a;\n\t\tthis.#b = b;\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {[bigint, bigint]}\n\t */\n\tstatic getParams(params, baseName) {\n\t\tlet a = params.getCostModelParameter(`${baseName}-intercept`);\n\t\tlet b = params.getCostModelParameter(`${baseName}-slope`);\n\n\t\treturn [BigInt(a), BigInt(b)];\n\t}\n\n\t/**\n\t * @param  {number} size\n\t * @returns {bigint}\n\t */\n\tcalcInternal(size) {\n\t\treturn this.#a + this.#b*BigInt(size);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\treturn `intercept: ${this.#a.toString()}, slope: ${this.#b.toString()}`;\n\t}\n}\n\n/**\n * cost = a + b*size(args[i])\n * @package\n */\nclass ArgSizeCost extends LinearCost {\n\t#i;\n\n\t/**\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t * @param {number} i - index of the arg\n\t */\n\tconstructor(a, b, i) {\n\t\tsuper(a, b);\n\t\tthis.#i = i;\n\t}\n\n\t/**\n\t * @param {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\tassert(this.#i < args.length && this.#i >= 0);\n\n\t\treturn this.calcInternal(args[this.#i]);\n\t}\n}\n\n/**\n * cost = a + b*size(arg0)\n * @package\n */\nclass Arg0SizeCost extends ArgSizeCost {\n\t/**\n\t * @param {bigint} a \n\t * @param {bigint} b \n\t */\n\tconstructor(a, b) {\n\t\tsuper(a, b, 0);\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {Arg0SizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\n\t\treturn new Arg0SizeCost(a, b);\n\t}\n}\n\n/**\n * cost = a + b*size(arg1)\n * @package\n */\nclass Arg1SizeCost extends ArgSizeCost {\n\t/**\n\t * @param {bigint} a \n\t * @param {bigint} b \n\t */\n\tconstructor(a, b) {\n\t\tsuper(a, b, 1);\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {Arg1SizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\n\t\treturn new Arg1SizeCost(a, b);\n\t}\n}\n\n/**\n * cost = a + b*size(arg2)\n * @package\n */\nclass Arg2SizeCost extends ArgSizeCost {\n\t/**\n\t * @param {bigint} a \n\t * @param {bigint} b \n\t */\n\tconstructor(a, b) {\n\t\tsuper(a, b, 2);\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {Arg2SizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\n\t\treturn new Arg2SizeCost(a, b);\n\t}\n}\n\n/**\n * cost = a + b*min(args)\n * @package\n */\nclass MinArgSizeCost extends LinearCost {\n\t/**\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t */\n\tconstructor(a, b) {\n\t\tsuper(a, b);\n\t}\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {MaxArgSizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\n\t\treturn new MinArgSizeCost(a, b);\n\t}\n\n\t/**\n\t * @param  {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\treturn this.calcInternal(Math.min(...args));\n\t}\n}\n\n/**\n * cost = a + b*max(args)\n * @package\n */\nclass MaxArgSizeCost extends LinearCost {\n\t/**\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t */\n\tconstructor(a, b) {\n\t\tsuper(a, b);\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {MaxArgSizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\n\t\treturn new MaxArgSizeCost(a, b);\n\t}\n\n\t/**\n\t * @param  {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\treturn this.calcInternal(Math.max(...args));\n\t}\n}\n\n/**\n * cost = a + b*sum(sizes(args))\n * @package\n */\nclass SumArgSizesCost extends LinearCost {\n\t/**\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t */\n\tconstructor(a, b) {\n\t\tsuper(a, b);\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {MaxArgSizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\n\t\treturn new SumArgSizesCost(a, b);\n\t}\n\n\t/**\n\t * @param  {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\tlet sum = 0;\n\n\t\tfor (let arg of args) {\n\t\t\tsum += arg;\n\t\t}\n\n\t\treturn this.calcInternal(sum);\n\t}\n}\n\n/**\n * cost = a + b*max(size(arg0)-size(arg1), min)\n * (only for Uplc functions with two arguments) \n * @package\n */\nclass ArgSizeDiffCost extends LinearCost {\n\t#min;\n\n\t/**\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t * @param {number} min\n\t */\n\tconstructor(a, b, min) {\n\t\tsuper(a, b);\n\t\tthis.#min = min\n\t}\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {ArgSizeDiffCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tlet [a, b] = LinearCost.getParams(params, baseName);\n\t\tlet min = params.getCostModelParameter(`${baseName}-minimum`);\n\n\t\treturn new ArgSizeDiffCost(a, b, min);\n\t}\n\n\t/**\n\t * @param {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\tassert(args.length == 2);\n\t\tlet [x, y] = args;\n\n\t\treturn this.calcInternal(Math.max(x - y, this.#min));\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\treturn super.dump() + `, minimum: ${this.#min.toString()}`;\n\t}\n}\n\n/**\n * cost = (size(arg0) > size(arg1)) ? constant : a + b*size(arg0)*size(arg1)\n * (only for Uplc functions with two arguments)\n * @package\n */\nclass ArgSizeProdCost extends LinearCost {\n\t#constant;\n\n\t/**\n\t * @param {bigint} a - intercept\n\t * @param {bigint} b - slope\n\t * @param {bigint} constant\n\t */\n\tconstructor(a, b, constant) {\n\t\tsuper(a, b);\n\t\tthis.#constant = constant;\n\t}\n\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {MaxArgSizeCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tconst [a, b] = LinearCost.getParams(params, `${baseName}-model-arguments`);\n\t\tconst constant = params.getCostModelParameter(`${baseName}-constant`);\n\n\t\treturn new ArgSizeProdCost(a, b, BigInt(constant));\n\t}\n\n\t/**\n\t * @param {number[]} args\n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\tassert(args.length == 2);\n\t\t\n\t\tconst [x, y] = args;\n\n\t\tif (x > y) {\n\t\t\treturn this.#constant;\n\t\t} else {\n\t\t\treturn this.calcInternal(x*y);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\treturn super.dump() + `, constant: ${this.#constant.toString()}`;\n\t}\n}\n\n/**\n * cost = (size(arg0) != size(arg1)) ? constant : a + b*size(arg0)\n * (only for Uplc functions with two arguments)\n * @package\n */\nclass ArgSizeDiagCost extends LinearCost {\n\t#constant;\n\n\t/**\n\t * @param {bigint} a\n\t * @param {bigint} b\n\t * @param {bigint} constant\n\t */\n\tconstructor(a, b, constant) {\n\t\tsuper(a, b);\n\t\tthis.#constant = constant;\n\t}\n\t/**\n\t * @param {NetworkParams} params \n\t * @param {string} baseName - eg. addInteger-cpu-arguments\n\t * @returns {ArgSizeDiagCost}\n\t */\n\tstatic fromParams(params, baseName) {\n\t\tconst [a, b] = LinearCost.getParams(params, baseName);\n\t\tconst constant = params.getCostModelParameter(`${baseName}-constant`);\n\n\t\treturn new ArgSizeDiagCost(a, b, BigInt(constant));\n\t}\n\n\t/**\n\t * @param {number[]} args \n\t * @returns {bigint}\n\t */\n\tcalc(args) {\n\t\tassert(args.length == 2);\n\n\t\tif (args[0] == args[1]) {\n\t\t\treturn this.calcInternal(args[0]);\n\t\t} else {\n\t\t\treturn this.#constant;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tdump() {\n\t\treturn super.dump() + `, constant: ${this.#constant.toString()}`;\n\t}\n}\n\n/**\n * @typedef CostModelClass\n * @property {(params: NetworkParams, baseName: string) => CostModel} fromParams\n */\n\n\n/////////////////////////////////////\n// Section 9: Uplc built-in functions\n/////////////////////////////////////\n\n/**\n * Cost-model configuration of UplcBuiltin.\n * Also specifies the number of times a builtin must be 'forced' before being callable.\n * @package\n */\n class UplcBuiltinConfig {\n\t#name;\n\t#forceCount;\n\t#memCostModelClass;\n\t#cpuCostModelClass;\n\n\t/**\n\t * @param {string} name \n\t * @param {number} forceCount - number of type parameters of a Plutus-core builtin function (0, 1 or 2)\n\t * @param {CostModelClass} memCostModelClass \n\t * @param {CostModelClass} cpuCostModelClass \n\t */\n\tconstructor(name, forceCount, memCostModelClass, cpuCostModelClass) {\n\t\tthis.#name = name;\n\t\tthis.#forceCount = forceCount;\n\t\tthis.#memCostModelClass = memCostModelClass;\n\t\tthis.#cpuCostModelClass = cpuCostModelClass;\n\t}\n\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\tget forceCount() {\n\t\treturn this.#forceCount;\n\t}\n\n\t/**\n\t * @param {NetworkParams} params\n\t * @returns {[CostModel, CostModel]}\n\t */\n\tinstantiateCostModels(params) {\n\t\tif (this.#memCostModelClass !== null && this.#cpuCostModelClass !== null) {\n\t\t\tlet memCostModel = this.#memCostModelClass.fromParams(params, `${this.#name}-memory-arguments`);\n\t\t\tlet cpuCostModel = this.#cpuCostModelClass.fromParams(params, `${this.#name}-cpu-arguments`);\n\n\t\t\treturn [memCostModel, cpuCostModel];\n\t\t} else {\n\t\t\tthrow new Error(`cost model not yet implemented for builtin ${this.#name}`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {NetworkParams} params\n\t * @param {number[]} argSizes\n\t * @returns {Cost}\n\t */\n\tcalcCost(params, argSizes) {\n\t\t// Note: instantiating everytime might be slow. Should this be cached (eg. in the params object?)?\n\t\tconst [memCostModel, cpuCostModel] = this.instantiateCostModels(params);\n\n\t\tconst memCost = memCostModel.calc(argSizes);\n\t\tconst cpuCost = cpuCostModel.calc(argSizes);\n\n\t\treturn {mem: memCost, cpu: cpuCost};\n\t}\n\n\t/**\n\t * @param {NetworkParams} params\n\t */\n\tdumpCostModel(params) {\n\t\tconst [memCostModel, cpuCostModel] = this.instantiateCostModels(params);\n\n\t\tconsole.log(`${this.name}-memory-arguments={${memCostModel.dump()},\\n${this.name}-cpu-arguments={${cpuCostModel.dump()}}`);\n\t}\n}\n\n/** \n * A list of all PlutusScript builins, with associated costmodels (actual costmodel parameters are loaded from NetworkParams during runtime)\n * @package\n * @type {UplcBuiltinConfig[]} \n */\nconst UPLC_BUILTINS = (\n\t/**\n\t * @returns {UplcBuiltinConfig[]}\n\t */\n\tfunction () {\n\t\t/**\n\t\t * Constructs a builtinInfo object\n\t\t * @param {string} name \n\t\t * @param {number} forceCount \n\t\t * @param {CostModelClass} memCostModel\n\t\t * @param {CostModelClass} cpuCostModel\n\t\t * @returns {UplcBuiltinConfig}\n\t\t */\n\t\tfunction builtinConfig(name, forceCount, memCostModel, cpuCostModel) {\n\t\t\t// builtins might need be wrapped in `force` a number of times if they are not fully typed\n\t\t\treturn new UplcBuiltinConfig(name, forceCount, memCostModel, cpuCostModel);\n\t\t}\n\n\t\treturn [\n\t\t\tbuiltinConfig(\"addInteger\",               0, MaxArgSizeCost, MaxArgSizeCost), // 0\n\t\t\tbuiltinConfig(\"subtractInteger\",          0, MaxArgSizeCost, MaxArgSizeCost),\n\t\t\tbuiltinConfig(\"multiplyInteger\",          0, SumArgSizesCost, SumArgSizesCost),\n\t\t\tbuiltinConfig(\"divideInteger\",            0, ArgSizeDiffCost, ArgSizeProdCost),\n\t\t\tbuiltinConfig(\"quotientInteger\",          0, ArgSizeDiffCost, ArgSizeProdCost), \n\t\t\tbuiltinConfig(\"remainderInteger\",         0, ArgSizeDiffCost, ArgSizeProdCost),\n\t\t\tbuiltinConfig(\"modInteger\",               0, ArgSizeDiffCost, ArgSizeProdCost),\n\t\t\tbuiltinConfig(\"equalsInteger\",            0, ConstCost, MinArgSizeCost),\n\t\t\tbuiltinConfig(\"lessThanInteger\",          0, ConstCost, MinArgSizeCost),\n\t\t\tbuiltinConfig(\"lessThanEqualsInteger\",    0, ConstCost, MinArgSizeCost),\n\t\t\tbuiltinConfig(\"appendByteString\",         0, SumArgSizesCost, SumArgSizesCost), // 10\n\t\t\tbuiltinConfig(\"consByteString\",           0, SumArgSizesCost, Arg1SizeCost),\n\t\t\tbuiltinConfig(\"sliceByteString\",          0, Arg2SizeCost, Arg2SizeCost),\n\t\t\tbuiltinConfig(\"lengthOfByteString\",       0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"indexByteString\",          0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"equalsByteString\",         0, ConstCost, ArgSizeDiagCost),\n\t\t\tbuiltinConfig(\"lessThanByteString\",       0, ConstCost, MinArgSizeCost),\n\t\t\tbuiltinConfig(\"lessThanEqualsByteString\", 0, ConstCost, MinArgSizeCost),\n\t\t\tbuiltinConfig(\"sha2_256\",                 0, ConstCost, Arg0SizeCost),\n\t\t\tbuiltinConfig(\"sha3_256\",                 0, ConstCost, Arg0SizeCost),\n\t\t\tbuiltinConfig(\"blake2b_256\",              0, ConstCost, Arg0SizeCost), // 20\n\t\t\tbuiltinConfig(\"verifyEd25519Signature\",   0, ConstCost, Arg2SizeCost),\n\t\t\tbuiltinConfig(\"appendString\",             0, SumArgSizesCost, SumArgSizesCost),\n\t\t\tbuiltinConfig(\"equalsString\",             0, ConstCost, ArgSizeDiagCost),\n\t\t\tbuiltinConfig(\"encodeUtf8\",               0, Arg0SizeCost, Arg0SizeCost),\n\t\t\tbuiltinConfig(\"decodeUtf8\",               0, Arg0SizeCost, Arg0SizeCost),\n\t\t\tbuiltinConfig(\"ifThenElse\",               1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"chooseUnit\",               1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"trace\",                    1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"fstPair\",                  2, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"sndPair\",                  2, ConstCost, ConstCost), // 30\n\t\t\tbuiltinConfig(\"chooseList\",               2, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"mkCons\",                   1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"headList\",                 1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"tailList\",                 1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"nullList\",                 1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"chooseData\",               1, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"constrData\",               0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"mapData\",                  0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"listData\",                 0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"iData\",                    0, ConstCost, ConstCost), // 40\n\t\t\tbuiltinConfig(\"bData\",                    0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"unConstrData\",             0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"unMapData\",                0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"unListData\",               0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"unIData\",                  0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"unBData\",                  0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"equalsData\",               0, ConstCost, MinArgSizeCost),\n\t\t\tbuiltinConfig(\"mkPairData\",               0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"mkNilData\",                0, ConstCost, ConstCost),\n\t\t\tbuiltinConfig(\"mkNilPairData\",            0, ConstCost, ConstCost), // 50\n\t\t\tbuiltinConfig(\"serialiseData\",            0, Arg0SizeCost, Arg0SizeCost),\n\t\t\tbuiltinConfig(\"verifyEcdsaSecp256k1Signature\",   0, ConstCost, ConstCost), // these parameters are from aiken, but the cardano-cli parameter file differ?\n\t\t\tbuiltinConfig(\"verifySchnorrSecp256k1Signature\", 0, ConstCost, Arg1SizeCost), // these parameters are from, but the cardano-cli parameter file differs?\n\t\t];\n\t}\n)();\n\n/**\n * Use this function to check cost-model parameters\n * @package\n * @param {NetworkParams} networkParams\n */\nfunction dumpCostModels(networkParams) {\n\tfor (let builtin of UPLC_BUILTINS) {\n\t\tbuiltin.dumpCostModel(networkParams);\n\t}\n}\n\n/**\n * Returns index of a named builtin\n * Throws an error if builtin doesn't exist\n * @param {string} name \n * @returns \n */\nfunction findUplcBuiltin(name) {\n\tlet i = UPLC_BUILTINS.findIndex(info => { return \"__core__\" + info.name == name });\n\tassert(i != -1, `${name} is not a real builtin`);\n\treturn i;\n}\n\n/**\n * Checks if a named builtin exists\n * @param {string} name \n * @param {boolean} strict - if true then throws an error if builtin doesn't exist\n * @returns {boolean}\n */\nfunction isUplcBuiltin(name, strict = false) {\n\tif (name.startsWith(\"__core\")) {\n\t\tif (strict) {\n\t\t\tvoid this.findBuiltin(name); // assert that builtin exists\n\t\t}\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n///////////////////////\n// Section 10: Uplc AST\n///////////////////////\n\n\n/**\n * A Helios/Uplc Program can have different purposes\n * @package\n */\nconst ScriptPurpose = {\n\tTesting: -1,\n\tMinting:  0,\n\tSpending: 1,\n\tStaking:  2,\n\tModule:   3\n};\n\n/**\n * @package\n * @param {number} id\n * @returns {string}\n */\nfunction getPurposeName(id) {\n\tswitch (id) {\n\t\tcase ScriptPurpose.Testing:\n\t\t\treturn \"testing\";\n\t\tcase ScriptPurpose.Minting:\n\t\t\treturn \"minting\";\n\t\tcase ScriptPurpose.Spending:\n\t\t\treturn \"spending\";\n\t\tcase ScriptPurpose.Staking:\n\t\t\treturn \"staking\";\n\t\tcase ScriptPurpose.Module:\n\t\t\treturn \"module\";\n\t\tdefault:\n\t\t\tthrow new Error(`unhandled ScriptPurpose ${id}`);\n\t}\n}\n\n\n/** \n * a UplcValue is passed around by Plutus-core expressions.\n */\nclass UplcValue {\n\t#site;\n\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tassert(site != undefined && (site instanceof Site));\n\t\tthis.#site = site;\n\t}\n\n\t/**\n\t * Return a copy of the UplcValue at a different Site.\n     * @package\n\t * @param {Site} newSite \n\t * @returns {UplcValue}\n\t */\n\tcopy(newSite) {\n\t\tthrow new Error(\"not implemented\");\n\t}\n\n    /**\n     * @package\n     * @type {Site}\n     */\n\tget site() {\n\t\treturn this.#site;\n\t}\n\n\t/**\n\t * @package\n\t * @type {number}\n\t */\n\tget length() {\n\t\tthrow new Error(\"not a list nor a map\");\n\t}\n\n\t/**\n\t * Size in words (8 bytes, 64 bits) occupied in target node\n     * @package\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Throws an error because most values can't be called (overridden by UplcAnon)\n     * @package\n\t * @param {UplcRte | UplcStack} rte \n\t * @param {Site} site \n\t * @param {UplcValue} value\n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync call(rte, site, value) {\n\t\tthrow site.typeError(`expected a Plutus-core function, got '${this.toString()}'`);\n\t}\n\n\t/**\n     * @package\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget int() {\n\t\tthrow this.site.typeError(`expected a Plutus-core int, got '${this.toString()}'`);\n\t}\n\n\t/**\n\t * @type {number[]}\n\t */\n\tget bytes() {\n\t\tthrow this.site.typeError(`expected a Plutus-core bytearray, got '${this.toString()}'`);\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget string() {\n\t\tthrow this.site.typeError(`expected a Plutus-core string, got '${this.toString()}'`);\n\t}\n\t\n\t/**\n\t * @type {boolean}\n\t */\n\tget bool() {\n\t\tthrow this.site.typeError(`expected a Plutus-core bool, got '${this.toString()}'`);\n\t}\n\n\t/**\n\t * Distinguishes a pair from a mapItem\n\t * @returns {boolean}\n\t */\n\tisPair() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget first() {\n\t\tthrow this.site.typeError(`expected a Plutus-core pair, got '${this.toString()}'`);\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget second() {\n\t\tthrow this.site.typeError(`expected a Plutus-core pair, got '${this.toString()}'`);\n\t}\n\n\t/**\n\t * Distinguishes a list from a map\n\t * @returns {boolean}\n\t */\n\tisList() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @type {UplcType}\n\t */\n\tget itemType() {\n\t\tthrow this.site.typeError(\"not a list\");\n\t}\n\n\t/**\n\t * @type {UplcValue[]}\n\t */\n\tget list() {\n\t\tthrow this.site.typeError(`expected a Plutus-core list, got '${this.toString()}'`);\n\t}\n\n    /**\n     * @returns {boolean}\n     */\n\tisData() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget data() {\n\t\tthrow this.site.typeError(`expected Plutus-core data, got '${this.toString()}'`);\n\t}\n\n\t/**\n     * @package\n\t * @returns {Promise<UplcValue>}\n\t */\n\tforce() {\n\t\tthrow this.site.typeError(`expected delayed value, got '${this.toString()}'`);\n\t}\n\n\t/**\n     * @package\n\t * @returns {UplcUnit}\n\t */\n\tassertUnit() {\n\t\tthrow this.site.typeError(`expected Plutus-core unit, got '${this.toString}'`);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n     * @package\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Encodes value without type header\n     * @package\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Encodes value with plutus flat encoding.\n\t * Member function not named 'toFlat' as not to confuse with 'toFlat' member of terms.\n     * @package\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValue(bitWriter) {\n\t\tbitWriter.write('1' + this.typeBits() + '0');\n\t\t\n\t\tthis.toFlatValueInternal(bitWriter);\n\t}\n}\n\nclass UplcType {\n\t#typeBits;\n\n\t/**\n\t * @param {string} typeBits \n\t */\n\tconstructor(typeBits) {\n\t\tthis.#typeBits = typeBits;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn this.#typeBits;\n\t}\n\n\t/**\n\t * @param {UplcValue} value \n\t * @returns {boolean}\n\t */\n\tisSameType(value) {\n\t\treturn this.#typeBits == value.typeBits();\n\t}\n\n\t/**\n\t * @returns {UplcType}\n\t */\n\tstatic newDataType() {\n\t\treturn new UplcType(\"1000\");\n\t}\n\n\t/**\n\t * @returns {UplcType}\n\t */\n\tstatic newDataPairType() {\n\t\treturn new UplcType([\"0111\", \"0111\", \"0110\", \"1000\", \"1000\"].join(\"1\"));\n\t}\n\n\t/**\n\t * @param {number[]} lst\n\t * @returns {UplcType}\n\t */\n\tstatic fromNumbers(lst) {\n\t\treturn new UplcType(lst.map(x => byteToBitString(x, 4, false)).join(\"1\"));\n\t}\n}\n\n/**\n * @package\n * @typedef {[?string, UplcValue][]} UplcRawStack\n */\n\n/**\n* @typedef {object} UplcRTECallbacks\n* @property {(msg: string) => Promise<void>} [onPrint]\n* @property {(site: Site, rawStack: UplcRawStack) => Promise<boolean>} [onStartCall]\n* @property {(site: Site, rawStack: UplcRawStack) => Promise<void>} [onEndCall]\n* @property {(name: string, isTerm: boolean, cost: Cost) => void} [onIncrCost]\n*/\n\n/**\n * @type {UplcRTECallbacks}\n */\nconst DEFAULT_UPLC_RTE_CALLBACKS = {\n\tonPrint: async function (/** @type {string} */ msg) {return},\n\tonStartCall: async function(/** @type {Site} */ site, /** @type {UplcRawStack} */ rawStack) {return false},\n\tonEndCall: async function(/** @type {Site} */ site, /** @type {UplcRawStack} */ rawStack) {return},\n\tonIncrCost: function(/** @type {string} */ name, /** @type {boolean} */ isTerm, /** @type {Cost} */ cost) {return},\n}\n\n/**\n * Plutus-core Runtime Environment is used for controlling the programming evaluation (eg. by a debugger)\n * @package\n */\nclass UplcRte {\n\t#callbacks;\n\n\t#networkParams;\n\n\t/**\n\t * this.onNotifyCalls is set to 'false' when the debugger is in step over-mode.\n\t * @type {boolean}\n\t */\n\t#notifyCalls;\n\n\t/**\n\t * this.onNotifyCalls is set back to true if the endCall is called with the same rawStack as the marker.\n\t * @type {?UplcRawStack}\n\t */\n\t#marker;\n\n\t/**\n\t * @typedef {[?string, UplcValue][]} UplcRawStack\n\t */\n\n\t/**\n\t * @param {UplcRTECallbacks} callbacks \n\t * @param {?NetworkParams} networkParams\n\t */\n\tconstructor(callbacks = DEFAULT_UPLC_RTE_CALLBACKS, networkParams = null) {\n\t\tassertDefined(callbacks);\n\t\tthis.#callbacks = callbacks;\n\t\tthis.#networkParams = networkParams;\n\t\tthis.#notifyCalls = true;\n\t\tthis.#marker = null;\n\t}\n\n\t/**\n\t * @param {string} name - for breakdown\n\t * @param {boolean} isTerm\n\t * @param {Cost} cost \n\t */\n\tincrCost(name, isTerm, cost) {\n\t\tif (cost.mem <= 0n || cost.cpu <= 0n) {\n\t\t\tthrow new Error(\"cost not increasing\");\n\t\t}\n\n\t\tif (this.#callbacks.onIncrCost !== undefined) {\n\t\t\tthis.#callbacks.onIncrCost(name, isTerm, cost);\n\t\t}\n\t}\n\n\tincrStartupCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"startup\", true, this.#networkParams.plutusCoreStartupCost);\n\t\t}\n\t}\n\n\tincrVariableCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"variable\", true, this.#networkParams.plutusCoreVariableCost);\n\t\t}\n\t}\n\n\tincrLambdaCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"lambda\", true, this.#networkParams.plutusCoreLambdaCost);\n\t\t}\n\t}\n\n\tincrDelayCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"delay\", true, this.#networkParams.plutusCoreDelayCost);\n\t\t}\n\t}\n\n\tincrCallCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"call\", true, this.#networkParams.plutusCoreCallCost);\n\t\t}\n\t}\n\n\tincrConstCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"const\", true, this.#networkParams.plutusCoreConstCost);\n\t\t}\n\t}\n\n\tincrForceCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"force\", true, this.#networkParams.plutusCoreForceCost);\n\t\t}\n\t}\n\n\tincrBuiltinCost() {\n\t\tif (this.#networkParams !== null) {\n\t\t\tthis.incrCost(\"builtin\", true, this.#networkParams.plutusCoreBuiltinCost);\n\t\t}\n\t}\n\n\t/**\n\t * @param {UplcBuiltin} fn\n\t * @param {UplcValue[]} args\n\t */\n\tcalcAndIncrCost(fn, ...args) {\n\t\tif (this.#networkParams !== null) {\n\t\t\tlet cost = fn.calcCost(this.#networkParams, ...args);\n\n\t\t\tthis.incrCost(fn.name, false, cost);\n\t\t}\n\t}\n\n\t/**\n\t * Gets variable using Debruijn index. Throws error here because UplcRTE is the stack root and doesn't contain any values.\n\t * @param {number} i \n\t * @returns {UplcValue}\n\t */\n\tget(i) {\n\t\tthrow new Error(\"variable index out of range\");\n\t}\n\n\t/**\n\t * Creates a child stack.\n\t * @param {UplcValue} value \n\t * @param {?string} valueName \n\t * @returns {UplcStack}\n\t */\n\tpush(value, valueName = null) {\n\t\treturn new UplcStack(this, value, valueName);\n\t}\n\n\t/**\n\t * Calls the print callback (or does nothing if print callback isn't defined)\n\t * @param {string} msg \n\t * @returns {Promise<void>}\n\t */\n\tasync print(msg) {\n\t\tif (this.#callbacks.onPrint != undefined) {\n\t\t\tawait this.#callbacks.onPrint(msg);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the onStartCall callback.\n\t * @param {Site} site \n\t * @param {UplcRawStack} rawStack \n\t * @returns {Promise<void>}\n\t */\n\tasync startCall(site, rawStack) {\n\t\tif (this.#notifyCalls && this.#callbacks.onStartCall != undefined) {\n\t\t\tlet stopNotifying = await this.#callbacks.onStartCall(site, rawStack);\n\t\t\tif (stopNotifying) {\n\t\t\t\tthis.#notifyCalls = false;\n\t\t\t\tthis.#marker = rawStack;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calls the onEndCall callback if '#notifyCalls == true'.\n\t * '#notifyCalls' is set to true if 'rawStack == #marker'.\n\t * @param {Site} site \n\t * @param {UplcRawStack} rawStack \n\t * @param {UplcValue} result \n\t * @returns {Promise<void>}\n\t */\n\tasync endCall(site, rawStack, result) {\n\t\tif (!this.#notifyCalls && this.#marker == rawStack) {\n\t\t\tthis.#notifyCalls = true;\n\t\t\tthis.#marker = null;\n\t\t}\n\n\t\tif (this.#notifyCalls && this.#callbacks.onEndCall != undefined) {\n\t\t\trawStack = rawStack.slice();\n\t\t\trawStack.push([\"__result\", result]);\n\t\t\tawait this.#callbacks.onEndCall(site, rawStack);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {UplcRawStack}\n\t */\n\ttoList() {\n\t\treturn [];\n\t}\n}\n\n/**\n * UplcStack contains a value that can be retrieved using a Debruijn index.\n */\nclass UplcStack {\n\t#parent;\n\t#value;\n\t#valueName;\n\n\t/**\n\t * @param {(?UplcStack) | UplcRte} parent\n\t * @param {?UplcValue} value\n\t * @param {?string} valueName\n\t */\n\tconstructor(parent, value = null, valueName = null) {\n\t\tthis.#parent = parent;\n\t\tthis.#value = value;\n\t\tthis.#valueName = valueName;\n\t}\n\n\tincrStartupCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrStartupCost()\n\t\t}\n\t}\n\n\tincrVariableCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrVariableCost()\n\t\t}\n\t}\n\n\tincrLambdaCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrLambdaCost()\n\t\t}\n\t}\n\t\n\tincrDelayCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrDelayCost();\n\t\t}\n\t}\n\n\tincrCallCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrCallCost();\n\t\t}\n\t}\n\n\tincrConstCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrConstCost();\n\t\t}\n\t}\n\n\tincrForceCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrForceCost()\n\t\t}\n\t}\n\n\tincrBuiltinCost() {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.incrBuiltinCost()\n\t\t}\n\t}\n\n\t/**\n\t * @param {UplcBuiltin} fn\n\t * @param {UplcValue[]} args\n\t */\n\tcalcAndIncrCost(fn, ...args) {\n\t\tif (this.#parent !== null) {\n\t\t\tthis.#parent.calcAndIncrCost(fn, ...args);\n\t\t}\n\t}\n\n\t/**\n\t * Gets a value using the Debruijn index. If 'i == 1' then the current value is returned.\n\t * Otherwise 'i' is decrement and passed to the parent stack.\n\t * @param {number} i \n\t * @returns {UplcValue}\n\t */\n\tget(i) {\n\t\ti -= 1;\n\n\t\tif (i == 0) {\n\t\t\tif (this.#value === null) {\n\t\t\t\tthrow new Error(\"Plutus-core stack value not set\");\n\t\t\t} else {\n\t\t\t\treturn this.#value;\n\t\t\t}\n\t\t} else {\n\t\t\tassert(i > 0);\n\t\t\tif (this.#parent === null) {\n\t\t\t\tthrow new Error(\"variable index out of range\");\n\t\t\t} else {\n\t\t\t\treturn this.#parent.get(i);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Instantiates a child stack.\n\t * @param {UplcValue} value \n\t * @param {?string} valueName \n\t * @returns {UplcStack}\n\t */\n\tpush(value, valueName = null) {\n\t\treturn new UplcStack(this, value, valueName);\n\t}\n\n\t/**\n\t * Calls the onPrint callback in the RTE (root of stack).\n\t * @param {string} msg \n\t * @returns {Promise<void>}\n\t */\n\tasync print(msg) {\n\t\tif (this.#parent !== null) {\n\t\t\tawait this.#parent.print(msg);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the onStartCall callback in the RTE (root of stack).\n\t * @param {Site} site \n\t * @param {UplcRawStack} rawStack \n\t * @returns {Promise<void>}\n\t */\n\tasync startCall(site, rawStack) {\n\t\tif (this.#parent !== null) {\n\t\t\tawait this.#parent.startCall(site, rawStack);\n\t\t}\n\t}\n\n\t/** \n\t * Calls the onEndCall callback in the RTE (root of stack).\n\t * @param {Site} site\n\t * @param {UplcRawStack} rawStack\n\t * @param {UplcValue} result\n\t * @returns {Promise<void>}\n\t*/\n\tasync endCall(site, rawStack, result) {\n\t\tif (this.#parent !== null) {\n\t\t\tawait this.#parent.endCall(site, rawStack, result);\n\t\t}\n\t}\n\n\t/** \n\t * @returns {UplcRawStack}\n\t*/\n\ttoList() {\n\t\tlet lst = this.#parent !== null ? this.#parent.toList() : [];\n\t\tif (this.#value !== null) {\n\t\t\tlst.push([this.#valueName, this.#value]);\n\t\t}\n\t\treturn lst;\n\t}\n}\n\n/**\n * Anonymous Plutus-core function.\n * Returns a new UplcAnon whenever it is called/applied (args are 'accumulated'), except final application, when the function itself is evaluated.\n * @package\n */\nclass UplcAnon extends UplcValue {\n\t/**\n\t * @typedef {(callSite: Site, subStack: UplcStack, ...args: UplcValue[]) => (UplcValue | Promise<UplcValue>)} UplcAnonCallback\n\t */\n\n\t#rte;\n\t#nArgs;\n\t#argNames;\n\n\t/**\n\t * Increment every time function a new argument is applied.\n\t */\n\t#argCount;\n\n\t/**\n\t * Callback that is called when function is fully applied.\n\t * @type {UplcAnonCallback}\n\t */\n\t#fn;\n\t#callSite;\n\n\t/**\n\t * \n\t * @param {Site} site \n\t * @param {UplcRte | UplcStack} rte \n\t * @param {string[] | number} args - args can be list of argNames (for debugging), or the number of args\n\t * @param {UplcAnonCallback} fn \n\t * @param {number} argCount \n\t * @param {?Site} callSite \n\t */\n\tconstructor(site, rte, args, fn, argCount = 0, callSite = null) {\n\t\tsuper(site);\n\t\tassert(typeof argCount == \"number\");\n\n\t\tlet nArgs = 0;\n\t\t/** @type {?string[]} */\n\t\tlet argNames = null;\n\t\tif ((typeof args != 'number')) {\n\t\t\tif (args instanceof Array) {\n\t\t\t\tnArgs = args.length;\n\t\t\t\targNames = args;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"not an Array\");\n\t\t\t}\n\t\t} else {\n\t\t\tnArgs = args;\n\t\t}\n\n\t\tassert(nArgs >= 1);\n\n\t\tthis.#rte = rte;\n\t\tthis.#nArgs = nArgs;\n\t\tthis.#argNames = argNames;\n\t\tthis.#argCount = argCount;\n\t\tthis.#fn = fn;\n\t\tthis.#callSite = callSite;\n\t}\n\n\tget memSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcAnon}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcAnon(\n\t\t\tnewSite,\n\t\t\tthis.#rte,\n\t\t\tthis.#argNames !== null ? this.#argNames : this.#nArgs,\n\t\t\tthis.#fn,\n\t\t\tthis.#argCount,\n\t\t\tthis.#callSite,\n\t\t);\n\t}\n\n\t/**\n\t * @param {Site} callSite\n\t * @param {UplcStack} subStack\n\t * @param {UplcValue[]} args\n\t * @returns {UplcValue | Promise<UplcValue>}\n\t */\n\tcallSync(callSite, subStack, args) {\n\t\treturn this.#fn(callSite, subStack, ...args);\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte \n\t * @param {Site} site \n\t * @param {UplcValue} value \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync call(rte, site, value) {\n\t\tassert(site != undefined && site instanceof Site);\n\n\t\tlet subStack = this.#rte.push(value, this.#argNames !== null ? this.#argNames[this.#argCount] : null); // this is the only place where the stack grows\n\t\tlet argCount = this.#argCount + 1;\n\t\tlet callSite = this.#callSite !== null ? this.#callSite : site;\n\n\t\t// function is fully applied, collect the args and call the callback\n\t\tif (argCount == this.#nArgs) {\n\t\t\t/** @type {UplcValue[]} */\n\t\t\tlet args = [];\n\n\t\t\tlet rawStack = rte.toList(); // use the RTE of the callsite\n\n\t\t\tfor (let i = this.#nArgs; i >= 1; i--) {\n\t\t\t\tlet argValue = subStack.get(i);\n\t\t\t\targs.push(argValue);\n\t\t\t\trawStack.push([`__arg${this.#nArgs - i}`, argValue]);\n\t\t\t}\n\n\t\t\t// notify the RTE of the new live stack (list of pairs instead of UplcStack), and await permission to continue\n\t\t\tawait this.#rte.startCall(callSite, rawStack);\n\n\t\t\ttry {\n\t\t\t\tlet result = this.callSync(callSite, subStack, args);\n\n\t\t\t\tif (result instanceof Promise) {\n\t\t\t\t\tresult = await result;\n\t\t\t\t}\n\t\n\t\t\t\t// the same rawStack object can be used as a marker for 'Step-Over' in the debugger\n\t\t\t\tawait this.#rte.endCall(callSite, rawStack, result);\n\t\n\t\t\t\treturn result.copy(callSite);\n\t\t\t} catch(e) {\n\t\t\t\t// TODO: better trace\n\t\t\t\tif (e instanceof RuntimeError) {\n\t\t\t\t\te = e.addTraceSite(callSite);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\t// function isn't yet fully applied, return a new partially applied UplcAnon\n\t\t\tassert(this.#nArgs > 1);\n\n\t\t\treturn new UplcAnon(\n\t\t\t\tcallSite,\n\t\t\t\tsubStack,\n\t\t\t\tthis.#argNames !== null ? this.#argNames : this.#nArgs,\n\t\t\t\tthis.#fn,\n\t\t\t\targCount,\n\t\t\t\tcallSite,\n\t\t\t);\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"fn\";\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\tthrow new Error(\"a UplcAnon value doesn't have a literal representation\");\n\t}\n\n\t/**\n\t * Encodes value with plutus flat encoding.\n\t * Member function not named 'toFlat' as not to confuse with 'toFlat' member of terms.\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValue(bitWriter) {\n\t\tthrow new Error(\"a UplcAnon value doesn't have a literal representation\");\n\t}\n}\n\n/**\n * @package\n */\nclass UplcDelayedValue extends UplcValue {\n\t#evaluator;\n\n\t/**\n\t * @param {Site} site\n\t * @param {() => (UplcValue | Promise<UplcValue>)} evaluator\n\t */\n\tconstructor(site, evaluator) {\n\t\tsuper(site);\n\t\tthis.#evaluator = evaluator;\n\t}\n\n\tget memSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcValue}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcDelayedValue(newSite, this.#evaluator);\n\t}\n\n\t/**\n\t * @return {Promise<UplcValue>}\n\t */\n\tforce() {\n\t\tlet res = this.#evaluator();\n\n\t\tif (res instanceof Promise) {\n\t\t\treturn res;\n\t\t} else {\n\t\t\treturn new Promise((resolve, _) => {\n\t\t\t\tresolve(res);\n\t\t\t});\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn `delay`;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\tthrow new Error(\"a UplcDelayedValue value doesn't have a literal representation\");\n\t}\n\n\t/**\n\t * Encodes value with plutus flat encoding.\n\t * Member function not named 'toFlat' as not to confuse with 'toFlat' member of terms.\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValue(bitWriter) {\n\t\tthrow new Error(\"a UplcDelayedValue value doesn't have a literal representation\");\n\t}\n}\n\n/**\n * Plutus-core Integer class\n */\nclass UplcInt extends UplcValue {\n\t#value;\n\t#signed;\n\n\t/**\n\t * @param {Site} site\n\t * @param {bigint} value - supposed to be arbitrary precision\n\t * @param {boolean} signed - unsigned is only for internal use\n\t */\n\tconstructor(site, value, signed = true) {\n\t\tsuper(site);\n\t\tassert(typeof value == 'bigint', \"not a bigint\");\n\t\tthis.#value = value;\n\t\tthis.#signed = signed;\n\t}\n\n\t/**\n\t * Constructs a UplcInt without requiring a Site\n\t * @param {bigint | number} value\n\t * @returns {UplcInt} \n\t */\n\tstatic new(value) {\n\t\tif (typeof value == 'number') {\n\t\t\tassert(value % 1.0 == 0.0, \"must be whole number\");\n\t\t\treturn new UplcInt(Site.dummy(), BigInt(value));\n\t\t} else {\n\t\t\treturn new UplcInt(Site.dummy(), value);\n\t\t}\n\t}\n\n\tget signed() {\n\t\treturn this.#signed;\n\t}\n\n\t/**\n\t * Creates a UplcInt wrapped in a UplcConst, so it can be used a term\n\t * @param {Site} site \n\t * @param {bigint} value \n\t * @returns \n\t */\n\tstatic newSignedTerm(site, value) {\n\t\treturn new UplcConst(new UplcInt(site, value, true));\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n        return IntData.memSizeInternal(this.#value);\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcInt}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcInt(newSite, this.#value, this.#signed);\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget int() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Parses a single byte in the Plutus-core byte-list representation of an int\n\t * @param {number} b \n\t * @returns {number}\n\t */\n\tstatic parseRawByte(b) {\n\t\treturn b & 0b01111111;\n\t}\n\n\t/**\n\t * Returns true if 'b' is the last byte in the Plutus-core byte-list representation of an int.\n\t * @param {number} b \n\t * @returns {boolean}\n\t */\n\tstatic rawByteIsLast(b) {\n\t\treturn (b & 0b10000000) == 0;\n\t}\n\n\t/**\n\t * Combines a list of Plutus-core bytes into a bigint (leading bit of each byte is ignored).\n     * Differs from bytesToBigInt in utils.js because only 7 bits are used from each byte.\n\t * @param {number[]} bytes\n\t * @returns {bigint}\n\t */\n\tstatic bytesToBigInt(bytes) {\n\t\tlet value = BigInt(0);\n\n\t\tlet n = bytes.length;\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tlet b = bytes[i];\n\n\t\t\t// 7 (not 8), because leading bit isn't used here\n\t\t\tvalue = value + BigInt(b) * ipow2(BigInt(i) * 7n);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Applies zigzag encoding\n\t * @example\n\t * (new UplcInt(Site.dummy(), -1n, true)).toUnsigned().int => 1n\n\t * @example\n\t * (new UplcInt(Site.dummy(), -1n, true)).toUnsigned().toSigned().int => -1n\n\t * @example\n\t * (new UplcInt(Site.dummy(), -2n, true)).toUnsigned().toSigned().int => -2n\n\t * @example\n\t * (new UplcInt(Site.dummy(), -3n, true)).toUnsigned().toSigned().int => -3n\n\t * @example\n\t * (new UplcInt(Site.dummy(), -4n, true)).toUnsigned().toSigned().int => -4n\n\t * @returns {UplcInt}\n\t */\n\ttoUnsigned() {\n\t\tif (this.#signed) {\n\t\t\tif (this.#value < 0n) {\n\t\t\t\treturn new UplcInt(this.site, -this.#value*2n - 1n, false);\n\t\t\t} else {\n\t\t\t\treturn new UplcInt(this.site, this.#value * 2n, false);\n\t\t\t}\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/** \n\t * Unapplies zigzag encoding \n\t * @example\n\t * (new UplcInt(Site.dummy(), 1n, false)).toSigned().int => -1n\n\t * @returns {UplcInt}\n\t*/\n\ttoSigned() {\n\t\tif (this.#signed) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (this.#value % 2n == 0n) {\n\t\t\t\treturn new UplcInt(this.site, this.#value / 2n, true);\n\t\t\t} else {\n\t\t\t\treturn new UplcInt(this.site, -(this.#value + 1n) / 2n, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value.toString();\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatInternal(bitWriter) {\n\t\tlet zigzag = this.toUnsigned();\n\t\tlet bitString = padZeroes(zigzag.#value.toString(2), 7);\n\n\t\t// split every 7th\n\t\tlet parts = [];\n\t\tfor (let i = 0; i < bitString.length; i += 7) {\n\t\t\tparts.push(bitString.slice(i, i + 7));\n\t\t}\n\n\t\t// reverse the parts\n\t\tparts.reverse();\n\n\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\tif (i == parts.length - 1) {\n\t\t\t\t// last\n\t\t\t\tbitWriter.write('0' + parts[i]);\n\t\t\t} else {\n\t\t\t\tbitWriter.write('1' + parts[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Encodes unsigned integer with plutus flat encoding.\n\t * Throws error if signed.\n\t * Used by encoding plutus core program version and debruijn indices.\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlatUnsigned(bitWriter) {\n\t\tassert(!this.#signed);\n\n\t\tthis.toFlatInternal(bitWriter);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn \"0000\";\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tassert(this.#signed);\n\n\t\tthis.toFlatInternal(bitWriter);\n\t}\n}\n\n/**\n * Plutus-core ByteArray value class\n * Wraps a regular list of uint8 numbers (so not Uint8Array)\n */\nclass UplcByteArray extends UplcValue {\n\t#bytes;\n\n\t/**\n\t * @param {Site} site\n\t * @param {number[]} bytes\n\t */\n\tconstructor(site, bytes) {\n\t\tsuper(site);\n\t\tassert(bytes != undefined);\n\t\tthis.#bytes = bytes;\n\t\tfor (let b of this.#bytes) {\n\t\t\tassert(typeof b == 'number');\n\t\t}\n\t}\n\n\t/**\n\t * Construct a UplcByteArray without requiring a Site\n\t * @param {number[]} bytes \n\t * @returns {UplcByteArray}\n\t */\n\tstatic new(bytes) {\n\t\treturn new UplcByteArray(Site.dummy(), bytes);\n\t}\n\n\t/**\n\t * Creates new UplcByteArray wrapped in UplcConst so it can be used as a term.\n\t * @param {Site} site \n\t * @param {number[]} bytes \n\t * @returns \n\t */\n\tstatic newTerm(site, bytes) {\n\t\treturn new UplcConst(new UplcByteArray(site, bytes));\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n        return ByteArrayData.memSizeInternal(this.#bytes);\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcByteArray}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcByteArray(newSite, this.#bytes);\n\t}\n\n\t/**\n\t * @type {number[]}\n\t */\n\tget bytes() {\n\t\treturn this.#bytes.slice();\n\t}\n\n\t/**\n\t * Returns hex representation of byte array\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `#${bytesToHex(this.#bytes)}`;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn \"0001\";\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tUplcByteArray.writeBytes(bitWriter, this.#bytes);\n\t}\n\n\t/**\n\t * Write a list of bytes to the bitWriter using flat encoding.\n\t * Used by UplcString, UplcByteArray and UplcDataValue\n\t * Equivalent to E_B* function in Plutus-core docs\n\t * @param {BitWriter} bitWriter \n\t * @param {number[]} bytes \n\t */\n\tstatic writeBytes(bitWriter, bytes) {\n\t\tbitWriter.padToByteBoundary(true);\n\n\t\t// the rest of this function is equivalent to E_C* function in Plutus-core docs\n\t\tlet n = bytes.length;\n\t\tlet pos = 0;\n\n\t\t// write chunks of 255\n\t\twhile (pos < n) {\n\t\t\t// each iteration is equivalent to E_C function in Plutus-core docs\n\n\t\t\tlet nChunk = Math.min(n - pos, 255);\n\n\t\t\t// equivalent to E_8 function in Plutus-core docs\n\t\t\tbitWriter.write(padZeroes(nChunk.toString(2), 8));\n\n\t\t\tfor (let i = pos; i < pos + nChunk; i++) {\n\t\t\t\tlet b = bytes[i];\n\n\t\t\t\t// equivalent to E_8 function in Plutus-core docs\n\t\t\t\tbitWriter.write(padZeroes(b.toString(2), 8));\n\t\t\t}\n\n\t\t\tpos += nChunk;\n\t\t}\n\n\t\tbitWriter.write('00000000');\n\t}\n}\n\n/**\n * Plutus-core string value class\n */\nclass UplcString extends UplcValue {\n\t#value;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} value \n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * Constructs a UplcStrin without requiring a Site\n\t * @param {string} value \n\t * @returns {UplcString}\n\t */\n\tstatic new(value) {\n\t\treturn new UplcString(Site.dummy(), value);\n\t}\n\n\t/**\n\t * Creates a new UplcString wrapped with UplcConst so it can be used as a term.\n\t * @param {Site} site \n\t * @param {string} value \n\t * @returns {UplcConst}\n\t */\n\tstatic newTerm(site, value) {\n\t\treturn new UplcConst(new UplcString(site, value));\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\treturn this.#value.length;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcString}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcString(newSite, this.#value);\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget string() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `\"${this.#value}\"`;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn \"0010\";\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tlet bytes = Array.from((new TextEncoder()).encode(this.#value));\n\n\t\tUplcByteArray.writeBytes(bitWriter, bytes);\n\t}\n}\n\n/**\n * Plutus-core unit value class\n */\nclass UplcUnit extends UplcValue {\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tsuper(site);\n\t}\n\n\t/**\n\t * Constructs a UplcUnit without requiring a Site\n\t * @returns {UplcUnit}\n\t */\n\tstatic new () {\n\t\treturn new UplcUnit(Site.dummy());\n\t}\n\n\t/**\n\t * Creates a new UplcUnit wrapped with UplcConst so it can be used as a term\n\t * @param {Site} site \n\t * @returns {UplcConst}\n\t */\n\tstatic newTerm(site) {\n\t\treturn new UplcConst(new UplcUnit(site));\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcUnit}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcUnit(newSite);\n\t}\n\n\ttoString() {\n\t\treturn \"()\";\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn \"0011\";\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t}\n\n\t/**\n\t * @returns {UplcUnit}\n\t */\n\tassertUnit() {\n\t\treturn this;\n\t}\n}\n\n/**\n * Plutus-core boolean value class\n */\nclass UplcBool extends UplcValue {\n\t#value;\n\n\t/**\n\t * @param {Site} site \n\t * @param {boolean} value \n\t */\n\tconstructor(site, value) {\n\t\tsuper(site);\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * Constructs a UplcBool without requiring a Site\n\t * @param {boolean} value \n\t * @returns {UplcBool}\n\t */\n\tstatic new(value) {\n\t\treturn new UplcBool(Site.dummy(), value);\n\t}\n\n\t/**\n\t * Creates a new UplcBool wrapped with UplcConst so it can be used as a term.\n\t * @param {Site} site \n\t * @param {boolean} value \n\t * @returns {UplcConst}\n\t */\n\tstatic newTerm(site, value) {\n\t\treturn new UplcConst(new UplcBool(site, value));\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcBool}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcBool(newSite, this.#value);\n\t}\n\n\t/**\n\t * @type {boolean}\n\t */\n\tget bool() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget data() {\n\t\treturn new ConstrData(this.#value ? 1 : 0, []);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value ? \"true\" : \"false\";\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn '0100';\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tif (this.#value) {\n\t\t\tbitWriter.write('1');\n\t\t} else {\n\t\t\tbitWriter.write('0');\n\t\t}\n\t}\n}\n\n/**\n * Plutus-core pair value class\n * Can contain any other value type.\n */\nclass UplcPair extends UplcValue {\n\t#first;\n\t#second;\n\n\t/**\n\t * @param {Site} site\n\t * @param {UplcValue} first\n\t * @param {UplcValue} second\n\t */\n\tconstructor(site, first, second) {\n\t\tsuper(site);\n\t\tthis.#first = first;\n\t\tthis.#second = second;\n\t}\n\n\t/**\n\t * Constructs a UplcPair without requiring a Site\n\t * @param {UplcValue} first \n\t * @param {UplcValue} second \n\t * @returns {UplcPair}\n\t */\n\tstatic new(first, second) {\n\t\treturn new UplcPair(Site.dummy(), first, second);\n\t}\n\n\t/**\n\t * Creates a new UplcBool wrapped with UplcConst so it can be used as a term.\n\t * @param {Site} site \n\t * @param {UplcValue} first\n\t * @param {UplcValue} second\n\t * @returns {UplcConst}\n\t */\n\tstatic newTerm(site, first, second) {\n\t\treturn new UplcConst(new UplcPair(site, first, second));\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\treturn this.#first.memSize + this.#second.memSize;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcPair}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcPair(newSite, this.#first, this.#second);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(${this.#first.toString()}, ${this.#second.toString()})`;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisPair() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget first() {\n\t\treturn this.#first;\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget second() {\n\t\treturn this.#second;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget key() {\n\t\treturn this.#first.data;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget value() {\n\t\treturn this.#second.data;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\t// 7 (7 (6) (fst)) (snd)\n\t\treturn [\"0111\", \"0111\", \"0110\", this.#first.typeBits(), this.#second.typeBits()].join(\"1\");\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tthis.#first.toFlatValueInternal(bitWriter);\n\t\tthis.#second.toFlatValueInternal(bitWriter);\n\t}\n}\n\n/** \n * Plutus-core list value class.\n * Only used during evaluation.\n*/\nclass UplcList extends UplcValue {\n\t#itemType;\n\t#items;\n\n\t/**\n\t * @param {Site} site \n\t * @param {UplcType} itemType \n\t * @param {UplcValue[]} items \n\t */\n\tconstructor(site, itemType, items) {\n\t\tsuper(site);\n\t\tthis.#itemType = itemType;\n\t\tthis.#items = items;\n\t}\n\n\t/**\n\t * Constructs a UplcList without requiring a Site\n\t * @param {UplcType} type \n\t * @param {UplcValue[]} items \n\t */\n\tstatic new(type, items) {\n\t\treturn new UplcList(Site.dummy(), type, items);\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget length() {\n\t\treturn this.#items.length;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\tlet sum = 0;\n\n\t\tfor (let item of this.#items) {\n\t\t\tsum += item.copy(this.site).memSize;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tget itemType() {\n\t\treturn this.#itemType;\n\t}\n\n\t/**\n\t * @param {Site} newSite\n\t * @returns {UplcList}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcList(newSite, this.#itemType, this.#items.slice());\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisList() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @type {UplcValue[]}\n\t */\n\tget list() {\n\t\treturn this.#items.slice();\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `[${this.#items.map(item => item.toString()).join(\", \")}]`;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\t// 7 (5) (type bits of content)\n\t\treturn [\"0111\", \"0101\", this.#itemType.typeBits()].join(\"1\");\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tfor (let item of this.#items) {\n\t\t\tbitWriter.write('1');\n\n\t\t\titem.copy(this.site).toFlatValueInternal(bitWriter);\n\t\t}\n\n\t\tbitWriter.write('0');\n\t}\n}\n\n/**\n * Wrapper for UplcData.\n */\nclass UplcDataValue extends UplcValue {\n\t#data;\n\n\t/**\n\t * @param {Site} site \n\t * @param {UplcData} data \n\t */\n\tconstructor(site, data) {\n\t\tsuper(site);\n\t\tthis.#data = assertDefined(data);\n\t\tassert(data instanceof UplcData);\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget memSize() {\n\t\treturn this.#data.memSize;\n\t}\n\n\t/**\n\t * @param {Site} newSite \n\t * @returns {UplcDataValue}\n\t */\n\tcopy(newSite) {\n\t\treturn new UplcDataValue(newSite, this.#data);\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisData() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget data() {\n\t\treturn this.#data;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `data(${this.#data.toString()})`;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttypeBits() {\n\t\treturn UplcType.newDataType().typeBits();\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter\n\t */\n\ttoFlatValueInternal(bitWriter) {\n\t\tUplcByteArray.writeBytes(bitWriter, this.#data.toCbor());\n\t}\n\n\t/**\n\t * @param {UplcDataValue | UplcData} data \n\t * @returns {UplcData}\n\t */\n\tstatic unwrap(data) {\n\t\tif (data instanceof UplcDataValue) {\n\t\t\treturn data.data;\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n}\n\n/**\n * Base class of Plutus-core terms\n * @package\n */\nclass UplcTerm {\n\t#site;\n\t#type;\n\n\t/**\n\t * @param {Site} site\n\t * @param {number} type\n\t */\n\tconstructor(site, type) {\n\t\tassert(site != undefined && site instanceof Site);\n\t\tthis.#site = site;\n\t\tthis.#type = type;\n\t}\n\n\t/**\n\t * @type {Site}\n\t */\n\tget site() {\n\t\treturn this.#site;\n\t}\n\n\t/**\n\t * Generic term toString method\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(Term ${this.#type.toString()})`;\n\t}\n\n\t/**\n\t * Calculates a value, and also increments the cost\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Writes bits of flat encoded Plutus-core terms to bitWriter. Doesn't return anything.\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Plutus-core variable ref term (index is a Debruijn index)\n * @package\n */\nclass UplcVariable extends UplcTerm {\n\t#index;\n\n\t/**\n\t * @param {Site} site \n\t * @param {UplcInt} index \n\t */\n\tconstructor(site, index) {\n\t\tsuper(site, 0);\n\t\tthis.#index = index;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `x${this.#index.toString()}`;\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0000');\n\t\tthis.#index.toFlatUnsigned(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte\n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\t// add costs before get the value\n\t\trte.incrVariableCost();\n\n\t\treturn rte.get(Number(this.#index.int));\n\t}\n}\n\n/**\n * Plutus-core delay term.\n * @package\n */\nclass UplcDelay extends UplcTerm {\n\t#expr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {UplcTerm} expr \n\t */\n\tconstructor(site, expr) {\n\t\tsuper(site, 1);\n\t\tthis.#expr = expr;\n\t}\n\n\t/**\n\t * @returns {string} \n\t */\n\ttoString() {\n\t\treturn `(delay ${this.#expr.toString()})`;\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0001');\n\t\tthis.#expr.toFlat(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\trte.incrDelayCost();\n\n\t\treturn new UplcDelayedValue(this.site, () =>  this.#expr.eval(rte));\n\t}\n}\n\n/**\n * Plutus-core lambda term\n * @package\n */\nclass UplcLambda extends UplcTerm {\n\t#rhs;\n\t#argName;\n\n\t/**\n\t * @param {Site} site\n\t * @param {UplcTerm} rhs\n\t * @param {?string} argName\n\t */\n\tconstructor(site, rhs, argName = null) {\n\t\tsuper(site, 2);\n\t\tthis.#rhs = rhs;\n\t\tthis.#argName = argName;\n\t}\n\n\t/**\n\t * Returns string with unicode lambda symbol\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(\\u039b${this.#argName !== null ? \" \" + this.#argName + \" ->\" : \"\"} ${this.#rhs.toString()})`;\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0010');\n\t\tthis.#rhs.toFlat(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\trte.incrLambdaCost();\n\n\t\treturn new UplcAnon(this.site, rte, this.#argName !== null ? [this.#argName] : 1, (callSite, subStack) => {\n\t\t\treturn this.#rhs.eval(subStack);\n\t\t});\n\t}\n}\n\n/**\n * Plutus-core function application term (i.e. function call)\n * @package\n */\nclass UplcCall extends UplcTerm {\n\t#a;\n\t#b;\n\n\t/**\n\t * @param {Site} site\n\t * @param {UplcTerm} a\n\t * @param {UplcTerm} b\n\t */\n\tconstructor(site, a, b) {\n\t\tsuper(site, 3);\n\t\tthis.#a = a;\n\t\tthis.#b = b;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `[${this.#a.toString()} ${this.#b.toString()}]`;\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0011');\n\t\tthis.#a.toFlat(bitWriter);\n\t\tthis.#b.toFlat(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns \n\t */\n\tasync eval(rte) {\n\t\trte.incrCallCost();\n\n\t\tlet fn = await this.#a.eval(rte);\n\t\tlet arg = await this.#b.eval(rte);\n\n\t\treturn await fn.call(rte, this.site, arg);\n\t}\n}\n\n/**\n * Plutus-core const term (i.e. a literal in conventional sense)\n * @package\n */\nclass UplcConst extends UplcTerm {\n\t#value;\n\n\t/**\n\t * @param {UplcValue} value \n\t */\n\tconstructor(value) {\n\t\tsuper(value.site, 4);\n\n\t\tthis.#value = value;\n\n\t\tif (value instanceof UplcInt) {\n\t\t\tassert(value.signed);\n\t\t}\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#value.toString();\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0100');\n\t\tthis.#value.toFlatValue(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcStack | UplcRte} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\trte.incrConstCost();\n\n\t\treturn await this.#value.eval(rte);\n\t}\n}\n\n/**\n * Plutus-core force term\n * @package\n */\nclass UplcForce extends UplcTerm {\n\t#expr;\n\n\t/**\n\t * @param {Site} site\n\t * @param {UplcTerm} expr\n\t */\n\tconstructor(site, expr) {\n\t\tsuper(site, 5);\n\t\tthis.#expr = expr;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(force ${this.#expr.toString()})`;\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0101');\n\t\tthis.#expr.toFlat(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\trte.incrForceCost();\n\n\t\treturn await (await this.#expr.eval(rte)).force();\n\t}\n}\n\n/**\n * Plutus-core error term\n * @package\n */\nclass UplcError extends UplcTerm {\n\t/** 'msg' is only used for debuggin and doesn't actually appear in the final program */\n\t#msg;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} msg \n\t */\n\tconstructor(site, msg = \"\") {\n\t\tsuper(site, 6);\n\t\tthis.#msg = msg;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn \"(error)\";\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0110');\n\t}\n\n\t/**\n\t * Throws a RuntimeError when evaluated.\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\tthrow this.site.runtimeError(this.#msg);\n\t}\n}\n\n/**\n * Plutus-core builtin function ref term\n * @package\n */\nclass UplcBuiltin extends UplcTerm {\n\t/** unknown builtins stay integers */\n\t#name;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string | number} name \n\t */\n\tconstructor(site, name) {\n\t\tsuper(site, 7);\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\treturn this.#name.toString();\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tif (typeof this.#name == \"string\") {\n\t\t\treturn `(builtin ${this.#name})`;\n\t\t} else {\n\t\t\treturn `(builtin unknown${this.#name.toString()})`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tbitWriter.write('0111');\n\n\t\t/** @type {number} */\n\t\tlet i;\n\n\t\tif (typeof this.#name == \"string\") {\n\t\t\ti = UPLC_BUILTINS.findIndex(info => info.name == this.#name);\n\t\t} else {\n\t\t\ti = this.#name;\n\t\t}\n\n\t\tlet bitString = padZeroes(i.toString(2), 7);\n\n\t\tbitWriter.write(bitString);\n\t}\n\n\t/**\n\t * @param {NetworkParams} params\n\t * @param  {...UplcValue} args\n\t * @returns {Cost}\n\t */\n\tcalcCost(params, ...args) {\n\t\tlet i = UPLC_BUILTINS.findIndex(info => info.name == this.#name);\n\n\t\tlet argSizes = args.map(a => a.memSize);\n\n\t\tif (!argSizes.every(size => !Number.isNaN(size) && size >= 0)) {\n\t\t\tthrow new Error(\"invalid arg size\");\n\t\t}\n\n\t\treturn UPLC_BUILTINS[i].calcCost(params, argSizes);\n\t}\n\n\t/**\n\t * Used by IRCoreCallExpr\n\t * @param {Word} name\n\t * @param {UplcValue[]} args\n\t * @returns {UplcValue}\n\t */\n\tstatic evalStatic(name, args) {\n\t\tlet builtin = new UplcBuiltin(name.site, name.value);\n\n\t\tlet dummyRte = new UplcRte();\n\n\t\tlet anon = builtin.evalInternal(dummyRte);\n\n\t\tlet subStack = new UplcStack(dummyRte);\n\n\t\tlet res = anon.callSync(name.site, subStack, args);\n\n\t\tif (res instanceof Promise) {\n\t\t\tthrow new Error(\"can't call trace through evalStatic\");\n\t\t} else {\n\t\t\treturn res;\n\t\t}\n\t}\n\n\t/**\n\t * @param {UplcRte | UplcStack} rte\n\t * @returns {UplcAnon}\n\t */\n\tevalInternal(rte = new UplcRte()) {\n\t\tif (typeof this.#name == \"number\") {\n\t\t\tthrow new Error(\"can't evaluate unknown Plutus-core builtin\");\n\t\t}\n\n\t\tswitch (this.#name) {\n\t\t\tcase \"addInteger\":\n\t\t\t\t// returning a lambda is assumed to be free\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\t// but calling a lambda has a cost associated\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcInt(callSite, a.int + b.int);\n\t\t\t\t});\n\t\t\tcase \"subtractInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcInt(callSite, a.int - b.int);\n\t\t\t\t});\n\t\t\tcase \"multiplyInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcInt(callSite, a.int * b.int);\n\t\t\t\t});\n\t\t\tcase \"divideInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tif (b.int === 0n) {\n\t\t\t\t\t\tthrow callSite.runtimeError(\"division by zero\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcInt(callSite, a.int / b.int);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"modInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tif (b.int === 0n) {\n\t\t\t\t\t\tthrow callSite.runtimeError(\"division by zero\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcInt(callSite, a.int % b.int);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"equalsInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, a.int == b.int);\n\t\t\t\t});\n\t\t\tcase \"lessThanInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, a.int < b.int);\n\t\t\t\t});\n\t\t\tcase \"lessThanEqualsInteger\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, a.int <= b.int);\n\t\t\t\t});\n\t\t\tcase \"appendByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, a.bytes.concat(b.bytes));\n\t\t\t\t});\n\t\t\tcase \"consByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tlet bytes = b.bytes;\n\t\t\t\t\tbytes.unshift(Number(a.int % 256n));\n\t\t\t\t\treturn new UplcByteArray(callSite, bytes);\n\t\t\t\t});\n\t\t\tcase \"sliceByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 3, (callSite, _, a, b, c) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b, c);\n\n\t\t\t\t\tlet start = Number(a.int);\n\t\t\t\t\tlet n = Number(b.int);\n\t\t\t\t\tlet bytes = c.bytes;\n\t\t\t\t\tif (start < 0) {\n\t\t\t\t\t\tstart = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (start + n > bytes.length) {\n\t\t\t\t\t\tn = bytes.length - start;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (n < 0) {\n\t\t\t\t\t\tn = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet sub = bytes.slice(start, start + n);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, sub);\n\t\t\t\t});\n\t\t\tcase \"lengthOfByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcInt(callSite, BigInt(a.bytes.length));\n\t\t\t\t});\n\t\t\tcase \"indexByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tlet bytes = a.bytes;\n\t\t\t\t\tlet i = b.int;\n\t\t\t\t\tif (i < 0 || i >= bytes.length) {\n\t\t\t\t\t\tthrow new Error(\"index out of range\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new UplcInt(callSite, BigInt(bytes[Number(i)]));\n\t\t\t\t});\n\t\t\tcase \"equalsByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, ByteArrayData.comp(a.bytes, b.bytes) == 0);\n\t\t\t\t});\n\t\t\tcase \"lessThanByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, ByteArrayData.comp(a.bytes, b.bytes) == -1);\n\t\t\t\t});\n\t\t\tcase \"lessThanEqualsByteString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, ByteArrayData.comp(a.bytes, b.bytes) <= 0);\n\t\t\t\t});\n\t\t\tcase \"appendString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcString(callSite, a.string + b.string);\n\t\t\t\t});\n\t\t\tcase \"equalsString\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcBool(callSite, a.string == b.string);\n\t\t\t\t});\n\t\t\tcase \"encodeUtf8\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, textToBytes(a.string));\n\t\t\t\t});\n\t\t\tcase \"decodeUtf8\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new UplcString(callSite, bytesToText(a.bytes));\n\t\t\t\t\t} catch(_) {\n\t\t\t\t\t\tthrow callSite.runtimeError(\"invalid utf-8\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"sha2_256\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, Crypto.sha2_256(a.bytes))\n\t\t\t\t});\n\t\t\tcase \"sha3_256\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, Crypto.sha3(a.bytes))\n\t\t\t\t});\n\t\t\tcase \"blake2b_256\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, Crypto.blake2b(a.bytes)); \n\t\t\t\t});\n\t\t\tcase \"verifyEd25519Signature\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 3, (callSite, _, key, msg, signature) => {\n\t\t\t\t\trte.calcAndIncrCost(this, key, msg, signature);\n\n\t\t\t\t\tlet keyBytes = key.bytes;\n\t\t\t\t\tif (keyBytes.length != 32) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`expected key of length 32 for verifyEd25519Signature, got key of length ${keyBytes.length}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet msgBytes = msg.bytes;\n\t\t\t\t\t\n\t\t\t\t\tlet signatureBytes = signature.bytes;\n\t\t\t\t\tif (signatureBytes.length != 64) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`expected signature of length 64 for verifyEd25519Signature, got signature of length ${signatureBytes.length}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet ok = Crypto.Ed25519.verify(signatureBytes, msgBytes, keyBytes);\n\n\t\t\t\t\treturn new UplcBool(callSite, ok);\n\t\t\t\t});\n\t\t\tcase \"ifThenElse\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 3, (callSite, _, a, b, c) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b, c);\n\n\t\t\t\t\treturn a.bool ? b.copy(callSite) : c.copy(callSite);\n\t\t\t\t});\n\t\t\tcase \"chooseUnit\":\n\t\t\t\t// what is the point of this function?\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\ta.assertUnit();\n\n\t\t\t\t\treturn b.copy(callSite);\n\t\t\t\t});\n\t\t\tcase \"trace\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn rte.print(a.string).then(() => {\n\t\t\t\t\t\treturn b.copy(callSite);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tcase \"fstPair\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (a.isPair()) {\n\t\t\t\t\t\treturn a.first.copy(callSite);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`expected pair or data-pair for first arg, got '${a.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"sndPair\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (a.isPair()) {\n\t\t\t\t\t\treturn a.second.copy(callSite);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`expected pair or data-pair for first arg, got '${a.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"chooseList\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 3, (callSite, _, a, b, c) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b, c);\n\n\t\t\t\t\tif (a.isList()) {\n\t\t\t\t\t\tif (a.length == 0) {\n\t\t\t\t\t\t\treturn b.copy(callSite);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn c.copy(callSite);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`expected list or map first arg, got '${a.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"mkCons\":\n\t\t\t\t// only allow data items in list\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tif (b.isList()) {\n\t\t\t\t\t\tif (!b.itemType.isSameType(a)) {\n\t\t\t\t\t\t\tthrow callSite.typeError(`wrong type for 2nd arg of mkCons`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet lst = b.list;\n\t\t\t\t\t\tlst.unshift(a);\n\n\t\t\t\t\t\treturn new UplcList(callSite, b.itemType, lst);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`expected list or map for second arg, got '${b.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"headList\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (a.isList()) {\n\t\t\t\t\t\tconst lst = a.list;\n\t\t\t\t\t\tif (lst.length == 0) {\n\t\t\t\t\t\t\tthrow callSite.runtimeError(\"empty list\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lst[0].copy(callSite);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`__core__head expects list or map, got '${a.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"tailList\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (a.isList()) {\n\t\t\t\t\t\tlet lst = a.list;\n\t\t\t\t\t\tif (lst.length == 0) {\n\t\t\t\t\t\t\tthrow callSite.runtimeError(\"empty list\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn new UplcList(callSite, a.itemType, lst.slice(1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`__core__tail expects list or map, got '${a.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"nullList\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (a.isList()) {\n\t\t\t\t\t\treturn new UplcBool(callSite, a.list.length == 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow callSite.typeError(`__core__nullList expects list or map, got '${a.toString()}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"chooseData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 6, (callSite, _, a, b, c, d, e, f) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b, c, d, e, f);\n\n\t\t\t\t\tlet data = a.data;\n\n\t\t\t\t\tif (data instanceof ConstrData) {\n\t\t\t\t\t\treturn b;\n\t\t\t\t\t} else if (data instanceof MapData) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t} else if (data instanceof ListData) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t} else if (data instanceof IntData) {\n\t\t\t\t\t\treturn e;\n\t\t\t\t\t} else if (data instanceof ByteArrayData) {\n\t\t\t\t\t\treturn f;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"constrData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tconst i = a.int;\n\t\t\t\t\tassert(i >= 0);\n\n\t\t\t\t\tconst lst = b.list;\n\n\t\t\t\t\treturn new UplcDataValue(callSite, new ConstrData(Number(i), lst.map(item => item.data)));\n\t\t\t\t});\n\t\t\tcase \"mapData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcDataValue(callSite, new MapData(a.list.map(pair => {\n\t\t\t\t\t\treturn [pair.first.data, pair.second.data];\n\t\t\t\t\t})));\n\t\t\t\t});\n\t\t\tcase \"listData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcDataValue(callSite, new ListData(a.list.map(item => item.data)));\n\t\t\t\t});\n\t\t\tcase \"iData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\t\t\t\t\t\n\t\t\t\t\treturn new UplcDataValue(callSite, new IntData(a.int));\n\t\t\t\t});\n\t\t\tcase \"bData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcDataValue(callSite, new ByteArrayData(a.bytes));\n\t\t\t\t});\n\t\t\tcase \"unConstrData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (!a.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for arg of unConstrData, got ${a.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet data = a.data;\n\t\t\t\t\tif (!(data instanceof ConstrData)) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`unexpected unConstrData argument '${data.toString()}'`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcPair(callSite, new UplcInt(callSite, BigInt(data.index)), new UplcList(callSite, UplcType.newDataType(), data.fields.map(f => new UplcDataValue(callSite, f))));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"unMapData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (!a.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for arg of unMapData, got ${a.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet data = a.data;\n\t\t\t\t\tif (!(data instanceof MapData)) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`unexpected unMapData argument '${data.toString()}'`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcList(callSite, UplcType.newDataPairType(), data.map.map(([fst, snd]) => new UplcPair(callSite, new UplcDataValue(callSite, fst), new UplcDataValue(callSite, snd))));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"unListData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (!a.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for arg of unListData, got ${a.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet data = a.data;\n\t\t\t\t\tif (!(data instanceof ListData)) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`unexpected unListData argument '${data.toString()}'`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcList(callSite, UplcType.newDataType(), data.list.map(item => new UplcDataValue(callSite, item)));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"unIData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (!a.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for arg of unIData, got ${a.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet data = a.data;\n\t\t\t\t\tif (!(data instanceof IntData)) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`unexpected unIData argument '${data.toString()}'`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcInt(callSite, data.value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"unBData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\tif (!a.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for arg of unBData, got ${a.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet data = a.data;\n\t\t\t\t\tif (!(data instanceof ByteArrayData)) {\n\t\t\t\t\t\tthrow callSite.runtimeError(`unexpected unBData argument '${data.toString()}'`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new UplcByteArray(callSite, data.bytes);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tcase \"equalsData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\tif (!a.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for 1st arg of equalsData, got ${a.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!b.isData()) {\n\t\t\t\t\t\tthrow callSite.typeError(`expected data for 2nd arg of equalsData, got ${b.toString()}`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new UplcBool(callSite, a.data.isSame(b.data));\n\t\t\t\t});\n\t\t\tcase \"mkPairData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 2, (callSite, _, a, b) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a, b);\n\n\t\t\t\t\treturn new UplcPair(callSite, new UplcDataValue(callSite, a.data), new UplcDataValue(callSite, b.data));\n\t\t\t\t});\n\t\t\tcase \"mkNilData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\ta.assertUnit();\n\n\t\t\t\t\treturn new UplcList(callSite, UplcType.newDataType(), []);\n\t\t\t\t});\n\t\t\tcase \"mkNilPairData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\ta.assertUnit();\n\n\t\t\t\t\treturn new UplcList(callSite, UplcType.newDataPairType(), []);\n\t\t\t\t});\n\t\t\tcase \"serialiseData\":\n\t\t\t\treturn new UplcAnon(this.site, rte, 1, (callSite, _, a) => {\n\t\t\t\t\trte.calcAndIncrCost(this, a);\n\n\t\t\t\t\treturn new UplcByteArray(callSite, a.data.toCbor());\n\t\t\t\t});\n\t\t\tcase \"verifyEcdsaSecp256k1Signature\":\n\t\t\tcase \"verifySchnorrSecp256k1Signature\":\n\t\t\t\tthrow new Error(\"no immediate need, so don't bother yet\");\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`builtin ${this.#name} not yet implemented`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns appropriate callback wrapped with UplcAnon depending on builtin name.\n\t * Emulates every Plutus-core that Helios exposes to the user.\n\t * @param {UplcRte | UplcStack} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\trte.incrBuiltinCost();\n\n\t\t/**\n\t\t * @type {UplcValue}\n\t\t */\n\t\tlet v = this.evalInternal(rte);\n\n\t\tif  (typeof this.#name === 'string') {\n\t\t\tlet nForce = UPLC_BUILTINS[findUplcBuiltin(\"__core__\" + this.#name)].forceCount;\n\n\t\t\tfor  (let i = 0; i < nForce; i++) {\n\t\t\t\tconst vPrev = v;\n\n\t\t\t\tv = new UplcDelayedValue(this.site, () => vPrev);\n\t\t\t}\n\t\t}\n \n\t\treturn v;\n\t}\n}\n\n\n\n///////////////////////////\n// Section 11: Uplc program\n///////////////////////////\n\n/**\n * This library uses version \"1.0.0\" of Plutus-core\n * @package\n */\nconst UPLC_VERSION_COMPONENTS = [1n, 0n, 0n];\n\n /**\n  * i.e. \"1.0.0\"\n  * @package\n  * @type {string}\n  */\nconst UPLC_VERSION = UPLC_VERSION_COMPONENTS.map(c => c.toString()).join(\".\");\n\n/**\n * This library uses V2 of the Plutus Ledger API, and is no longer compatible with V1\n * @package\n */\nconst PLUTUS_SCRIPT_VERSION = \"PlutusScriptV2\";\n\n/**\n * @package\n * @type {Object.<string, number>}\n */\n const UPLC_TAG_WIDTHS = {\n\tterm:      4,\n\ttype:      3,\n\tconstType: 4,\n\tbuiltin:   7,\n\tconstant:  4,\n\tkind:      1\n};\n\n/**\n * Plutus-core program class\n */\n class UplcProgram {\n\t#version;\n\t#expr;\n\t#purpose;\n\n\t/**\n\t * @param {UplcTerm} expr \n\t * @param {?number} purpose // TODO: enum type\n\t * @param {UplcInt[]} version\n\t */\n\tconstructor(expr, purpose = null, version = UPLC_VERSION_COMPONENTS.map(v => new UplcInt(expr.site, v, false))) {\n\t\tthis.#version = version;\n\t\tthis.#expr = expr;\n\t\tthis.#purpose = purpose;\n\t}\n\n\t/**\n\t * @type {UplcTerm}\n\t */\n\tget expr() {\n\t\treturn this.#expr;\n\t}\n\n\t/**\n\t * @type {Site}\n\t */\n\tget site() {\n\t\treturn new Site(this.#expr.site.src, 0);\n\t}\n\n\t/**\n\t * Returns the IR source\n\t * @type {string}\n\t */\n\tget src() {\n\t\treturn this.site.src.raw;\n\t}\n\n\t/**\n\t * Returns version of Plutus-core (!== Plutus script version!)\n\t * @type {string}\n\t */\n\tget versionString() {\n\t\treturn this.#version.map(v => v.toString()).join(\".\");\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tplutusScriptVersion() {\n\t\t// Note: only supports PlutusScriptV2 for now\n\t\treturn PLUTUS_SCRIPT_VERSION;\n\t}\n\n\t/**\n\t * Returns 1 for PlutusScriptV1, 2 for PlutusScriptV2\n\t * @returns {number}\n\t */\n\tversionTag() {\n\t\tlet v = this.plutusScriptVersion();\n\n\t\tswitch (v) {\n\t\t\tcase \"PlutusScriptV1\":\n\t\t\t\treturn 1;\n\t\t\tcase \"PlutusScriptV2\":\n\t\t\t\treturn 2;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unhandled script version '${v}'`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(program ${this.versionString} ${this.#expr.toString()})`;\n\t}\n\n\t/**\n\t * Flat encodes the entire Plutus-core program.\n\t * Note that final padding isn't added now but is handled by bitWriter upon finalization.\n\t * @param {BitWriter} bitWriter \n\t */\n\ttoFlat(bitWriter) {\n\t\tfor (let v of this.#version) {\n\t\t\tv.toFlatUnsigned(bitWriter);\n\t\t}\n\n\t\tthis.#expr.toFlat(bitWriter);\n\t}\n\n\t/**\n\t * @param {UplcRte} rte \n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync eval(rte) {\n\t\treturn this.#expr.eval(rte);\n\t}\n\n\t/**\n\t * Evaluates the term contained in UplcProgram (assuming it is a lambda term)\n\t * @param {?UplcValue[]} args\n\t * @param {UplcRTECallbacks} callbacks\n\t * @param {?NetworkParams} networkParams\n\t * @returns {Promise<UplcValue>}\n\t */\n\tasync runInternal(args, callbacks = DEFAULT_UPLC_RTE_CALLBACKS, networkParams = null) {\n\t\tassertDefined(callbacks);\n\n\t\tlet rte = new UplcRte(callbacks, networkParams);\n\n\t\t// add the startup costs\n\t\trte.incrStartupCost();\n\n\t\tlet fn = await this.eval(rte);\n\n\t\t// program site is at pos 0, but now the call site is actually at the end \n\t\tlet globalCallSite = new Site(this.site.src, this.site.src.length);\n\t\t\n\t\t/** @type {UplcValue} */\n\t\tlet result = fn;\n\n\t\tif (args !== null) {\n\t\t\tif (args.length === 0 && fn instanceof UplcDelayedValue) {\n\t\t\t\tresult = await fn.force();\n\t\t\t} else {\n\t\t\t\tfor (let arg of args) {\n\t\t\t\t\t// each call also adds to the total cost\n\t\t\t\t\trte.incrCallCost();\n\t\t\t\t\trte.incrConstCost();\n\n\t\t\t\t\tresult = await result.call(rte, globalCallSite, arg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Wrap the top-level term with consecutive UplcCall terms\n\t * No checks are performed whether this makes sense or not, so beware\n\t * Throws an error if you are trying to apply an  with anon func.\n\t * @param {(UplcValue | HeliosData)[]} args\n\t * @returns {UplcProgram} - a new UplcProgram instance\n\t */\n\tapply(args) {\n\t\tlet expr = this.expr;\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg instanceof UplcValue) {\n\t\t\t\tif (arg instanceof UplcAnon) {\n\t\t\t\t\tthrow new Error(\"UplcAnon cannot be applied to UplcProgram\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\texpr = new UplcCall(arg.site, expr, new UplcConst(arg));\n\t\t\t} else if (arg instanceof HeliosData) {\n\t\t\t\texpr = new UplcCall(Site.dummy(), expr, new UplcConst(new UplcDataValue(Site.dummy(), arg._toUplcData())));\n\t\t\t}\n\t\t}\n\n\t\treturn new UplcProgram(expr, this.#purpose, this.#version);\n\t}\n\n\t/**\n\t * @param {?UplcValue[]} args - if null the top-level term is returned as a value\n\t * @param {UplcRTECallbacks} callbacks \n\t * @param {?NetworkParams} networkParams\n\t * @returns {Promise<UplcValue | UserError>}\n\t */\n\tasync run(args, callbacks = DEFAULT_UPLC_RTE_CALLBACKS, networkParams = null) {\n\t\ttry {\n\t\t\treturn await this.runInternal(args, callbacks, networkParams);\n\t\t} catch (e) {\n\t\t\tif (!(e instanceof UserError)) {\n\t\t\t\tthrow e;\n\t\t\t} else {\n\t\t\t\treturn e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {?UplcValue[]} args\n\t * @returns {Promise<[(UplcValue | UserError), string[]]>}\n\t */\n\tasync runWithPrint(args) {\n\t\t/**\n\t\t * @type {string[]}\n\t\t */\n\t\tconst messages = [];\n\n\t\tconst callbacks = Object.assign({}, DEFAULT_UPLC_RTE_CALLBACKS);\n\n\t\tcallbacks.onPrint = async function(msg) {\n\t\t\tmessages.push(msg);\n\t\t};\n\n\t\tconst res = await this.run(args, callbacks);\n\n\t\treturn [res, messages];\n\t}\n\n\t/**\n\t * @typedef {{\n\t *   mem: bigint, \n\t *   cpu: bigint,\n\t *   size: number,\n\t *   builtins: {[name: string]: Cost},\n\t *   terms: {[name: string]: Cost},\n\t *   result: UserError | UplcValue,\n\t *   messages: string[]\n\t * }} Profile\n\t * mem:  in 8 byte words (i.e. 1 mem unit is 64 bits)\n\t * cpu:  in reference cpu microseconds\n\t * size: in bytes\n\t * builtins: breakdown per builtin\n\t * terms: breakdown per termtype\n\t * result: result of evaluation\n\t * messages: printed messages (can be helpful when debugging)\n\t */\n\n\t/**\n\t * @param {UplcValue[]} args\n\t * @param {NetworkParams} networkParams\n\t * @returns {Promise<Profile>}\n\t */\n\tasync profile(args, networkParams) {\n\t\tlet callbacks = Object.assign({}, DEFAULT_UPLC_RTE_CALLBACKS);\n\n\t\tlet memCost = 0n;\n\t\tlet cpuCost = 0n;\n\n\t\t/**\n\t\t * @type {{[name: string]: Cost}}\n\t\t */\n\t\tconst builtins = {};\n\n\t\t/**\n\t\t * @type {{[name: string]: Cost}}\n\t\t */\n\t\tconst terms = {};\n\t\t\n\t\t/**\n\t\t * @type {(name: string, isTerm: boolean, cost: Cost) => void}\n\t\t */\n\t\tcallbacks.onIncrCost = (name, isTerm, cost) => {\n\t\t\tmemCost += cost.mem;\n\t\t\tcpuCost += cost.cpu;\n\n\t\t\tif (name !== undefined) {\n\t\t\t\tif (isTerm) {\n\t\t\t\t\tconst prev = terms[name];\n\t\t\t\t\tif (prev !== undefined) {\n\t\t\t\t\t\tterms[name] = {\n\t\t\t\t\t\t\tmem: prev.mem + cost.mem,\n\t\t\t\t\t\t\tcpu: prev.cpu + cost.cpu\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterms[name] = cost;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst prev = builtins[name];\n\n\t\t\t\t\tif (prev !== undefined) {\n\t\t\t\t\t\tbuiltins[name] = {\n\t\t\t\t\t\t\tmem: prev.mem + cost.mem,\n\t\t\t\t\t\t\tcpu: prev.cpu + cost.cpu\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuiltins[name] = cost;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t/** @type {string[]} */\n\t\tlet messages = [];\n\n\t\t/**\n\t\t * @type {(msg: string) => Promise<void>}\n\t\t */\n\t\tcallbacks.onPrint = async function(msg) {\n\t\t\tmessages.push(msg);\n\t\t};\n\n\t\tlet result = await this.run(args, callbacks, networkParams);\n\n\t\treturn {\n\t\t\tmem: memCost,\n\t\t\tcpu: cpuCost,\n\t\t\tsize: this.calcSize(),\n\t\t\tbuiltins: builtins,\n\t\t\tterms: terms,\n\t\t\tresult: result,\n\t\t\tmessages: messages\n\t\t};\n\t}\n\n\t/**\n\t * Returns flat bytes of serialized script\n\t * @returns {number[]}\n\t */\n\tserializeBytes() {\n\t\tlet bitWriter = new BitWriter();\n\n\t\tthis.toFlat(bitWriter);\n\n\t\treturn bitWriter.finalize();\n\t}\n\n\t/**\n\t * Calculates the on chain size of the program (number of bytes).\n\t * @returns {number}\n\t */\n\tcalcSize() {\n\t\treturn this.serializeBytes().length;\n\t}\n\n\t/**\n\t * Returns the Cbor encoding of a script (flat bytes wrapped twice in Cbor bytearray)\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeBytes(CborData.encodeBytes(this.serializeBytes()));\n\t}\n\n\t/**\n\t * Returns Plutus-core script in JSON format (as string, not as object!)\n\t * @returns {string}\n\t */\n\tserialize() {\n\t\tlet cborHex = bytesToHex(this.toCbor());\n\n\t\treturn `{\"type\": \"${this.plutusScriptVersion()}\", \"description\": \"\", \"cborHex\": \"${cborHex}\"}`;\n\t}\n\n\t/**\n\t * @returns {number[]} - 28 byte hash\n\t */\n\thash() {\n\t\tlet innerBytes = CborData.encodeBytes(this.serializeBytes());\n\n\t\tinnerBytes.unshift(this.versionTag());\n\n\t\t// used for both script addresses and minting policy hashes\n\t\treturn Crypto.blake2b(innerBytes, 28);\n\t}\n\n\t/**\n\t * @type {ValidatorHash}\n\t */\n\tget validatorHash() {\n\t\tassert(this.#purpose === null || this.#purpose === ScriptPurpose.Spending);\n\n\t\treturn new ValidatorHash(this.hash());\n\t}\n\n\t/**\n\t * @type {MintingPolicyHash}\n\t */\n\tget mintingPolicyHash() {\n\t\tassert(this.#purpose === null || this.#purpose === ScriptPurpose.Minting);\n\n\t\treturn new MintingPolicyHash(this.hash());\n\t}\n\n\t/**\n\t * @type {StakingValidatorHash}\n\t */\n\tget stakingValidatorHash() {\n\t\tassert(this.#purpose === null || this.#purpose === ScriptPurpose.Staking);\n\n\t\treturn new StakingValidatorHash(this.hash());\n\t}\n\n\t/**\n\t * @param {number[] | string} bytes \n\t * @returns {UplcProgram}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tif (typeof bytes == \"string\") {\n\t\t\treturn UplcProgram.fromCbor(hexToBytes(bytes))\n\t\t} else {\n\t\t\treturn deserializeUplcBytes(CborData.decodeBytes(CborData.decodeBytes(bytes)));\n\t\t}\n\t}\n}\n\n/**\n * Plutus-core deserializer creates a Plutus-core form an array of bytes\n */\n class UplcDeserializer extends BitReader {\n\t\n\t/**\n\t * @param {number[]} bytes \n\t */\n\tconstructor(bytes) {\n\t\tsuper(bytes);\n\t}\n\n\t/**\n\t * @param {string} category \n\t * @returns {number}\n\t */\n\ttagWidth(category) {\n\t\tassert(category in UPLC_TAG_WIDTHS, `unknown tag category ${category.toString()}`);\n\n\t\treturn UPLC_TAG_WIDTHS[category];\n\t}\n\n\t/**\n\t * Returns the name of a known builtin\n\t * Returns the integer id if id is out of range (thus if the builtin is unknown)\n\t * @param {number} id\n\t * @returns {string | number}\n\t */\n\tbuiltinName(id) {\n\t\tlet all = UPLC_BUILTINS;\n\n\t\tif (id >= 0 && id < all.length) {\n\t\t\treturn all[id].name;\n\t\t} else {\n\t\t\tconsole.error(`Warning: builtin id ${id.toString()} out of range`);\n\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t/**\n\t * Reads a Plutus-core list with a specified size per element\n\t * Calls itself recursively until the end of the list is reached\n\t * @param {number} elemSize \n\t * @returns {number[]}\n\t */\n\treadLinkedList(elemSize) {\n\t\t// Cons and Nil constructors come from Lisp/Haskell\n\t\t//  cons 'a' creates a linked list node,\n\t\t//  nil      creates an empty linked list\n\t\tlet nilOrCons = this.readBits(1);\n\n\t\tif (nilOrCons == 0) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\treturn [this.readBits(elemSize)].concat(this.readLinkedList(elemSize));\n\t\t}\n\t}\n\n\t/**\n\t * Reads a single UplcTerm\n\t * @returns {UplcTerm}\n\t */\n\treadTerm() {\n\t\tlet tag = this.readBits(this.tagWidth(\"term\"));\n\n\t\tswitch (tag) {\n\t\t\tcase 0:\n\t\t\t\treturn this.readVariable();\n\t\t\tcase 1:\n\t\t\t\treturn this.readDelay();\n\t\t\tcase 2:\n\t\t\t\treturn this.readLambda();\n\t\t\tcase 3:\n\t\t\t\treturn this.readCall(); // aka function application\n\t\t\tcase 4:\n\t\t\t\treturn this.readConstant();\n\t\t\tcase 5:\n\t\t\t\treturn this.readForce();\n\t\t\tcase 6:\n\t\t\t\treturn new UplcError(Site.dummy());\n\t\t\tcase 7:\n\t\t\t\treturn this.readBuiltin();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"term tag \" + tag.toString() + \" unhandled\");\n\t\t}\n\t}\n\n\t/**\n\t * Reads a single unbounded integer\n\t * @param {boolean} signed \n\t * @returns {UplcInt}\n\t */\n\treadInteger(signed = false) {\n\t\tlet bytes = [];\n\n\t\tlet b = this.readByte();\n\t\tbytes.push(b);\n\n\t\twhile (!UplcInt.rawByteIsLast(b)) {\n\t\t\tb = this.readByte();\n\t\t\tbytes.push(b);\n\t\t}\n\n\t\t// strip the leading bit\n\t\tlet res = new UplcInt(Site.dummy(), UplcInt.bytesToBigInt(bytes.map(b => UplcInt.parseRawByte(b))), false); // raw int is unsigned\n\n\t\tif (signed) {\n\t\t\tres = res.toSigned(); // unzigzag is performed here\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Reads bytearray or string characters\n\t * @returns {number[]}\n\t */\n\treadBytes() {\n\t\tthis.moveToByteBoundary(true);\n\n\t\tlet bytes = [];\n\n\t\tlet nChunk = this.readByte();\n\n\t\twhile (nChunk > 0) {\n\t\t\tfor (let i = 0; i < nChunk; i++) {\n\t\t\t\tbytes.push(this.readByte());\n\t\t\t}\n\n\t\t\tnChunk = this.readByte();\n\t\t}\n\n\t\treturn bytes;\n\t}\n\n\t/**\n\t * Reads a literal bytearray\n\t * @returns {UplcByteArray}\n\t */\n\treadByteArray() {\n\t\tlet bytes = this.readBytes();\n\n\t\treturn new UplcByteArray(Site.dummy(), bytes);\n\t}\n\n\t/**\n\t * Reads a literal string\n\t * @returns {UplcString}\n\t */\n\treadString() {\n\t\tlet bytes = this.readBytes();\n\n\t\tlet s = bytesToText(bytes);\n\n\t\treturn new UplcString(Site.dummy(), s);\n\t}\n\n\t/**\n\t * @param {() => UplcValue} typedReader \n\t * @returns {UplcValue[]}\n\t */\n\treadList(typedReader) {\n\t\t/** @type {UplcValue[]} */\n\t\tlet items = [];\n\n\t\twhile (this.readBits(1) == 1) {\n\t\t\titems.push(typedReader());\n\t\t}\n\n\t\treturn items;\n\t}\n\n\t/**\n\t * Reads a data object\n\t * @returns {UplcData}\n\t */\n\treadData() {\n\t\tlet bytes = this.readBytes();\n\n\t\treturn UplcData.fromCbor(bytes);\n\t}\n\n\t/**\n\t * Reads a variable term\n\t * @returns {UplcVariable}\n\t */\n\treadVariable() {\n\t\tlet index = this.readInteger()\n\n\t\treturn new UplcVariable(Site.dummy(), index);\n\t}\n\n\t/**\n\t * Reads a lambda expression term\n\t * @returns {UplcLambda}\n\t */\n\treadLambda() {\n\t\tlet rhs = this.readTerm();\n\n\t\treturn new UplcLambda(Site.dummy(), rhs);\n\t}\n\n\t/**\n\t * Reads a function application term\n\t * @returns {UplcCall}\n\t */\n\treadCall() {\n\t\tlet a = this.readTerm();\n\t\tlet b = this.readTerm();\n\n\t\treturn new UplcCall(Site.dummy(), a, b);\n\t}\n\n\t/**\n\t * Reads a single constant\n\t * @returns {UplcConst}\n\t */\n\treadConstant() {\n\t\tlet typeList = this.readLinkedList(this.tagWidth(\"constType\"));\n\n\t\tlet res = new UplcConst(this.readTypedValue(typeList));\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Reads a single constant\n\t * @param {number[]} typeList \n\t * @returns {UplcValue}\n\t */\n\treadTypedValue(typeList) {\n\t\tconst typedReader = this.constructTypedReader(typeList);\n\n\t\tassertEq(typeList.length, 0, \"Did not consume all type parameters\");\n\n\t\treturn typedReader();\n\t}\n\n\t/**\n\t * Constructs a reader for a single construct recursively\n\t * @param {number[]} typeList \n\t * NOTE: the implicit assumption is that this functions modifies the typeList\n\t * by removing all elements that it \"consumed\" to define a type\n\t * @returns {() => UplcValue}\n\t */\n\tconstructTypedReader(typeList){\n\t\tconst type = assertDefined(typeList.shift());\n\n\t\tswitch (type) {\n\t\t\tcase 0: // signed Integer\n\t\t\t\treturn () => this.readInteger(true);\n\t\t\tcase 1: // bytearray\n\t\t\t\treturn () => this.readByteArray();\n\t\t\tcase 2: // utf8-string\n\t\t\t\treturn () => this.readString();\n\t\t\tcase 3:\n\t\t\t\treturn () => new UplcUnit(Site.dummy()); // no reading needed\n\t\t\tcase 4: // Bool\n\t\t\t\treturn () => new UplcBool(Site.dummy(), this.readBits(1) == 1);\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\t\tthrow new Error(\"unexpected type tag without type application\");\n\t\t\tcase 7:\n\t\t\t\tlet containerType = assertDefined(typeList.shift());\n\t\t\t\tif (containerType == 5) {\n\t\t\t\t\t// typeList is consumed by the construct call, so make sure to read it before!\n\t\t\t\t\tconst listType = UplcType.fromNumbers(typeList);\n\t\t\t\t\tconst typeReader = this.constructTypedReader(typeList);\n\n\t\t\t\t\treturn () => new UplcList(Site.dummy(), listType, this.readList(typeReader));\n\t\t\t\t} else {\n\t\t\t\t\tassertEq(containerType, 7, \"Unexpected type tag\");\n\t\t\t\t\tcontainerType = assertDefined(typeList.shift());\n\t\t\t\t\tif (containerType == 6) {\n\t\t\t\t\t\t// typeList is consumed by the construct call, so make sure to read it in correct order!\n\t\t\t\t\t\tconst leftReader = this.constructTypedReader(typeList);\n\t\t\t\t\t\tconst rightReader = this.constructTypedReader(typeList);\n\t\t\t\t\t\treturn () => new UplcPair(Site.dummy(), leftReader(), rightReader())\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase 8:\n\t\t\t\treturn () => new UplcDataValue(Site.dummy(), this.readData());\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unhandled constant type ${type.toString()}`);\n\t\t}\n\t}\n\n\t/**\n\t * Reads a delay term\n\t * @returns {UplcDelay}\n\t */\n\treadDelay() {\n\t\tlet expr = this.readTerm();\n\n\t\treturn new UplcDelay(Site.dummy(), expr);\n\t}\n\n\t/**\n\t * Reads a force term\n\t * @returns {UplcForce}\n\t */\n\treadForce() {\n\t\tlet expr = this.readTerm();\n\n\t\treturn new UplcForce(Site.dummy(), expr);\n\t}\n\n\t/**\n\t * Reads a builtin function ref term\n\t * @returns {UplcBuiltin}\n\t */\n\treadBuiltin() {\n\t\tlet id = this.readBits(this.tagWidth(\"builtin\"));\n\n\t\tlet name = this.builtinName(id);\n\n\t\treturn new UplcBuiltin(Site.dummy(), name);\n\t}\n\n\t/**\n\t * Move to the next byteboundary\n\t * (and check that we are at the end)\n\t */\n\tfinalize() {\n\t\tthis.moveToByteBoundary(true);\n\t}\n}\n\n/**\n * @param {number[]} bytes \n * @returns {UplcProgram}\n */\nfunction deserializeUplcBytes(bytes) {\n\tlet reader = new UplcDeserializer(bytes);\n\n\tlet version = [\n\t\treader.readInteger(),\n\t\treader.readInteger(),\n\t\treader.readInteger(),\n\t];\n\n\tlet versionKey = version.map(v => v.toString()).join(\".\");\n\n\tif (versionKey != UPLC_VERSION) {\n\t\tconsole.error(`Warning: Plutus-core script doesn't match version of Helios (expected ${UPLC_VERSION}, got ${versionKey})`);\n\t}\n\n\tlet expr = reader.readTerm();\n\n\treader.finalize();\n\n\treturn new UplcProgram(expr, null, version);\n}\n\n/**\n * Parses a plutus core program. Returns a UplcProgram object\n * @param {string} jsonString \n * @returns {UplcProgram}\n */\nfunction deserializeUplc(jsonString) {\n\tlet obj = JSON.parse(jsonString);\n\n\tif (!(\"cborHex\" in obj)) {\n\t\tthrow UserError.syntaxError(new Source(jsonString), 0, 1, \"cborHex field not in json\")\n\t}\n\n\tlet cborHex = obj.cborHex;\n\tif (typeof cborHex !== \"string\") {\n\t\tlet src = new Source(jsonString);\n\t\tlet re = /cborHex/;\n\t\tlet cborHexMatch = jsonString.match(re);\n\t\tif (cborHexMatch === null) {\n\t\t\tthrow UserError.syntaxError(src, 0, 1, \"'cborHex' key not found\");\n\t\t} else {\n\t\t\tconst pos = jsonString.search(re)\n\t\t\tthrow UserError.syntaxError(src, pos, pos+1, \"cborHex not a string\");\n\t\t}\n\t}\n\n\treturn UplcProgram.fromCbor(hexToBytes(cborHex));\n}\n\n\n///////////////////////////\n// Section 12: Tokenization\n///////////////////////////\n\nclass Tokenizer {\n\t#src;\n\t#pos;\n\n\t/**\n\t * Tokens are accumulated in '#ts'\n\t * @type {Token[]} \n\t */\n\t#ts;\n\t#codeMap;\n\t#codeMapPos;\n\n\t/**\n\t * @param {Source} src \n\t * @param {?CodeMap} codeMap \n\t */\n\tconstructor(src, codeMap = null) {\n\t\tassert(src instanceof Source);\n\n\t\tthis.#src = src;\n\t\tthis.#pos = 0;\n\t\tthis.#ts = []; // reset to empty to list at start of tokenize()\n\t\tthis.#codeMap = codeMap; // can be a list of pairs [pos, site in another source]\n\t\tthis.#codeMapPos = 0; // not used if codeMap === null\n\t}\n\n\tincrPos() {\n\t\tthis.#pos += 1;\n\t}\n\n\tdecrPos() {\n\t\tthis.#pos -= 1;\n\t\tassert(this.#pos >= 0);\n\t}\n\n\tget currentSite() {\n\t\treturn new Site(this.#src, this.#pos);\n\t}\n\n\t/**\n\t * @param {Token} t \n\t */\n\tpushToken(t) {\n\t\tthis.#ts.push(t);\n\n\t\tif (this.#codeMap !== null && this.#codeMapPos < this.#codeMap.length) {\n\t\t\tlet pair = (this.#codeMap[this.#codeMapPos]);\n\n\t\t\tif (pair[0] == t.site.startPos) {\n\t\t\t\tt.site.setCodeMapSite(pair[1]);\n\t\t\t\tthis.#codeMapPos += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Reads a single char from the source and advances #pos by one\n\t * @returns {string}\n\t */\n\treadChar() {\n\t\tassert(this.#pos >= 0);\n\n\t\tlet c;\n\t\tif (this.#pos < this.#src.length) {\n\t\t\tc = this.#src.getChar(this.#pos);\n\t\t} else {\n\t\t\tc = '\\0';\n\t\t}\n\n\t\tthis.incrPos();\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * Decreases #pos by one\n\t */\n\tunreadChar() {\n\t\tthis.decrPos();\n\t}\n\n\t/**\n\t * Start reading precisely one token\n\t * @param {Site} site \n\t * @param {string} c \n\t */\n\treadToken(site, c) {\n\t\tif (c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n\t\t\tthis.readWord(site, c);\n\t\t} else if (c == '/') {\n\t\t\tthis.readMaybeComment(site);\n\t\t} else if (c == '0') {\n\t\t\tthis.readSpecialInteger(site);\n\t\t} else if (c >= '1' && c <= '9') {\n\t\t\tthis.readDecimalInteger(site, c);\n\t\t} else if (c == '#') {\n\t\t\tthis.readByteArray(site);\n\t\t} else if (c == '\"') {\n\t\t\tthis.readString(site);\n\t\t} else if (c == '?' || c == '!' || c == '%' || c == '&' || (c >= '(' && c <= '.') || (c >= ':' && c <= '>') || c == '[' || c == ']' || (c >= '{' && c <= '}')) {\n\t\t\tthis.readSymbol(site, c);\n\t\t} else if (!(c == ' ' || c == '\\n' || c == '\\t' || c == '\\r')) {\n\t\t\tsite.syntaxError(`invalid source character '${c}' (utf-8 not yet supported outside string literals)`);\n\t\t}\n\t}\n\n\t/**\n\t * Tokenize the complete source.\n\t * Nests groups before returning a list of tokens\n\t * @returns {Token[] | null}\n\t */\n\ttokenize() {\n\t\t// reset #ts\n\t\tthis.#ts = [];\n\n\t\tlet site = this.currentSite;\n\t\tlet c = this.readChar();\n\n\t\twhile (c != '\\0') {\n\t\t\tthis.readToken(site, c);\n\n\t\t\tsite = this.currentSite;\n\t\t\tc = this.readChar();\n\t\t}\n\n\t\treturn this.nestGroups(this.#ts);\n\t}\n\n\t/** \n\t * Returns a generator\n\t * Use gen.next().value to access to the next Token\n\t * Doesn't perform any grouping\n\t * Used for quickly parsing the ScriptPurpose header of a script\n\t * @returns {Generator<Token>}\n\t */\n\t*streamTokens() {\n\t\tthis.#ts = [];\n\n\t\tlet site = this.currentSite;\n\t\tlet c = this.readChar();\n\n\t\twhile (c != '\\0') {\n\t\t\tthis.readToken(site, c);\n\n\t\t\tlet t = this.#ts.shift();\n\t\t\twhile (t != undefined) {\n\t\t\t\tyield t;\n\t\t\t\tt = this.#ts.shift();\n\t\t\t}\n\n\t\t\tsite = this.currentSite;\n\t\t\tc = this.readChar();\n\t\t}\n\n\t\tassert(this.#ts.length == 0);\n\t}\n\n\t/**\n\t * Reads one word token.\n\t * Immediately turns \"true\" or \"false\" into a BoolLiteral instead of keeping it as Word\n\t * @param {Site} site\n\t * @param {string} c0 - first character \n\t */\n\treadWord(site, c0) {\n\t\tlet chars = [];\n\n\t\tlet c = c0;\n\t\twhile (c != '\\0') {\n\t\t\tif (c == '_' || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n\t\t\t\tchars.push(c);\n\t\t\t\tc = this.readChar();\n\t\t\t} else {\n\t\t\t\tthis.unreadChar();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet value = chars.join('');\n\n\t\tif (value == \"true\" || value == \"false\") {\n\t\t\tthis.pushToken(\n\t\t\t\tnew BoolLiteral(\n\t\t\t\t\tnew Site(site.src, site.startPos, this.currentSite.startPos),\n\t\t\t\t\tvalue == \"true\"\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pushToken(\n\t\t\t\tnew Word(\n\t\t\t\t\tnew Site(site.src, site.startPos, this.currentSite.startPos),\n\t\t\t\t\tvalue\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Reads and discards a comment if current '/' char is followed by '/' or '*'.\n\t * Otherwise pushes Symbol('/') onto #ts\n\t * @param {Site} site \n\t */\n\t// comments are discarded\n\treadMaybeComment(site) {\n\t\tlet c = this.readChar();\n\n\t\tif (c == '\\0') {\n\t\t\tthis.pushToken(new SymbolToken(site, '/'));\n\t\t} else if (c == '/') {\n\t\t\tthis.readSingleLineComment();\n\t\t} else if (c == '*') {\n\t\t\tthis.readMultiLineComment(site);\n\t\t} else {\n\t\t\tthis.pushToken(new SymbolToken(site, '/'));\n\t\t\tthis.unreadChar();\n\t\t}\n\t}\n\n\t/**\n\t * Reads and discards a single line comment (from '//' to end-of-line)\n\t */\n\treadSingleLineComment() {\n\t\tlet c = this.readChar();\n\n\t\twhile (c != '\\n' && c != '\\0') {\n\t\t\tc = this.readChar();\n\t\t}\n\t}\n\n\t/**\n\t * Reads and discards a multi-line comment (from '/' '*' to '*' '/')\n\t * @param {Site} site \n\t */\n\treadMultiLineComment(site) {\n\t\tlet prev = '';\n\t\tlet c = this.readChar();\n\n\t\twhile (true) {\n\t\t\tprev = c;\n\t\t\tc = this.readChar();\n\n\t\t\tif (c == '/' && prev == '*') {\n\t\t\t\tbreak;\n\t\t\t} else if (c == '\\0') {\n\t\t\t\tconst errorSite = new Site(site.src, site.startPos, this.currentSite.startPos);\n\t\t\t\terrorSite.syntaxError(\"unterminated multiline comment\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * REads a literal integer\n\t * @param {Site} site \n\t */\n\treadSpecialInteger(site) {\n\t\tlet c = this.readChar();\n\n\t\tif (c == '\\0') {\n\t\t\tthis.pushToken(new IntLiteral(site, 0n));\n\t\t} else if (c == 'b') {\n\t\t\tthis.readBinaryInteger(site);\n\t\t} else if (c == 'o') {\n\t\t\tthis.readOctalInteger(site);\n\t\t} else if (c == 'x') {\n\t\t\tthis.readHexInteger(site);\n\t\t} else if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n\t\t\tsite.syntaxError(`bad literal integer type 0${c}`);\n\t\t} else if (c >= '0' && c <= '9') {\n\t\t\tthis.readDecimalInteger(site, c);\n\t\t} else {\n\t\t\tthis.pushToken(new IntLiteral(site, 0n));\n\t\t\tthis.unreadChar();\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t */\n\treadBinaryInteger(site) {\n\t\tthis.readRadixInteger(site, \"0b\", c => (c == '0' || c == '1'));\n\t}\n\n\t/**\n\t * @param {Site} site \n\t */\n\treadOctalInteger(site) {\n\t\tthis.readRadixInteger(site, \"0o\", c => (c >= '0' && c <= '7'));\n\t}\n\n\t/**\n\t * @param {Site} site \n\t */\n\treadHexInteger(site) {\n\t\tthis.readRadixInteger(site, \"0x\",\n\t\t\tc => ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')));\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} c0 - first character\n\t */\n\treadDecimalInteger(site, c0) {\n\t\tlet chars = [];\n\n\t\tlet c = c0;\n\t\twhile (c != '\\0') {\n\t\t\tif (c >= '0' && c <= '9') {\n\t\t\t\tchars.push(c);\n\t\t\t} else {\n\t\t\t\tif ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n\t\t\t\t\tconst errorSite = new Site(site.src, site.startPos, this.currentSite.startPos);\n\n\t\t\t\t\terrorSite.syntaxError(\"invalid syntax for decimal integer literal\");\n\t\t\t\t}\n\n\t\t\t\tthis.unreadChar();\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tc = this.readChar();\n\t\t}\n\n\t\tthis.pushToken(\n\t\t\tnew IntLiteral(\n\t\t\t\tnew Site(site.src, site.startPos, this.currentSite.startPos),\n\t\t\t\tBigInt(chars.join(''))\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} prefix \n\t * @param {(c: string) => boolean} valid - checks if character is valid as part of the radix\n\t */\n\treadRadixInteger(site, prefix, valid) {\n\t\tlet c = this.readChar();\n\n\t\tlet chars = [];\n\n\t\tif (!(valid(c))) {\n\t\t\tconst errorSite = new Site(site.src, site.startPos, this.currentSite.startPos);\n\n\t\t\terrorSite.syntaxError(`expected at least one char for ${prefix} integer literal`);\n\n\t\t\tthis.unreadChar();\n\t\t\treturn;\n\t\t}\n\n\t\twhile (c != '\\0') {\n\t\t\tif (valid(c)) {\n\t\t\t\tchars.push(c);\n\t\t\t} else {\n\t\t\t\tif ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n\t\t\t\t\tconst errorSite = new Site(site.src, site.startPos, this.currentSite.startPos);\n\n\t\t\t\t\terrorSite.syntaxError(`invalid syntax for ${prefix} integer literal`);\n\t\t\t\t}\n\n\t\t\t\tthis.unreadChar();\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tc = this.readChar();\n\t\t}\n\n\t\tthis.pushToken(\n\t\t\tnew IntLiteral(\n\t\t\t\tnew Site(site.src, site.startPos, this.currentSite.startPos),\n\t\t\t\tBigInt(prefix + chars.join(''))\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Reads literal hexadecimal representation of ByteArray\n\t * @param {Site} site \n\t */\n\treadByteArray(site) {\n\t\tlet c = this.readChar();\n\n\t\tlet chars = [];\n\n\t\t// case doesn't matter\n\t\twhile ((c >= 'a' && c <= 'f') || (c >= '0' && c <= '9')) {\n\t\t\tchars.push(c);\n\t\t\tc = this.readChar();\n\t\t}\n\n\t\t// empty byteArray is allowed (eg. for Ada mintingPolicyHash)\n\n\t\t// last char is the one that made the while loop break, so should be unread\n\t\tthis.unreadChar();\n\n\t\tlet bytes = hexToBytes(chars.join(''));\n\n\t\tthis.pushToken(\n\t\t\tnew ByteArrayLiteral(\n\t\t\t\tnew Site(site.src, site.startPos, this.currentSite.startPos),\n\t\t\t\tbytes\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Reads literal string delimited by double quotes.\n\t * Allows for three escape character: '\\\\', '\\n' and '\\t'\n\t * @param {Site} site \n\t */\n\treadString(site) {\n\t\tlet c = this.readChar();\n\n\t\tlet chars = [];\n\n\t\tlet escaping = false;\n\t\t/** @type {?Site} */\n\t\tlet escapeSite = null; // for escape syntax errors\n\n\t\twhile (!(!escaping && c == '\"')) {\n\t\t\tif (c == '\\0') {\n\t\t\t\tsite.syntaxError(\"unmatched '\\\"'\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (escaping) {\n\t\t\t\tif (c == 'n') {\n\t\t\t\t\tchars.push('\\n');\n\t\t\t\t} else if (c == 't') {\n\t\t\t\t\tchars.push('\\t');\n\t\t\t\t} else if (c == '\\\\') {\n\t\t\t\t\tchars.push('\\\\');\n\t\t\t\t} else if (c == '\"') {\n\t\t\t\t\tchars.push(c);\n\t\t\t\t} else if (escapeSite !== null) {\n\t\t\t\t\tconst errorSite = new Site(escapeSite.src, escapeSite.startPos, this.currentSite.startPos);\n\n\t\t\t\t\terrorSite.syntaxError(`invalid escape sequence ${c}`);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"escape site should be non-null\");\n\t\t\t\t}\n\n\t\t\t\tescaping = false;\n\t\t\t\tescapeSite = null;\n\t\t\t} else {\n\t\t\t\tif (c == '\\\\') {\n\t\t\t\t\tescapeSite = this.currentSite;\n\t\t\t\t\tescaping = true;\n\t\t\t\t} else {\n\t\t\t\t\tchars.push(c);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc = this.readChar();\n\t\t}\n\n\t\tthis.pushToken(\n\t\t\tnew StringLiteral(\n\t\t\t\tnew Site(site.src, site.startPos, this.currentSite.startPos),\n\t\t\t\tchars.join('')\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Reads single or double character symbols\n\t * @param {Site} site \n\t * @param {string} c0 - first character\n\t */\n\treadSymbol(site, c0) {\n\t\tlet chars = [c0];\n\n\t\t/** @type {(second: string) => boolean} */\n\t\tlet parseSecondChar = (second) => {\n\t\t\tlet d = this.readChar();\n\n\t\t\tif (d == second) {\n\t\t\t\tchars.push(d);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tthis.unreadChar();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (c0 == '|') {\n\t\t\tparseSecondChar('|');\n\t\t} else if (c0 == '&') {\n\t\t\tparseSecondChar('&');\n\t\t} else if (c0 == '=') {\n\t\t\tif (!parseSecondChar('=')) {\n\t\t\t\tparseSecondChar('>');\n\t\t\t}\n\t\t} else if (c0 == '!' || c0 == '<' || c0 == '>') { // could be !=, ==, <= or >=\n\t\t\tparseSecondChar('=');\n\t\t} else if (c0 == ':') {\n\t\t\tparseSecondChar(':');\n\t\t} else if (c0 == '-') {\n\t\t\tparseSecondChar('>');\n\t\t}\n\n\t\tthis.pushToken(\n\t\t\tnew SymbolToken(\n\t\t\t\tnew Site(site.src, site.startPos, site.endPos),\n\t\t\t\tchars.join('')\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Separates tokens in fields (separted by commas)\n\t * @param {Token[]} ts \n\t * @returns {Group | null}\n\t */\n\tbuildGroup(ts) {\n\t\tconst open = assertDefined(ts.shift()).assertSymbol();\n\n\t\tif (!open) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst stack = [open]; // stack of symbols\n\t\tlet curField = [];\n\t\tlet fields = [];\n\n\t\t/** @type {?SymbolToken} */\n\t\tlet firstComma = null;\n\n\t\t/** @type {?SymbolToken} */\n\t\tlet lastComma = null;\n\n\t\t/** @type {?Site} */\n\t\tlet endSite = null;\n\n\t\twhile (stack.length > 0 && ts.length > 0) {\n\t\t\tconst t = assertToken(ts.shift(), open.site);\n\n\t\t\tif (!t) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst prev = stack.pop();\n\n\t\t\tendSite = t.site;\n\n\t\t\tif (t != undefined && prev != undefined) {\n\t\t\t\tif (!t.isSymbol(Group.matchSymbol(prev))) {\n\t\t\t\t\tstack.push(prev);\n\n\t\t\t\t\tif (Group.isCloseSymbol(t)) {\n\t\t\t\t\t\tt.site.syntaxError(`unmatched '${assertDefined(t.assertSymbol()).value}'`);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else if (Group.isOpenSymbol(t)) {\n\t\t\t\t\t\tstack.push(assertDefined(t.assertSymbol()));\n\t\t\t\t\t\tcurField.push(t);\n\t\t\t\t\t} else if (t.isSymbol(\",\") && stack.length == 1) {\n\t\t\t\t\t\tif (firstComma === null) {\n\t\t\t\t\t\t\tfirstComma = t.assertSymbol();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastComma = t.assertSymbol();\n\t\t\t\t\t\tif (curField.length == 0) {\n\t\t\t\t\t\t\tt.site.syntaxError(\"empty field\");\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfields.push(curField);\n\t\t\t\t\t\t\tcurField = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurField.push(t);\n\t\t\t\t\t}\n\t\t\t\t} else if (stack.length > 0) {\n\t\t\t\t\tcurField.push(t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t}\n\t\t}\n\n\t\tlet last = stack.pop();\n\t\tif (last != undefined) {\n\t\t\tlast.syntaxError(`EOF while matching '${last.value}'`);\n\t\t\treturn null;\n\t\t}\n\n\t\tif (curField.length > 0) {\n\t\t\t// add removing field\n\t\t\tfields.push(curField);\n\t\t} else if (lastComma !== null) {\n\t\t\tlastComma.syntaxError(`trailing comma`);\n\t\t\treturn null;\n\t\t}\n\n\t\tconst groupedFields = reduceNull(fields.map(f => this.nestGroups(f)));\n\n\t\tif (!groupedFields) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet site = open.site;\n\n\t\tif (endSite) {\n\t\t\tsite = site.merge(endSite);\n\t\t}\n\n\t\treturn new Group(site, open.value, groupedFields, firstComma);\n\t}\n\n\t/**\n\t * Match group open with group close symbols in order to form groups.\n\t * This is recursively applied to nested groups.\n\t * @param {Token[]} ts \n\t * @returns {Token[] | null}\n\t */\n\tnestGroups(ts) {\n\t\t/**\n\t\t * @type {(Token | null)[]}\n\t\t */\n\t\tlet res = [];\n\n\t\tlet t = ts.shift();\n\t\twhile (t != undefined) {\n\t\t\tif (Group.isOpenSymbol(t)) {\n\t\t\t\tts.unshift(t);\n\n\t\t\t\tres.push(this.buildGroup(ts));\n\t\t\t} else if (Group.isCloseSymbol(t)) {\n\t\t\t\tt.syntaxError(`unmatched '${assertDefined(t.assertSymbol()).value}'`);\n\t\t\t} else {\n\t\t\t\tres.push(t);\n\t\t\t}\n\n\t\t\tt = ts.shift();\n\t\t}\n\n\t\treturn reduceNull(res);\n\t}\n}\n\n/**\n * Tokenizes a string (wrapped in Source)\n * Also used by VSCode plugin\n * @param {Source} src \n * @returns {Token[] | null}\n */\nfunction tokenize(src) {\n\tlet tokenizer = new Tokenizer(src);\n\n\treturn tokenizer.tokenize();\n}\n\n/**\n * Tokenizes an IR string with a codemap to the original source\n * @package\n * @param {string} rawSrc \n * @param {CodeMap} codeMap \n * @returns {Token[]}\n */\nfunction tokenizeIR(rawSrc, codeMap) {\n\tlet src = new Source(rawSrc);\n\n\t// the Tokenizer for Helios can simply be reused for the IR\n\tlet tokenizer = new Tokenizer(src, codeMap);\n\n\tconst ts = tokenizer.tokenize();\n\n\tif (src.errors.length > 0) {\n\t\tthrow src.errors[0];\n\t} else if (ts === null) {\n\t\tthrow new Error(\"should've been thrown above\");\n\t}\n\n\treturn ts;\n}\n\n\n\n///////////////////////////////////\n// Section 13: Helios eval entities\n///////////////////////////////////\n\n/**\n * We can't use StructStatement etc. directly because that would give circular dependencies\n * @typedef {{\n *   name: Word,\n *   getTypeMember(key: Word): EvalEntity,\n *   getInstanceMember(key: Word): Instance,\n *   nFields(site: Site): number,\n *   hasField(key: Word): boolean,\n *   getFieldType(site: Site, i: number): Type,\n * \t getFieldIndex(site: Site, name: string): number,\n *   getFieldName(i: number): string,\n *   getConstrIndex(site: Site): number,\n *   nEnumMembers(site: Site): number,\n *   path: string,\n *   use: () => void\n * }} UserTypeStatement\n */\n\n/**\n * We can't use ConstStatement directly because that would give a circular dependency\n * @typedef {{\n *   name: Word,\n *   path: string,\n *   use: () => void\n * }} ConstTypeStatement\n */\n\n/**\n * We can't use EnumMember directly because that would give a circular dependency\n * @typedef {UserTypeStatement & {\n * \t parent: EnumTypeStatement,\n *   getConstrIndex(site: Site): number\n*  }} EnumMemberTypeStatement\n */\n\n/**\n * We can't use EnumStatement directly because that would give a circular dependency\n * @typedef {UserTypeStatement & {\n *   type: Type,\n *   nEnumMembers(site: Site): number,\n *   getEnumMember(site: Site, i: number): EnumMemberTypeStatement\n * }} EnumTypeStatement\n */\n\n/**\n * We can't use FuncStatement directly because that would give a circular dependency\n * @typedef {{\n *   path: string,\n *   use: () => void,\n *   setRecursive: () => void,\n *   isRecursive: () => boolean\n * }} RecurseableStatement\n */\n\n/**\n * We can't use Scope directly because that would give a circular dependency\n * @typedef {{\n *   isRecursive: (statement: RecurseableStatement) => boolean\n * }} RecursivenessChecker\n */\n\n/**\n * Base class of Instance and Type.\n * Any member function that takes 'site' as its first argument throws a TypeError if used incorrectly (eg. calling a non-FuncType).\n * @package\n */\nclass EvalEntity {\n\tconstructor() {\n\t\tthis.used_ = false;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @returns {Type}\n\t */\n\tassertType(site) {\n\t\tthrow site.typeError(\"not a type\");\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisType() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @returns {Instance}\n\t */\n\tassertValue(site) {\n\t\tthrow site.typeError(\"not a value\");\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisValue() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisUsed() {\n\t\treturn this.used_;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Used by Scope to mark named Values/Types as used.\n\t * At the end of the Scope an error is thrown if any named Values/Types aren't used.\n\t */\n\tmarkAsUsed() {\n\t\tthis.used_ = true;\n\t}\n\n\t/**\n\t * Gets type of a value. Throws error when trying to get type of type.\n\t * @param {Site} site\n\t * @returns {Type}\n\t */\n\tgetType(site) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns 'true' if 'this' is a base-type of 'type'. Throws an error if 'this' isn't a Type.\n\t * @param {Site} site\n\t * @param {Type} type\n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns 'true' if 'this' is an instance of 'type'. Throws an error if 'this' isn't a Instance.\n\t * 'type' can be a class, or a class instance.\n\t * @param {Site} site \n\t * @param {Type | TypeClass} type \n\t * @returns {boolean}\n\t */\n\tisInstanceOf(site, type) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns the return type of a function (wrapped as a Instance) if the args have the correct types. \n\t * Throws an error if 'this' isn't a function value, or if the args don't correspond.\n\t * @param {Site} site \n\t * @param {Instance[]} args\n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Instance}\n\t */\n\tcall(site, args, namedArgs = {}) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Gets a member of a Type (i.e. the '::' operator).\n\t * Throws an error if the member doesn't exist or if 'this' isn't a DataType.\n\t * @param {Word} name\n\t * @returns {EvalEntity} - can be Instance or Type\n\t */\n\tgetTypeMember(name) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Gets a member of a Instance (i.e. the '.' operator).\n\t * Throws an error if the member doesn't exist or if 'this' isn't a DataInstance.\n\t * @param {Word} name\n\t * @returns {Instance} - can be FuncInstance or DataInstance\n\t */\n\tgetInstanceMember(name) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns the number of fields in a struct.\n\t * Used to check if a literal struct constructor is correct.\n\t * @param {Site} site\n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns the type of struct or enumMember fields.\n\t * Used to check if literal struct constructor is correct.\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns the index of struct or enumMember fields.\n\t * Used to order literal struct fields.\n\t * @param {Site} site\n\t * @param {string} name\n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns the constructor index so Plutus-core data can be created correctly.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Types are used during type-checking of Helios\n * @package\n */\nclass Type extends EvalEntity {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Compares two types. Throws an error if neither is a Type.\n\t * @example\n\t * Type.same(Site.dummy(), new IntType(), new IntType()) => true\n\t * @param {Site} site \n\t * @param {Type} a \n\t * @param {Type} b \n\t * @returns {boolean}\n\t */\n\tstatic same(site, a, b) {\n\t\treturn a.isBaseOf(site, b) && b.isBaseOf(site, a);\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisType() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @returns {Type}\n\t */\n\tassertType(site) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisValue() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the underlying Type. Throws an error in this case because a Type can't return another Type.\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tgetType(site) {\n\t\tthrow site.typeError(`can't use getType(), '${this.toString()}' isn't an instance`);\n\t}\n\n\t/**\n\t * Throws an error because a Type can't be an instance of another Type.\n\t * @param {Site} site \n\t * @param {Type | TypeClass} type\n\t * @returns {boolean}\n\t */\n\tisInstanceOf(site, type) {\n\t\tthrow site.typeError(`can't use isInstanceOf(), '${this.toString()}' isn't an instance`);\n\t}\n\n\t/**\n\t * Throws an error because a Type isn't callable.\n\t * @param {Site} site \n\t * @param {Instance[]} args \n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Instance}\n\t */\n\tcall(site, args, namedArgs = {}) {\n\t\tthrow site.typeError(\"not callable\");\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisEnumMember() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Throws error for non-enum members\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tparentType(site) {\n\t\tthrow site.typeError(`'${this.toString}' isn't an enum member`);\n\t}\n\n\t/**\n\t * Returns number of members of an enum type\n\t * Throws an error if not an enum type\n\t * @param {Site} site\n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\tthrow site.typeError(`'${this.toString()}' isn't an enum type`);\n\t}\n\n\t/**\n\t * Returns the base path in the IR (eg. __helios__bool, __helios__error, etc.)\n\t * @type {string}\n\t */\n\tget path() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\tthrow new Error(`${this.toString()} doesn't have a corresponding userType`);\n\t}\n}\n\n\n/**\n * AnyType matches any other type in the type checker.\n * @package\n */\nclass AnyType extends Type {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} other \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, other) {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn \"Any\";\n\t}\n}\n\n/**\n * Base class of non-FuncTypes.\n */\nclass DataType extends Type {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\treturn Object.getPrototypeOf(this) == Object.getPrototypeOf(type);\n\t}\n}\n\n/**\n * Matches everything except FuncType.\n * Used by find_datum_hash.\n */\nclass AnyDataType extends Type {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {Type} type\n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\treturn !(type instanceof FuncType);\n\t}\n}\n\n/**\n * Base class of all builtin types (eg. IntType)\n * Note: any builtin type that inherits from BuiltinType must implement get path()\n * @package\n */\nclass BuiltinType extends DataType {\n\t#macrosAllowed; // macros are allowed after the definition of the main function\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.#macrosAllowed = false;\n\t}\n\n\tallowMacros() {\n\t\tthis.#macrosAllowed = true;\n\t}\n\n\tget macrosAllowed() {\n\t\treturn this.#macrosAllowed;\n\t}\n\n\t/**\n\t * Returns Type member (i.e. '::' operator).\n\t * @param {Word} name\n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__eq\":\n\t\t\tcase \"__neq\":\n\t\t\t\treturn Instance.new(new FuncType([this, this], new BoolType()));\n\t\t\tcase \"from_data\":\n\t\t\t\treturn Instance.new(new FuncType([new RawDataType()], this));\n\t\t\tdefault:\n\t\t\t\tthrow name.referenceError(`${this.toString()}::${name.value} undefined`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns one of default instance members, or throws an error.\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"serialize\":\n\t\t\t\treturn Instance.new(new FuncType([], new ByteArrayType()));\n\t\t\tdefault:\n\t\t\t\tthrow name.referenceError(`${this.toString()}.${name.value} undefined`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of data fields in a builtin type (not yet used)\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Returns the constructor index of a builtin type (eg. 1 for Option::None).\n\t * By default non-enum builtin types that are encoded as Plutus-core data use the '0' constructor index.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Use 'path' getter instead of 'toIR()' in order to get the base path.\n\t */\n\ttoIR() {\n\t\tthrow new Error(\"use path getter instead\");\n\t}\n}\n\n/**\n * @package\n */\nclass BuiltinEnumMember extends BuiltinType {\n\t#parentType;\n\n\t/**\n\t * @param {BuiltinType} parentType \n\t */\n\tconstructor(parentType) {\n\t\tsuper();\n\t\tthis.#parentType = parentType;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisEnumMember() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tparentType(site) {\n\t\treturn this.#parentType;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__eq\":\n\t\t\tcase \"__neq\":\n\t\t\t\treturn Instance.new(new FuncType([this.#parentType, this.#parentType], new BoolType()));\n\t\t\tcase \"from_data\":\n\t\t\t\tthrow name.referenceError(`'${this.toString()}::from_data' undefined`);\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n}\n\n/**\n * Type wrapper for Struct statements and Enums and Enum members.\n * @package\n * @template {UserTypeStatement} T\n */\nclass StatementType extends DataType {\n\t#statement;\n\n\t/**\n\t * @param {T} statement \n\t */\n\tconstructor(statement) {\n\t\tsuper();\n\t\tthis.#statement = statement;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\treturn this.#statement.name.value;\n\t}\n\n\t/**\n\t * @returns {T}\n\t */\n\tget statement() {\n\t\treturn this.#statement;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\tif (type instanceof StatementType) {\n\t\t\treturn type.path.startsWith(this.path);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the name of the type.\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#statement.name.toString();\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\treturn this.#statement.getTypeMember(name);\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\treturn this.#statement.getInstanceMember(name);\n\t}\n\n\t/**\n\t * Returns the number of fields in a Struct or in an EnumMember.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\treturn this.#statement.nFields(site);\n\t}\n\n\t/**\n\t * Returns the i-th field of a Struct or an EnumMember\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\treturn this.#statement.getFieldType(site, i);\n\t}\n\n\t/**\n\t * Returns the index of a named field of a Struct or an EnumMember\n\t * @param {Site} site\n\t * @param {string} name\n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\treturn this.#statement.getFieldIndex(site, name);\n\t}\n\n\t/**\n\t * Returns the constructor index so that __core__constrData can be called correctly.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn this.#statement.getConstrIndex(site);\n\t}\n\n\t/**\n\t * Returns the number of members of an EnumStatement\n\t * @param {Site} site\n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn this.#statement.nEnumMembers(site);\n\t}\n\n\tget path() {\n\t\treturn this.#statement.path;\n\t}\n\n\t/**\n\t * A StatementType can instantiate itself if the underlying statement is an enum member with no fields\n\t * @param {Site} site\n\t * @returns {Instance}\n\t */\n\tassertValue(site) {\n\t\tthrow site.typeError(`expected a value, got a type`);\n\t}\n}\n\n/**\n * @package\n * @extends {StatementType<UserTypeStatement>}\n */\nclass StructStatementType extends StatementType {\n\t/**\n\t * @param {UserTypeStatement} statement - can't use StructStatement because that would give a circular dependency\n\t */\n\tconstructor(statement) {\n\t\tsuper(statement);\n\t}\n\n\t/**\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\tconst statement = this.statement;\n\n\t\tconst nFields = this.nFields(Site.dummy());\n\n\t\t/**\n\t\t * @type {[string, Type][]} - [name, type]\n\t\t */\n\t\tconst fields = [];\n\n\t\tfor (let i = 0; i < nFields; i++) {\n\t\t\tfields.push([statement.getFieldName(i), statement.getFieldType(Site.dummy(), i)]);\n\t\t}\n\n\t\tclass Struct extends HeliosData {\n\t\t\t/**\n\t\t\t * So we can access fields by index\n\t\t\t * @type {HeliosData[]}\n\t\t\t */\n\t\t\t#fields;\n\n\t\t\t/**\n\t\t\t * @param  {...any} args\n\t\t\t */\n\t\t\tconstructor(...args) {\n\t\t\t\tsuper();\n\t\t\t\tif (args.length != nFields) {\n\t\t\t\t\tthrow new Error(`expected ${nFields} args, got ${args.length}`);\n\t\t\t\t}\n\n\t\t\t\tthis.#fields = [];\n\n\t\t\t\targs.forEach((arg, i) => {\n\t\t\t\t\tconst [fieldName, fieldType] = fields[i];\n\t\t\t\t\tconst FieldClass = fieldType.userType;\n\n\t\t\t\t\tconst instance = arg instanceof FieldClass ? arg : new FieldClass(arg);\n\n\t\t\t\t\tthis.#fields.push(instance);\n\t\t\t\t\tthis[fieldName] = instance;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Overload 'instanceof' operator\n\t\t\t * @param {any} other \n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tstatic [Symbol.hasInstance](other) {\n\t\t\t\treturn (other._structStatement === statement) && (other instanceof HeliosData);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {UserTypeStatement}\n\t\t\t */\n\t\t\tget _structStatement() {\n\t\t\t\treturn statement;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @returns {UplcData}\n\t\t\t */\n\t\t\t_toUplcData() {\n\t\t\t\tif (this.#fields.length == 1) {\n\t\t\t\t\treturn this.#fields[0]._toUplcData();\n\t\t\t\t} else {\n\t\t\t\t\treturn new ListData(this.#fields.map(f => f._toUplcData()));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string | number[]} bytes \n\t\t\t * @returns {Struct}\n\t\t\t */\n\t\t\tstatic fromUplcCbor(bytes) {\n\t\t\t\treturn Struct.fromUplcData(UplcData.fromCbor(bytes));\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {UplcData} data \n\t\t\t * @returns {Struct}\n\t\t\t */\n\t\t\tstatic fromUplcData(data) {\n\t\t\t\tconst dataItems = data.list;\n\n\t\t\t\tif (dataItems.length != nFields) {\n\t\t\t\t\tthrow new Error(\"unexpected number of fields\");\n\t\t\t\t}\n\n\t\t\t\tconst args = dataItems.map((item, i) => {\n\t\t\t\t\treturn fields[i][1].userType.fromUplcData(item);\n\t\t\t\t});\n\n\t\t\t\treturn new Struct(...args);\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(Struct, \"name\", {value: this.name, writable: false});\t\t\n\n\t\treturn Struct;\n\t}\n}\n\n/**\n * @package\n * @extends {StatementType<EnumTypeStatement>}\n */\nclass EnumStatementType extends StatementType {\n\t/**\n\t * @param {EnumTypeStatement} statement - can't use EnumStatement because that would give a circular dependency\n\t */\n\tconstructor(statement) {\n\t\tsuper(statement);\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\tconst statement = this.statement;\n\n\t\tconst nVariants = statement.nEnumMembers(Site.dummy());\n\n\t\t/**\n\t\t * @type {HeliosDataClass<HeliosData>[]}\n\t\t */\n\t\tconst variants = [];\n\n\t\tfor (let i = 0; i < nVariants; i++) {\n\t\t\tvariants.push(\n\t\t\t\t(new EnumMemberStatementType(statement.getEnumMember(Site.dummy(), i))).userType\n\t\t\t);\n\t\t}\n\n\t\tclass Enum extends HeliosData {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthrow new Error(\"can't be constructed (hint: construct an enum)\");\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Overload 'instanceof' operator\n\t\t\t * @param {any} other \n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tstatic [Symbol.hasInstance](other) {\n\t\t\t\treturn (other._enumStatement === statement) && (other instanceof HeliosData);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {EnumTypeStatement}\n\t\t\t */\n\t\t\tget _enumStatement() {\n\t\t\t\treturn statement;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {string | number[]} bytes\n\t\t\t * @returns {HeliosData}\n\t\t\t */\n\t\t\tstatic fromUplcCbor(bytes) {\n\t\t\t\treturn Enum.fromUplcData(UplcData.fromCbor(bytes));\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {UplcData} data \n\t\t\t * @returns {HeliosData}\n\t\t\t */\n\t\t\tstatic fromUplcData(data) {\n\t\t\t\tconst variant = assertDefined(variants[data.index], \"index out of range\");\n\n\t\t\t\treturn variant.fromUplcData(data);\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(Enum, \"name\", {value: this.name, writable: false});\n\n\t\tfor (let v of variants) {\n\t\t\tObject.defineProperty(Enum, v.name, {value: v, writable: false});\n\t\t}\n\n\t\treturn Enum;\n\t}\n}\n\n/**\n * @package\n * @extends {StatementType<EnumMemberTypeStatement>}\n */\nclass EnumMemberStatementType extends StatementType {\n    /**\n     * @param {EnumMemberTypeStatement} statement - can't use EnumMember because that would give a circular dependency\n     */\n    constructor(statement) {\n        super(statement);\n    }\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisEnumMember() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tparentType(site) {\n\t\treturn this.statement.parent.type;\n\t}\n\n    /**\n\t * A StatementType can instantiate itself if the underlying statement is an enum member with no fields\n\t * @package\n\t * @param {Site} site\n\t * @returns {Instance}\n\t */\n    assertValue(site) {\n        if (this.statement.nFields(site) == 0) {\n            return Instance.new(this);\n        } else {\n            throw site.typeError(`expected '{...}' after '${this.statement.name.toString()}'`);\n        }\n    }\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\tconst statement = this.statement;\n\n\t\tconst enumStatement = statement.parent;\n\n\t\tconst index = statement.getConstrIndex(Site.dummy());\n\n\t\tconst nFields = this.nFields(Site.dummy());\n\n\t\t/**\n\t\t * @type {[string, Type][]} - [name, type]\n\t\t */\n\t\tconst fields = [];\n\n\t\tfor (let i = 0; i < nFields; i++) {\n\t\t\tfields.push([statement.getFieldName(i), statement.getFieldType(Site.dummy(), i)]);\n\t\t}\n\n\t\t// similar to Struct\n\t\tclass EnumVariant extends HeliosData {\n\t\t\t/**\n\t\t\t * So we can access fields by index\n\t\t\t * @type {HeliosData[]}\n\t\t\t */\n\t\t\t#fields;\n\n\t\t\t/**\n\t\t\t * @param  {...any} args\n\t\t\t */\n\t\t\tconstructor(...args) {\n\t\t\t\tsuper();\n\t\t\t\tif (args.length != nFields) {\n\t\t\t\t\tthrow new Error(`expected ${nFields} args, got ${args.length}`);\n\t\t\t\t}\n \n\t\t\t\tthis.#fields = [];\n \n\t\t\t\targs.forEach((arg, i) => {\n\t\t\t\t\tconst [fieldName, fieldType] = fields[i];\n\t\t\t\t\tconst FieldClass = fieldType.userType;\n \n\t\t\t\t\tconst instance = arg instanceof FieldClass ? arg : new FieldClass(arg);\n\n \t\t\t\t\tthis.#fields.push(instance);\n\t\t\t\t\tthis[fieldName] = instance;\n\n\t\t\t\t});\n\t\t\t}\n \n\t\t\t/**\n\t\t\t * Overload 'instanceof' operator\n\t\t\t * @param {any} other \n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tstatic [Symbol.hasInstance](other) {\n\t\t\t\treturn (other._enumVariantStatement === statement) && (other instanceof HeliosData);\n\t\t\t}\n \n\t\t\t/**\n\t\t\t * @type {EnumTypeStatement}\n\t\t\t */\n\t\t\tget _enumStatement() {\n\t\t\t\treturn enumStatement;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {EnumMemberTypeStatement}\n\t\t\t */\n\t\t\tget _enumVariantStatement() {\n\t\t\t\treturn statement;\n\t\t\t}\n \n\t\t\t/**\n\t\t\t * @returns {UplcData}\n\t\t\t */\n\t\t\t_toUplcData() {\n\t\t\t\treturn new ConstrData(index, this.#fields.map(f => f._toUplcData()));\n\t\t\t}\n \n\t\t\t/**\n\t\t\t * @param {string | number[]} bytes \n\t\t\t * @returns {EnumVariant}\n\t\t\t */\n\t\t\tstatic fromUplcCbor(bytes) {\n\t\t\t\treturn EnumVariant.fromUplcData(UplcData.fromCbor(bytes));\n\t\t\t}\n \n\t\t\t/**\n\t\t\t * @param {UplcData} data \n\t\t\t * @returns {EnumVariant}\n\t\t\t */\n\t\t\tstatic fromUplcData(data) {\n\t\t\t\tassert(data.index == index, \"wrong index\");\n\n\t\t\t\tconst dataItems = data.list;\n \n\t\t\t\tif (dataItems.length != nFields) {\n\t\t\t\t\tthrow new Error(\"unexpected number of fields\");\n\t\t\t\t}\n \n\t\t\t\tconst args = dataItems.map((item, i) => {\n\t\t\t\t\treturn fields[i][1].userType.fromUplcData(item);\n\t\t\t\t});\n \n\t\t\t\treturn new EnumVariant(...args);\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(EnumVariant, \"name\", {value: this.name, writable: false});\n\n\t\treturn EnumVariant;\n\t}\n}\n\n/**\n * @package\n */\nclass ArgType {\n\t#name;\n\t#type;\n\t#optional;\n\n\t/**\n\t * \n\t * @param {null | Word} name \n\t * @param {Type} type \n\t * @param {boolean} optional \n\t */\n\tconstructor(name, type, optional = false) {\n\t\tthis.#name = name;\n\t\tthis.#type = type;\n\t\tthis.#optional = optional;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\tif (this.#name === null) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn this.#name.toString();\n\t\t}\n\t}\n\t/**\n\t * @type {Type}\n\t */\n\tget type() {\n\t\treturn this.#type;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisNamed() {\n\t\treturn this.#name !== null;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisOptional() {\n\t\treturn this.#optional;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn [\n\t\t\tthis.#name != null ? `${this.#name.toString()}: ` : \"\",\n\t\t\tthis.#optional ? \"?\" : \"\",\n\t\t\tthis.#type.toString()\n\t\t].join(\"\");\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {ArgType} other \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, other) {\n\t\t// if this arg has a default value, the other arg must also have a default value\n\t\tif (this.#optional && !other.#optional) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// if this is named, the other must be named as well\n\t\tif (this.#name != null) {\n\t\t\treturn this.#name.toString() == (other.#name?.toString() ?? \"\");\n\t\t}\n\n\t\tif (this.#type instanceof ParamType) {\n\t\t\tthis.#type.setType(site, other.#type);\n\t\t} else {\n\t\t\tif (!other.#type.isBaseOf(site, this.#type)) { // note the reversal of the check\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n/**\n * Function type with arg types and a return type\n * @package\n */\nclass FuncType extends Type {\n\t/**\n\t * @type {ArgType[]}\n\t */\n\t#argTypes;\n\n\t/**\n\t * @type {Type[]}\n\t */\n\t#retTypes;\n\n\t/**\n\t * @param {Type[] | ArgType[]} argTypes \n\t * @param {Type | Type[]} retTypes \n\t */\n\tconstructor(argTypes, retTypes) {\n\t\tsuper();\n\t\tthis.#argTypes = argTypes.map(at => {\n\t\t\tif (at instanceof Type) {\n\t\t\t\treturn new ArgType(null, at);\n\t\t\t} else {\n\t\t\t\treturn at;\n\t\t\t}\n\t\t});\n\n\t\tif (!Array.isArray(retTypes)) {\n\t\t\tretTypes = [retTypes];\n\t\t}\n\n\t\tthis.#retTypes = retTypes;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget nArgs() {\n\t\treturn this.#argTypes.length;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget nNonOptArgs() {\n\t\treturn this.#argTypes.filter(at => !at.isOptional()).length;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget nOptArgs() {\n\t\treturn this.#argTypes.filter(at => at.isOptional()).length;\n\t}\n\n\t/**\n\t * @type {Type[]}\n\t */\n\tget argTypes() {\n\t\treturn this.#argTypes.slice().map(at => at.type);\n\t}\n\n\t/**\n\t * @type {Type[]}\n\t */\n\tget retTypes() {\n\t\treturn this.#retTypes;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tif (this.#retTypes.length === 1) {\n\t\t\treturn `(${this.#argTypes.map(a => a.toString()).join(\", \")}) -> ${this.#retTypes.toString()}`;\n\t\t} else {\n\t\t\treturn `(${this.#argTypes.map(a => a.toString()).join(\", \")}) -> (${this.#retTypes.map(t => t.toString()).join(\", \")})`;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the type of the first arg is the same as 'type'\n\t * Also returns false if there are no args.\n\t * For a method to be a valid instance member its first argument must also be named 'self', but that is checked elsewhere\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisMaybeMethod(site, type) {\n\t\tif (this.#argTypes.length > 0) {\n\t\t\treturn Type.same(site, this.#argTypes[0].type, type);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/** \n\t * Checks if any of 'this' argTypes or retType is same as Type.\n\t * Only if this checks return true is the association allowed.\n\t * @param {Site} site\n\t * @param {Type} type\n\t * @returns {boolean}\n\t */\n\tisAssociated(site, type) {\n\t\tfor (let arg of this.#argTypes) {\n\t\t\tif (Type.same(site, arg.type, type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tfor (let rt of this.#retTypes) {\n\t\t\tif (Type.same(site, type, rt)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if 'this' is a base type of another FuncType.\n\t * The number of args needs to be the same.\n\t * Each argType of the FuncType we are checking against needs to be the same or less specific (i.e. isBaseOf(this.#argTypes[i]))\n\t * The retType of 'this' needs to be the same or more specific\n\t * @param {Site} site \n\t * @param {Type} other \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, other) {\n\t\tif (other instanceof FuncType) {\n\t\t\tif (this.nNonOptArgs != other.nNonOptArgs) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < this.nNonOptArgs; i++) {\n\t\t\t\t\tif (!this.#argTypes[i].isBaseOf(site, other.#argTypes[i])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.#retTypes.length === other.#retTypes.length) {\n\t\t\t\t\tfor (let i = 0; i < this.#retTypes.length; i++) {\n\t\t\t\t\t\tif (!this.#retTypes[i].isBaseOf(site, other.#retTypes[i])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t/**\n\t * Throws an error if name isn't found\n\t * @param {Site} site \n\t * @param {string} name \n\t * @returns {number}\n\t */\n\tgetNamedIndex(site, name) {\n\t\tconst i = this.#argTypes.findIndex(at => at.name == name);\n\n\t\tif (i == -1) {\n\t\t\tthrow site.typeError(`arg name ${name} not found`);\n\t\t} else {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if arg types are valid.\n\t * Throws errors if not valid. Returns the return type if valid. \n\t * @param {Site} site \n\t * @param {Instance[]} posArgs\n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Type[]}\n\t */\n\tcheckCall(site, posArgs, namedArgs = {}) {\n\t\tif (posArgs.length < this.nNonOptArgs) {\n\t\t\t// check if each nonOptArg is covered by the named args\n\t\t\tfor (let i = 0; i < this.nNonOptArgs; i++) {\n\t\t\t\tif (!this.#argTypes[i].isNamed()) {\n\t\t\t\t\tthrow site.typeError(`expected at least ${this.#argTypes.filter(at => !at.isNamed()).length} positional arg(s), got ${posArgs.length} positional arg(s)`);\n\t\t\t\t} else {\n\t\t\t\t\tif (!(this.#argTypes[i].name in namedArgs)) {\n\t\t\t\t\t\tthrow site.typeError(`named arg ${this.#argTypes[i].name} missing from call`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (posArgs.length > this.#argTypes.length) {\n\t\t\tthrow site.typeError(`expected at most ${this.#argTypes.length} arg(s), got ${posArgs.length} arg(s)`);\n\t\t}\n\n\t\tfor (let i = 0; i < posArgs.length; i++) {\n\t\t\tif (!posArgs[i].isInstanceOf(site, this.#argTypes[i].type)) {\n\t\t\t\tthrow site.typeError(`expected '${this.#argTypes[i].type.toString()}' for arg ${i + 1}, got '${posArgs[i].toString()}'`);\n\t\t\t}\n\t\t}\n\n\t\tfor (let key in namedArgs) {\n\t\t\tconst i = this.#argTypes.findIndex(at => at.name == key);\n\n\t\t\tif (i == -1) {\n\t\t\t\tthrow site.typeError(`arg named ${key} not found in function type ${this.toString()}`);\n\t\t\t}\n\n\t\t\tif (i < posArgs.length) {\n\t\t\t\tthrow site.typeError(`named arg '${key}' already covered by positional arg ${i+1}`);\n\t\t\t}\n\n\t\t\tconst thisArg = this.#argTypes[i];\n\n\t\t\tif (!namedArgs[key].isInstanceOf(site, thisArg.type)) {\n\t\t\t\tthrow site.typeError(`expected '${thisArg.type.toString()}' for arg '${key}', got '${namedArgs[key].toString()}`);\n\t\t\t}\n\t\t}\n\n\t\treturn this.#retTypes;\n\t}\n}\n\nclass NotType extends EvalEntity {\n\tconstructor() {\n\t\tsuper();\n\t}\n\t\n\t/**\n\t * @returns {boolean}\n\t */\n\tisType() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Throws an error because NotType can't be a base-Type of anything.\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tthrow site.typeError(\"not a type\");\n\t}\n\n\t/**\n\t * @param {Word} name\n\t * @returns {EvalEntity} - can be Instance or Type\n\t */\n\tgetTypeMember(name) {\n\t\tthrow new Error(\"not a type\");\n\t}\n}\n\n/**\n * Base class for DataInstance and FuncInstance\n * @package\n */\nclass Instance extends NotType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {Type | Type[]} type \n\t * @returns {Instance}\n\t */\n\tstatic new(type) {\n\t\tif (Array.isArray(type)) {\n\t\t\tif (type.length === 1) {\n\t\t\t\treturn Instance.new(type[0]);\n\t\t\t} else {\n\t\t\t\treturn new MultiInstance(type.map(t => Instance.new(t)));\n\t\t\t}\n\t\t} else if (type instanceof FuncType) {\n\t\t\treturn new FuncInstance(type);\n\t\t} else if (type instanceof ParamType) {\n\t\t\tconst t = type.type;\n\t\t\tif (t == null) {\n\t\t\t\tthrow new Error(\"expected non-null type\");\n\t\t\t} else {\n\t\t\t\treturn Instance.new(t);\n\t\t\t}\n\t\t} else if (type instanceof ErrorType) {\n\t\t\treturn new ErrorInstance();\n\t\t} else if (type instanceof VoidType) {\n\t\t\treturn new VoidInstance();\n\t\t} else {\n\t\t\treturn new DataInstance(type);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisValue() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @returns {Instance}\n\t */\n\tassertValue(site) {\n\t\treturn this;\n\t}\n}\n\n\n/**\n * A regular non-Func Instance. DataValues can always be compared, serialized, used in containers.\n * @package\n */\nclass DataInstance extends Instance {\n\t#type;\n\n\t/**\n\t * @param {DataType} type \n\t */\n\tconstructor(type) {\n\t\tassert(!(type instanceof FuncType));\n\n\t\tsuper();\n\t\tthis.#type = type;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#type.toString();\n\t}\n\n\t/**\n\t * Gets the underlying Type.\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tgetType(site) {\n\t\treturn this.#type;\n\t}\n\n\t/**\n\t * @typedef {new(...any) => Type} TypeClass\n\t */\n\n\t/**\n\t * Checks if 'this' is instance of 'type'.\n\t * 'type' can be a class, or a class instance.\n\t * @param {Site} site \n\t * @param {Type | TypeClass} type \n\t * @returns \n\t */\n\tisInstanceOf(site, type) {\n\t\tif (typeof type == 'function') {\n\t\t\treturn this.#type instanceof type;\n\t\t} else {\n\t\t\treturn type.isBaseOf(site, this.#type);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of fields of a struct, enum member, or builtin type.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\treturn this.#type.nFields(site);\n\t}\n\n\t/**\n\t * Returns the i-th field of a Struct or an EnumMember\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\treturn this.#type.getFieldType(site, i);\n\t}\n\n\t/**\n\t * Returns the index of a named field\n\t * @param {Site} site \n\t * @param {string} name \n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\treturn this.#type.getFieldIndex(site, name);\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\treturn this.#type.getInstanceMember(name);\n\t}\n\n\t/**\n\t * Throws an error bec\n\t * @param {Site} site \n\t * @param {Instance[]} args \n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Instance}\n\t */\n\tcall(site, args, namedArgs = {}) {\n\t\tthrow site.typeError(\"not callable\");\n\t}\n}\n\n/**\n * @package\n */\nclass ConstStatementInstance extends DataInstance {\n\t#statement;\n\n\t/**\n\t * @param {DataType} type \n\t * @param {ConstTypeStatement} statement - can't use ConstStatement because that would give circular dependency\n\t */\n\tconstructor(type, statement) {\n\t\tsuper(type);\n\t\tthis.#statement = statement;\n\t}\n\n\t/**\n\t * @type {ConstTypeStatement}\n\t */\n\tget statement() {\n\t\treturn this.#statement\n\t}\n}\n\n/**\n * A callable Instance.\n * @package\n */\nclass FuncInstance extends Instance {\n\t#type;\n\n\t/**\n\t * @param {FuncType} type \n\t */\n\tconstructor(type) {\n\t\tassert(type instanceof FuncType);\n\n\t\tsuper();\n\t\tthis.#type = type;\n\t}\n\n\t/**\n\t * @param {RecursivenessChecker} scope\n\t * @returns {boolean}\n\t */\n\tisRecursive(scope) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns a string representing the type.\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#type.toString();\n\t}\n\n\t/**\n\t * Returns the underlying FuncType as Type.\n\t * @param {Site} site\n\t * @returns {Type}\n\t */\n\tgetType(site) {\n\t\treturn this.#type;\n\t}\n\n\t/**\n\t * Returns the underlying FuncType directly.\n\t * @returns {FuncType}\n\t */\n\tgetFuncType() {\n\t\treturn this.#type;\n\t}\n\n\t/**\n\t * Checks if 'this' is an instance of 'type'.\n\t * Type can be a class or a class instance. \n\t * @param {Site} site \n\t * @param {Type | TypeClass} type \n\t * @returns {boolean}\n\t */\n\tisInstanceOf(site, type) {\n\t\tif (typeof type == 'function') {\n\t\t\treturn this.#type instanceof type;\n\t\t} else {\n\t\t\treturn type.isBaseOf(site, this.#type);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Instance[]} args \n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Instance}\n\t */\n\tcall(site, args, namedArgs = {}) {\n\t\treturn Instance.new(this.#type.checkCall(site, args, namedArgs));\n\t}\n\n\t/**\n\t * Throws an error because a function value doesn't have any fields.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\tthrow site.typeError(\"a function doesn't have fields\");\n\t}\n\n\t/**\n\t * Throws an error because a function value doesn't have any fields.\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\tthrow site.typeError(\"a function doesn't have fields\");\n\t}\n\n\t/**\n\t * Throws an error because a function value have any fields.\n\t * @param {Site} site \n\t * @param {string} name \n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tthrow site.typeError(\"a function doesn't have fields\");\n\t}\n\n\t/**\n\t * Throws an error because a function value doesn't have members.\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tthrow name.typeError(\"a function doesn't have any members\");\n\t}\n}\n\n/**\n * Special function value class for top level functions because they can be used recursively.\n * @package\n */\nclass FuncStatementInstance extends FuncInstance {\n\t#statement\n\n\t/**\n\t * @param {FuncType} type \n\t * @param {RecurseableStatement} statement - can't use FuncStatement because that would give circular dependency\n\t */\n\tconstructor(type, statement) {\n\t\tsuper(type);\n\t\tthis.#statement = statement;\n\t}\n\n\t/**\n\t * @type {RecurseableStatement}\n\t */\n\tget statement() {\n\t\treturn this.#statement;\n\t}\n\n\t/**\n\t * @param {RecursivenessChecker} scope\n\t * @returns {boolean}\n\t */\n\tisRecursive(scope) {\n\t\tif (this.#statement.isRecursive()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn scope.isRecursive(this.#statement);\n\t\t}\n\t}\n}\n\n/**\n * Wraps multiple return values\n * @package\n */\nclass MultiInstance extends Instance {\n\t#values;\n\n\t/**\n\t * @param {Instance[]} values \n\t */\n\tconstructor(values) {\n\t\tsuper();\n\t\tthis.#values = values;\n\t}\n\n\tget values() {\n\t\treturn this.#values;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(${this.#values.map(v => v.toString()).join(\", \")})`;\n\t}\n\n\t/**\n\t * @param {Instance[]} vals\n\t * @returns {Instance[]}\n\t */\n\tstatic flatten(vals) {\n\t\t/**\n\t\t * @type {Instance[]}\n\t\t */\n\t\tlet result = [];\n\n\t\tfor (let v of vals) {\n\t\t\tif (v instanceof MultiInstance) {\n\t\t\t\tresult = result.concat(v.values);\n\t\t\t} else {\n\t\t\t\tresult.push(v);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Returned by functions that don't return anything (eg. assert, error, print)\n * @package\n */\nclass VoidInstance extends Instance {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn \"()\"\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type | TypeClass} type \n\t * @returns {boolean}\n\t */\n\tisInstanceOf(site, type) {\n\t\treturn type instanceof VoidType;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tgetType(site) {\n\t\treturn new VoidType();\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Instance[]} args\n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Instance}\n\t */\n\tcall(site, args, namedArgs = {}) {\n\t\tthrow new Error(\"can't call void\");\n\t}\n\n\t/**\n\t * @param {Word} name\n\t * @returns {Instance} - can be FuncInstance or DataInstance\n\t */\n\tgetInstanceMember(name) {\n\t\tthrow new Error(\"can't get member of void\");\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\tthrow new Error(\"can't get nFields of void\");\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\tthrow new Error(\"can't get field-type of void\");\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {string} name\n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tthrow new Error(\"can't get field-type of void\");\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\tthrow new Error(\"can't get constr index of void\");\n\t}\n}\n\n/**\n * Returned by an error()\n * Special case of no-return-value that indicates that execution can't proceed.\n * @package\n */\nclass ErrorInstance extends VoidInstance {\n\t/**\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\t getType(site) {\n\t\treturn new ErrorType();\n\t}\n}\n\n/**\n * Parent-class for AssertFunc, ErrorFunc and PrintFunc\n * @package\n */\nclass BuiltinFuncInstance extends FuncInstance {\n\t/**\n\t * Returns the base path in the IR (eg. __helios__bool, __helios__error, etc.)\n\t * @type {string}\n\t */\n\tget path() {\n\t\tthrow new Error(\"not implemented\")\n\t}\n}\n\n/**\n * Special builtin function that throws an error if condition is false and returns Void\n * @package\n */\n class AssertFunc extends BuiltinFuncInstance {\n\tconstructor() {\n\t\tsuper(new FuncType([new BoolType(), new StringType()], new VoidType()));\n\t}\n\n\tget path() {\n\t\treturn \"__helios__assert\";\n\t}\n}\n\n/**\n * Special builtin function that throws an error and returns ErrorInstance (special case of Void)\n * @package\n */\n class ErrorFunc extends BuiltinFuncInstance {\n\tconstructor() {\n\t\tsuper(new FuncType([new StringType()], new ErrorType()));\n\t}\n\n\tget path() {\n\t\treturn \"__helios__error\";\n\t}\n}\n\n/**\n * Special builtin function that prints a message and returns void\n * @package\n */\nclass PrintFunc extends BuiltinFuncInstance {\n\tconstructor() {\n\t\tsuper(new FuncType([new StringType()], new VoidType()));\n\t}\n\n\tget path() {\n\t\treturn \"__helios__print\";\n\t}\n}\n\n/**\n * Type of return-value of functions that don't return anything (eg. assert, print, error)\n * @package\n */\nclass VoidType extends Type {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\ttoString() {\n\t\treturn \"()\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\treturn type instanceof VoidType;\n\t}\n}\n\n/**\n * Type of special case of no-return value where execution can't continue.\n * @package\n */\nclass ErrorType extends VoidType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\treturn type instanceof ErrorType;\n\t}\n}\n\n/**\n * Builtin Int type\n * @package\n */\nclass IntType extends BuiltinType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\ttoString() {\n\t\treturn \"Int\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__neg\":\n\t\t\tcase \"__pos\":\n\t\t\t\treturn Instance.new(new FuncType([this], new IntType()));\n\t\t\tcase \"__add\":\n\t\t\tcase \"__sub\":\n\t\t\tcase \"__mul\":\n\t\t\tcase \"__div\":\n\t\t\tcase \"__mod\":\n\t\t\t\treturn Instance.new(new FuncType([this, new IntType()], new IntType()));\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new IntType()], new BoolType()));\n\t\t\tcase \"from_big_endian\":\n\t\t\tcase \"from_little_endian\":\n\t\t\t\treturn Instance.new(new FuncType([new ByteArrayType()], new IntType()));\n\t\t\tcase \"max\":\n\t\t\tcase \"min\": \n\t\t\t\treturn Instance.new(new FuncType([new IntType(), new IntType()], new IntType()));\n\t\t\tcase \"from_base58\":\n\t\t\tcase \"parse\":\n\t\t\t\treturn Instance.new(new FuncType([new StringType()], new IntType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"decode_zigzag\":\n\t\t\tcase \"encode_zigzag\":\n\t\t\tcase \"abs\":\n\t\t\t\treturn Instance.new(new FuncType([], new IntType()));\n\t\t\tcase \"bound\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType(), new IntType()], new IntType()));\n\t\t\tcase \"bound_min\":\n\t\t\tcase \"bound_max\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType()], new IntType()));\n\t\t\tcase \"to_bool\":\n\t\t\t\treturn Instance.new(new FuncType([], new BoolType()));\n\t\t\tcase \"to_big_endian\":\n\t\t\tcase \"to_little_endian\":\n\t\t\t\treturn Instance.new(new FuncType([], new ByteArrayType()));\n\t\t\tcase \"to_base58\":\n\t\t\tcase \"to_hex\":\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__int\";\n\t}\n\n\tget userType() {\n\t\treturn HInt;\n\t}\n}\n\n/**\n * Builtin bool type\n * @package\n */\nclass BoolType extends BuiltinType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn \"Bool\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__not\":\n\t\t\t\treturn Instance.new(new FuncType([this], new BoolType()));\n\t\t\tcase \"__and\":\n\t\t\tcase \"__or\":\n\t\t\t\treturn Instance.new(new FuncType([this, new BoolType()], new BoolType()));\n\t\t\tcase \"and\":\n\t\t\tcase \"or\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([], new BoolType()), new FuncType([], new BoolType())], new BoolType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"to_int\":\n\t\t\t\treturn Instance.new(new FuncType([], new IntType()));\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tcase \"trace\":\n\t\t\t\treturn Instance.new(new FuncType([new StringType()], new BoolType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__bool\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn Bool;\n\t}\n}\n\n/**\n * Builtin string type\n * @package\n */\nclass StringType extends BuiltinType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\ttoString() {\n\t\treturn \"String\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\t\treturn Instance.new(new FuncType([this, new StringType()], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"starts_with\":\n\t\t\tcase \"ends_with\":\n\t\t\t\treturn Instance.new(new FuncType([new StringType()], new BoolType()));\n\t\t\tcase \"encode_utf8\":\n\t\t\t\treturn Instance.new(new FuncType([], new ByteArrayType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__string\";\n\t}\n\n\t/**\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn HString;\n\t}\n}\n\n/**\n * Builtin bytearray type\n * @package\n */\nclass ByteArrayType extends BuiltinType {\n\t#size;\n\n\t/**\n\t * @param {?number} size - can be null or 32 (result of hashing)\n\t */\n\tconstructor(size = null) {\n\t\tsuper();\n\n\t\tthis.#size = size;\n\t}\n\n\ttoString() {\n\t\treturn \"ByteArray\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\t\treturn Instance.new(new FuncType([this, new ByteArrayType()], new ByteArrayType()));\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new ByteArrayType()], new BoolType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"length\":\n\t\t\t\treturn Instance.new(new IntType());\n\t\t\tcase \"slice\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType(), new IntType()], new ByteArrayType()));\n\t\t\tcase \"starts_with\":\n\t\t\tcase \"ends_with\":\n\t\t\t\treturn Instance.new(new FuncType([new ByteArrayType()], new BoolType()));\n\t\t\tcase \"prepend\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType()], new ByteArrayType()));\n\t\t\tcase \"sha2\":\n\t\t\tcase \"sha3\":\n\t\t\tcase \"blake2b\":\n\t\t\t\treturn Instance.new(new FuncType([], new ByteArrayType(32)));\n\t\t\tcase \"decode_utf8\":\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn `__helios__bytearray${this.#size === null ? \"\" : this.#size}`;\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn ByteArray;\n\t}\n}\n\n\nclass ParamType extends Type {\n\t/** @type {?Type} */\n\t#type;\n\n\t/** @type {string} */\n\t#name;\n\n\t#checkType;\n\n\t/**\n\t * @param {string} name - typically \"a\" or \"b\"\n\t * @param {?(site: Site, type: Type) => void} checkType\n\t */\n\tconstructor(name, checkType = null) {\n\t\tsuper();\n\t\tthis.#type = null;\n\t\tthis.#name = name;\n\t\tthis.#checkType = checkType;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisInferred() {\n\t\treturn this.#type !== null;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {Type} type \n\t */\n\tsetType(site, type) {\n\t\tif (this.#checkType !== null) {\n\t\t\tthis.#checkType(site, type);\n\t\t}\n\n\t\tthis.#type = type;\n\t}\n\n\t/**\n\t * @param {Type} type \n\t * @param {?Type} expected\n\t * @returns {Type}\n\t */\n\tstatic unwrap(type, expected = null) {\n\t\tif (type instanceof AnyType) {\n\t\t\tif (expected !== null) {\n\t\t\t\treturn expected;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"unable to infer type of AnyType\");\n\t\t\t}\n\t\t} else if (type instanceof ParamType) {\n\t\t\tlet origType = type.type;\n\n\t\t\tif (origType === null) {\n\t\t\t\tif (expected !== null) {\n\t\t\t\t\ttype.setType(Site.dummy(), expected);\n\t\t\t\t\treturn expected;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"unable to infer ParamType\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn origType;\n\t\t\t}\n\t\t} else {\n\t\t\treturn type;\n\t\t}\n\t}\n\n\t/**\n\t * @type {?Type}\n\t */\n\tget type() {\n\t\tif (this.#type instanceof ParamType) {\n\t\t\treturn this.#type.type;\n\t\t} else {\n\t\t\treturn this.#type;\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.#type === null) {\n\t\t\treturn this.#name;\n\t\t} else {\n\t\t\treturn this.#type.toString();\n\t\t}\n\t}\n\n\t/**\n\t * Returns number of members of an enum type\n\t * Throws an error if not an enum type\n\t * @param {Site} site\n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\tif (this.#type === null) {\n\t\t\tthrow new Error(\"param type not yet infered\");\n\t\t} else {\n\t\t\treturn this.#type.nEnumMembers(site);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of fields of a struct, enum member, or builtin type.\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\tif (this.#type === null) {\n\t\t\tthrow new Error(\"should've been set\");\n\t\t} else {\n\t\t\treturn this.#type.nFields(site);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the i-th field of a Struct or an EnumMember\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\tif (this.#type === null) {\n\t\t\tthrow new Error(\"should've been set\");\n\t\t} else {\n\t\t\treturn this.#type.getFieldType(site, i);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the i-th field of a Struct or an EnumMember\n\t * @param {Site} site\n\t * @param {string} name\n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tif (this.#type === null) {\n\t\t\tthrow new Error(\"should've been set\");\n\t\t} else {\n\t\t\treturn this.#type.getFieldIndex(site, name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tif (this.#type === null) {\n\t\t\tthrow new Error(\"should've been set\");\n\t\t} else {\n\t\t\treturn this.#type.getInstanceMember(name);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns 'true' if 'this' is a base-type of 'type'. Throws an error if 'this' isn't a Type.\n\t * @param {Site} site\n\t * @param {Type} type\n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tif (this.#type === null) {\n\t\t\tthis.setType(site, type);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this.#type.isBaseOf(site, type);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the base path of type (eg. __helios__bool).\n\t * This is used extensively in the Intermediate Representation.\n\t * @type {string}\n\t */\n\tget path() {\n\t\tif (this.#type === null) {\n\t\t\tthrow new Error(\"param type not yet infered\");\n\t\t} else {\n\t\t\treturn this.#type.path;\n\t\t}\n\t}\n}\n\n/**\n * @package\n */\nclass ParamFuncValue extends FuncInstance {\n\t#params;\n\t#fnType;\n\t#correctMemberName;\n\n\t/**\n\t * @param {ParamType[]} params\n\t * @param {FuncType} fnType \n\t * @param {?() => string} correctMemberName\n\t */\n\tconstructor(params, fnType, correctMemberName = null) {\n\t\tsuper(fnType);\n\t\tthis.#params = params;\n\t\tthis.#fnType = fnType;\n\t\tthis.#correctMemberName = correctMemberName;\n\t}\n\n\tget correctMemberName() {\n\t\treturn this.#correctMemberName;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tallInferred() {\n\t\treturn this.#params.every(p => p.isInferred());\n\t}\n\n\ttoString() {\n\t\treturn this.#fnType.toString();\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tgetType(site) {\n\t\tif (this.allInferred()) {\n\t\t\treturn this.#fnType;\n\t\t} else {\n\t\t\tthrow site.typeError(\"can't get type of type parametric function\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisInstanceOf(site, type) {\n\t\tif (this.allInferred()) {\n\t\t\treturn (new FuncInstance(this.#fnType)).isInstanceOf(site, type);\n\t\t} else {\n\t\t\tthrow site.typeError(\"can't determine if type parametric function is instanceof a type\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Instance[]} args\n\t * @param {{[name: string]: Instance}} namedArgs\n\t * @returns {Instance}\n\t */\n\tcall(site, args, namedArgs = {}) {\n\t\treturn (new FuncInstance(this.#fnType)).call(site, args, namedArgs);\n\t}\n}\n\n/**\n * Builtin list type\n * @package\n */\nclass ListType extends BuiltinType {\n\t#itemType;\n\n\t/**\n\t * @param {Type} itemType \n\t */\n\tconstructor(itemType) {\n\t\tsuper();\n\t\tthis.#itemType = itemType;\n\t}\n\n\t/**\n\t * @package\n\t * @type {Type}\n\t */\n\tget itemType() {\n\t\treturn this.#itemType;\n\t}\n\n\ttoString() {\n\t\treturn `[]${this.#itemType.toString()}`;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\tif (type instanceof ListType) {\n\t\t\treturn this.#itemType.isBaseOf(site, type.itemType);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\t\treturn Instance.new(new FuncType([this, this], this));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType(), new FuncType([new IntType()], this.#itemType)], this));\n\t\t\tcase \"new_const\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType(), this.#itemType], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"length\":\n\t\t\t\treturn Instance.new(new IntType());\n\t\t\tcase \"head\":\n\t\t\t\treturn Instance.new(this.#itemType);\n\t\t\tcase \"tail\":\n\t\t\t\treturn Instance.new(new ListType(this.#itemType));\n\t\t\tcase \"is_empty\":\n\t\t\t\treturn Instance.new(new FuncType([], new BoolType()));\n\t\t\tcase \"get\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType()], this.#itemType));\n\t\t\tcase \"prepend\":\n\t\t\t\treturn Instance.new(new FuncType([this.#itemType], new ListType(this.#itemType)));\n\t\t\tcase \"any\":\n\t\t\tcase \"all\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#itemType], new BoolType())], new BoolType()));\n\t\t\tcase \"find\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#itemType], new BoolType())], this.#itemType));\n\t\t\tcase \"find_safe\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#itemType], new BoolType())], new OptionType(this.#itemType)));\n\t\t\tcase \"filter\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#itemType], new BoolType())], new ListType(this.#itemType)));\n\t\t\tcase \"for_each\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#itemType], new VoidType())], new VoidType()));\n\t\t\tcase \"fold\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([new FuncType([a, this.#itemType], a), a], a));\n\t\t\t}\n\t\t\tcase \"fold_lazy\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([new FuncType([this.#itemType, new FuncType([], a)], a), a], a));\n\t\t\t}\n\t\t\tcase \"map\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([new FuncType([this.#itemType], a)], new ListType(a)), () => {\n\t\t\t\t\tlet type = a.type;\n\t\t\t\t\tif (type === null) {\n\t\t\t\t\t\tthrow new Error(\"should've been inferred by now\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((new BoolType()).isBaseOf(Site.dummy(), type)) {\n\t\t\t\t\t\t\treturn \"map_to_bool\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn \"map\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tcase \"get_singleton\":\n\t\t\t\treturn Instance.new(new FuncType([], this.#itemType));\n\t\t\tcase \"sort\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#itemType, this.#itemType], new BoolType())], new ListType(this.#itemType)));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn `__helios__${this.#itemType instanceof BoolType ? \"bool\" : \"\"}list`;\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn HList(this.#itemType.userType);\n\t}\n}\n\n/**\n * Builtin map type (in reality list of key-value pairs)\n * @package\n */\nclass MapType extends BuiltinType {\n\t#keyType;\n\t#valueType;\n\n\t/**\n\t * @param {Type} keyType \n\t * @param {Type} valueType \n\t */\n\tconstructor(keyType, valueType) {\n\t\tsuper();\n\t\tthis.#keyType = keyType;\n\t\tthis.#valueType = valueType;\n\t}\n\n\t/**\n\t * @package\n\t * @type {Type}\n\t */\n\tget keyType() {\n\t\treturn this.#keyType;\n\t}\n\n\t/**\n\t * @package\n\t * @type {Type}\n\t */\n\tget valueType() {\n\t\treturn this.#valueType;\n\t}\n\n\ttoString() {\n\t\treturn `Map[${this.#keyType.toString()}]${this.#valueType.toString()}`;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\tif (type instanceof MapType) {\n\t\t\treturn this.#keyType.isBaseOf(site, type.#keyType) && this.#valueType.isBaseOf(site, type.#valueType);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\t\treturn Instance.new(new FuncType([this, this], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"all\":\n\t\t\tcase \"any\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType, this.#valueType], new BoolType())], new BoolType()));\n\t\t\tcase \"delete\":\n\t\t\t\treturn Instance.new(new FuncType([this.#keyType], this));\n\t\t\tcase \"filter\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType, this.#valueType], new BoolType())], this));\n\t\t\tcase \"find\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType, this.#valueType], new BoolType())], [this.#keyType, this.#valueType]));\n\t\t\tcase \"find_safe\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType, this.#valueType], new BoolType())], [new FuncType([], [this.#keyType, this.#valueType]), new BoolType()]))\n\t\t\tcase \"find_key\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType], new BoolType())], this.#keyType));\n\t\t\tcase \"find_key_safe\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType], new BoolType())], new OptionType(this.#keyType)));\n\t\t\tcase \"find_value\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#valueType], new BoolType())], this.#valueType));\n\t\t\tcase \"find_value_safe\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#valueType], new BoolType())], new OptionType(this.#valueType)));\n\t\t\tcase \"fold\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([new FuncType([a, this.#keyType, this.#valueType], a), a], a));\n\t\t\t}\n\t\t\tcase \"fold_lazy\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([new FuncType([this.#keyType, this.#valueType, new FuncType([], a)], a), a], a));\n\t\t\t}\n\t\t\tcase \"for_each\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType, this.#valueType], new VoidType())], new VoidType()));\n\t\t\tcase \"get\":\n\t\t\t\treturn Instance.new(new FuncType([this.#keyType], this.#valueType));\n\t\t\tcase \"get_safe\":\n\t\t\t\treturn Instance.new(new FuncType([this.#keyType], new OptionType(this.#valueType)));\n\t\t\tcase \"head\":\n\t\t\t\treturn Instance.new(new FuncType([], [this.#keyType, this.#valueType]));\n\t\t\tcase \"head_key\":\n\t\t\t\treturn Instance.new(this.#keyType);\n\t\t\tcase \"head_value\":\n\t\t\t\treturn Instance.new(this.#valueType);\n\t\t\tcase \"is_empty\":\n\t\t\t\treturn Instance.new(new FuncType([], new BoolType()));\n\t\t\tcase \"length\":\n\t\t\t\treturn Instance.new(new IntType());\n\t\t\tcase \"map\": {\n\t\t\t\tlet a = new ParamType(\"a\", (site, type) => {\n\t\t\t\t\tif ((new BoolType()).isBaseOf(site, type)) {\n\t\t\t\t\t\tthrow site.typeError(\"Map keys can't be of 'Bool' type\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tlet b = new ParamType(\"b\");\n\n\t\t\t\treturn new ParamFuncValue([a, b], new FuncType([new FuncType([this.#keyType, this.#valueType], [a, b])], new MapType(a, b)), () => {\n\t\t\t\t\tlet type = b.type;\n\t\t\t\t\tif (type === null) {\n\t\t\t\t\t\tthrow new Error(\"should've been inferred by now\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((new BoolType()).isBaseOf(Site.dummy(), type)) {\n\t\t\t\t\t\t\treturn \"map_to_bool\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn \"map\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tcase \"prepend\":\n\t\t\t\treturn Instance.new(new FuncType([this.#keyType, this.#valueType], this));\n\t\t\tcase \"set\":\n\t\t\t\treturn Instance.new(new FuncType([this.#keyType, this.#valueType], this));\n\t\t\tcase \"sort\":\n\t\t\t\treturn Instance.new(new FuncType([new FuncType([this.#keyType, this.#valueType, this.#keyType, this.#valueType], new BoolType())], new MapType(this.#keyType, this.#valueType)));\n\t\t\tcase \"tail\":\n\t\t\t\treturn Instance.new(this);\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn `__helios__${this.#valueType instanceof BoolType ? \"bool\" : \"\"}map`;\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn HMap(this.#keyType.userType, this.#valueType.userType);\n\t}\n}\n\n/**\n * Builtin option type\n * @package\n */\nclass OptionType extends BuiltinType {\n\t#someType;\n\n\t/**\n\t * @param {Type} someType \n\t */\n\tconstructor(someType) {\n\t\tsuper();\n\t\tthis.#someType = someType;\n\t}\n\n\ttoString() {\n\t\treturn `Option[${this.#someType.toString()}]`;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\tif (type instanceof OptionType) {\n\t\t\treturn this.#someType.isBaseOf(site, type.#someType);\n\t\t} else {\n\t\t\treturn (new OptionSomeType(this.#someType)).isBaseOf(site, type) || \n\t\t\t\t(new OptionNoneType(this.#someType)).isBaseOf(site, type);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"Some\":\n\t\t\t\treturn new OptionSomeType(this.#someType);\n\t\t\tcase \"None\":\n\t\t\t\treturn new OptionNoneType(this.#someType);\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"map\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([new FuncType([this.#someType], a)], new OptionType(a)), () => {\n\t\t\t\t\tlet type = a.type;\n\t\t\t\t\tif (type === null) {\n\t\t\t\t\t\tthrow new Error(\"should've been inferred by now\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((new BoolType()).isBaseOf(Site.dummy(), type)) {\n\t\t\t\t\t\t\treturn \"map_to_bool\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn \"map\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tcase \"unwrap\":\n\t\t\t\treturn Instance.new(new FuncType([], this.#someType));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn `__helios__${this.#someType instanceof BoolType ? \"bool\" : \"\"}option`;\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn Option(this.#someType.userType);\n\t}\n}\n\n/**\n * Member type of OptionType with some content\n */\nclass OptionSomeType extends BuiltinEnumMember {\n\t#someType;\n\n\t/**\n\t * @param {Type} someType \n\t */\n\tconstructor(someType) {\n\t\tsuper(new OptionType(someType));\n\t\tthis.#someType = someType;\n\t}\n\n\ttoString() {\n\t\treturn `Option[${this.#someType.toString()}]::Some`;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\tif (type instanceof OptionSomeType) {\n\t\t\treturn this.#someType.isBaseOf(site, type.#someType);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\tassert(i == 0);\n\t\treturn this.#someType;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {string} name\n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tassert(name == \"some\");\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"some\":\n\t\t\t\treturn Instance.new(this.#someType);\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn `__helios__${this.#someType instanceof BoolType ? \"bool\" : \"\"}option__some`;\n\t}\n}\n\n/**\n * Member type of OptionType with no content\n * @package\n */\nclass OptionNoneType extends BuiltinEnumMember {\n\t#someType;\n\n\t/**\n\t * @param {Type} someType \n\t */\n\tconstructor(someType) {\n\t\tsuper(new OptionType(someType));\n\t\tthis.#someType = someType;\n\t}\n\n\ttoString() {\n\t\treturn `Option[${this.#someType.toString()}]::None`;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\ttype = ParamType.unwrap(type, this);\n\n\t\tif (type instanceof OptionNoneType) {\n\t\t\treturn this.#someType.isBaseOf(site, type.#someType);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn `__helios__${this.#someType instanceof BoolType ? \"bool\" : \"\"}option__none`;\n\t}\n\n\t/**\n\t * Instantiates self as value\n\t * @param {Site} site\n\t * @returns {Instance}\n\t */\n\tassertValue(site) {\n\t\treturn Instance.new(this);\n\t}\n}\n\n/**\n * Base type of other ValidatorHash etc. (all functionality is actually implemented here)\n * @package\n */\nclass HashType extends BuiltinType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, this], new BoolType()));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new ByteArrayType()], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__hash\";\n\t}\n}\n\n/**\n * Builtin PubKeyHash type\n * @package\n */\nclass PubKeyHashType extends HashType {\n\ttoString() {\n\t\treturn \"PubKeyHash\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn PubKeyHash;\n\t}\n}\n\n/**\n * Builtin StakeKeyHash type\n * @package\n */\nclass StakeKeyHashType extends HashType {\n\ttoString() {\n\t\treturn \"StakeKeyHash\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn StakeKeyHash;\n\t}\n}\n\n/**\n * Builtin PubKey type\n * @package\n */\nclass PubKeyType extends BuiltinType {\n\ttoString() {\n\t\treturn \"PubKey\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new ByteArrayType()], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name\n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tcase \"verify\":\n\t\t\t\treturn Instance.new(new FuncType([new ByteArrayType(), new ByteArrayType()], new BoolType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__pubkey\";\n\t}\n}\n\n/**\n * Generalization of ValidatorHash type and MintingPolicyHash type\n * Must be cast before being able to use the Hash type methods\n * @package\n */\nclass ScriptHashType extends BuiltinType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\ttoString() {\n\t\treturn \"ScriptHash\";\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scripthash\";\n\t}\n}\n\n/**\n * Builtin ValidatorHash type\n * @package\n */\nclass ValidatorHashType extends HashType {\n\t#purpose;\n\n\t/**\n\t * @param {number} purpose \n\t */\n\tconstructor(purpose = -1) {\n\t\tsuper();\n\t\tthis.#purpose = purpose;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"CURRENT\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Spending || this.#purpose == ScriptPurpose.Testing) {\n\t\t\t\t\t\treturn Instance.new(this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ValidatorHash::CURRENT' only available in spending script\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow name.referenceError(\"'ValidatorHash::CURRENT' can only be used after 'main'\");\n\t\t\t\t}\n\t\t\tcase \"from_script_hash\":\n\t\t\t\treturn Instance.new(new FuncType([new ScriptHashType()], new ValidatorHashType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"ValidatorHash\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn ValidatorHash;\n\t}\n}\n\n/**\n * Builtin MintingPolicyHash type\n * @package\n */\nclass MintingPolicyHashType extends HashType {\n\t#purpose;\n\n\t/**\n\t * @param {number} purpose \n\t */\n\tconstructor(purpose = -1) {\n\t\tsuper();\n\t\tthis.#purpose = purpose;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"CURRENT\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Minting) {\n\t\t\t\t\t\treturn Instance.new(this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'MintingPolicyHash::CURRENT' only available in minting script\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow name.referenceError(\"'MintingPolicyHash::CURRENT' can only be used after 'main'\");\n\t\t\t\t}\n\t\t\tcase \"from_script_hash\":\n\t\t\t\treturn Instance.new(new FuncType([new ScriptHashType()], new MintingPolicyHashType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"MintingPolicyHash\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn MintingPolicyHash;\n\t}\n}\n\n/**\n * Builtin StakingValidatorHash type\n * @package\n */\nclass StakingValidatorHashType extends HashType {\n\t#purpose;\n\n\t/**\n\t * @param {number} purpose \n\t */\n\tconstructor(purpose = -1) {\n\t\tsuper();\n\t\tthis.#purpose = purpose;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"CURRENT\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Staking) {\n\t\t\t\t\t\treturn Instance.new(this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'StakingValidatorHash::CURRENT' only available in minting script\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow name.referenceError(\"'StakingValidatorHash::CURRENT' can only be used after 'main'\");\n\t\t\t\t}\n\t\t\tcase \"from_script_hash\":\n\t\t\t\treturn Instance.new(new FuncType([new ScriptHashType()], new StakingValidatorHashType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"StakingValidatorHash\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn StakingValidatorHash;\n\t}\n}\n\n/**\n * Builtin DatumHash type\n * @package\n */\nclass DatumHashType extends HashType {\n\ttoString() {\n\t\treturn \"DatumHash\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn DatumHash;\n\t}\n}\n\n/**\n * Builtin ScriptContext type\n * @package\n */\nclass ScriptContextType extends BuiltinType {\n\t#purpose;\n\n\t/**\n\t * @param {number} purpose \n\t */\n\tconstructor(purpose) {\n\t\tsuper();\n\t\tthis.#purpose = purpose;\n\t}\n\n\ttoString() {\n\t\treturn \"ScriptContext\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new_spending\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Spending || this.#purpose == ScriptPurpose.Testing) {\n\t\t\t\t\t\treturn Instance.new(new FuncType([new TxType(), new TxOutputIdType()], this));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_spending' only avaiable for spending\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Staking || this.#purpose == ScriptPurpose.Minting) {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_spending' only avaiable for spending  scripts\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_spending' can only be used after 'main'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"new_minting\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Minting || this.#purpose == ScriptPurpose.Testing) {\n\t\t\t\t\t\treturn Instance.new(new FuncType([new TxType(), new MintingPolicyHashType()], this));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_minting' only avaiable for minting scripts\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Staking || this.#purpose == ScriptPurpose.Spending) {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_minting' only avaiable for minting scripts\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_minting' can only be used after 'main'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"new_rewarding\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Staking || this.#purpose == ScriptPurpose.Testing) {\n\t\t\t\t\t\treturn Instance.new(new FuncType([new TxType(), new StakingCredentialType()], this));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_rewarding' only avaiable for staking scripts\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Spending || this.#purpose == ScriptPurpose.Minting) {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_rewarding' only avaiable for staking scripts\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_rewarding' can only be used after 'main'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"new_certifying\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Staking || this.#purpose == ScriptPurpose.Testing) {\n\t\t\t\t\t\treturn Instance.new(new FuncType([new TxType(), new DCertType()], this));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_certifying' only avaiable for staking scripts\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.#purpose == ScriptPurpose.Spending || this.#purpose == ScriptPurpose.Minting) {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_certifying' only avaiable for staking scripts\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow name.referenceError(\"'ScriptContext::new_certifying' can only be used after 'main'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"tx\":\n\t\t\t\treturn Instance.new(new TxType());\n\t\t\tcase \"get_spending_purpose_output_id\":\n\t\t\t\tif (this.#purpose == ScriptPurpose.Minting || this.#purpose == ScriptPurpose.Staking) {\n\t\t\t\t\tthrow name.referenceError(\"not available in minting/staking script\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(new FuncType([], new TxOutputIdType()));\n\t\t\t\t}\n\t\t\tcase \"get_current_validator_hash\":\n\t\t\t\tif (this.#purpose == ScriptPurpose.Minting || this.#purpose == ScriptPurpose.Staking) {\n\t\t\t\t\tthrow name.referenceError(\"not available in minting/staking script\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(new FuncType([], new ValidatorHashType(this.#purpose)));\n\t\t\t\t}\n\t\t\tcase \"get_current_minting_policy_hash\":\n\t\t\t\tif (this.#purpose == ScriptPurpose.Spending || this.#purpose == ScriptPurpose.Staking) {\n\t\t\t\t\tthrow name.referenceError(\"not available in spending/staking script\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(new FuncType([], new MintingPolicyHashType(this.#purpose)));\n\t\t\t\t}\n\t\t\tcase \"get_current_input\":\n\t\t\t\tif (this.#purpose == ScriptPurpose.Minting || this.#purpose == ScriptPurpose.Staking) {\n\t\t\t\t\tthrow name.referenceError(\"not available in minting/staking script\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(new FuncType([], new TxInputType()));\n\t\t\t\t}\n\t\t\tcase \"get_cont_outputs\":\n\t\t\t\tif (this.#purpose == ScriptPurpose.Minting || this.#purpose == ScriptPurpose.Staking) {\n\t\t\t\t\tthrow name.referenceError(\"not available in minting/staking script\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(new FuncType([], new ListType(new TxOutputType())));\n\t\t\t\t}\n\t\t\tcase \"get_staking_purpose\":\n\t\t\t\tif (this.#purpose == ScriptPurpose.Minting || this.#purpose == ScriptPurpose.Spending) {\n\t\t\t\t\tthrow name.referenceError(\"not available in minting/spending script\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(new FuncType([], new StakingPurposeType()));\n\t\t\t\t}\n\t\t\tcase \"get_script_purpose\":\n\t\t\t\treturn Instance.new(new FuncType([], new ScriptPurposeType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scriptcontext\";\n\t}\n}\n\n/**\n * Builtin ScriptPurpose type (Minting| Spending| Rewarding | Certifying)\n * @package\n */\nclass ScriptPurposeType extends BuiltinType {\n\ttoString() {\n\t\treturn \"ScriptPurpose\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new MintingScriptPurposeType()).isBaseOf(site, type) || \n\t\t\t\t(new SpendingScriptPurposeType()).isBaseOf(site, type) || \n\t\t\t\t(new RewardingScriptPurposeType()).isBaseOf(site, type) || \n\t\t\t\t(new CertifyingScriptPurposeType()).isBaseOf(site, type); \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new_minting\":\n\t\t\t\treturn Instance.new(new FuncType([new MintingPolicyHashType()], new MintingScriptPurposeType()));\n\t\t\tcase \"new_spending\":\n\t\t\t\treturn Instance.new(new FuncType([new TxOutputIdType()], new SpendingScriptPurposeType()));\n\t\t\tcase \"new_rewarding\":\n\t\t\t\treturn Instance.new(new FuncType([new StakingCredentialType()], new RewardingScriptPurposeType()));\n\t\t\tcase \"new_certifying\":\n\t\t\t\treturn Instance.new(new FuncType([new DCertType()], new CertifyingScriptPurposeType()));\n\t\t\tcase \"Minting\":\n\t\t\t\treturn new MintingScriptPurposeType();\n\t\t\tcase \"Spending\":\n\t\t\t\treturn new SpendingScriptPurposeType();\n\t\t\tcase \"Rewarding\":\n\t\t\t\treturn new RewardingScriptPurposeType();\n\t\t\tcase \"Certifying\":\n\t\t\t\treturn new CertifyingScriptPurposeType();\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 4;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scriptpurpose\";\n\t}\n}\n\n/**\n * Builtin ScriptPurpose::Minting\n */\nclass MintingScriptPurposeType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new ScriptPurposeType());\n\t}\n\n\ttoString() {\n\t\treturn \"ScriptPurpose::Minting\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"policy_hash\":\n\t\t\t\treturn Instance.new(new MintingPolicyHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scriptpurpose__minting\";\n\t}\n}\n\n/**\n * Builtin ScriptPurpose::Spending\n */\nclass SpendingScriptPurposeType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new ScriptPurposeType());\n\t}\n\n\ttoString() {\n\t\treturn \"ScriptPurpose::Spending\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"output_id\":\n\t\t\t\treturn Instance.new(new TxOutputIdType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scriptpurpose__spending\";\n\t}\n}\n\n/**\n * Builtin ScriptPurpose::Rewarding\n */\nclass RewardingScriptPurposeType extends BuiltinEnumMember {\n\t/**\n\t * @param {?BuiltinType} parentType \n\t */\n\tconstructor(parentType = null) {\n\t\tsuper(parentType === null ? new ScriptPurposeType() : parentType);\n\t}\n\n\ttoString() {\n\t\treturn \"ScriptPurpose::Rewarding\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"credential\":\n\t\t\t\treturn Instance.new(new StakingCredentialType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 2;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scriptpurpose__rewarding\";\n\t}\n}\n\n/**\n * Builtin ScriptPurpose::Certifying type\n */\nclass CertifyingScriptPurposeType extends BuiltinEnumMember {\n\t/**\n\t * @param {?BuiltinType} parentType\n\t */\n\tconstructor(parentType = null) {\n\t\tsuper(parentType === null ? new ScriptPurposeType() : parentType);\n\t}\n\n\ttoString() {\n\t\treturn \"ScriptPurpose::Certifying\";\n\t}\n\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"dcert\":\n\t\t\t\treturn Instance.new(new DCertType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 3;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__scriptpurpose__certifying\";\n\t}\n}\n\n/**\n * Builtin StakingPurpose type (Rewarding or Certifying)\n * @package\n */\nclass StakingPurposeType extends BuiltinType {\n\ttoString() {\n\t\treturn \"StakingPurpose\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new StakingRewardingPurposeType()).isBaseOf(site, type) || \n\t\t\t\t(new StakingCertifyingPurposeType()).isBaseOf(site, type); \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"Rewarding\":\n\t\t\t\treturn new StakingRewardingPurposeType();\n\t\t\tcase \"Certifying\":\n\t\t\t\treturn new StakingCertifyingPurposeType();\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 2;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakingpurpose\";\n\t}\n}\n\n/**\n * Builtin StakingPurpose::Rewarding\n */\nclass StakingRewardingPurposeType extends RewardingScriptPurposeType {\n\tconstructor() {\n\t\tsuper(new StakingPurposeType());\n\t}\n\n\ttoString() {\n\t\treturn \"StakingPurpose::Rewarding\";\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakingpurpose__rewarding\";\n\t}\n}\n\n/**\n * Builtin StakingPurpose::Certifying type\n */\nclass StakingCertifyingPurposeType extends CertifyingScriptPurposeType {\n\tconstructor() {\n\t\tsuper(new StakingPurposeType());\n\t}\n\n\ttoString() {\n\t\treturn \"StakingPurpose::Certifying\";\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakingpurpose__certifying\";\n\t}\n}\n\n/**\n * Staking action type (confusingly named D(igest)(of)?Cert(ificate))\n * TODO: think of better name\n * @package\n */\nclass DCertType extends BuiltinType {\n\ttoString() {\n\t\treturn \"DCert\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new RegisterDCertType()).isBaseOf(site, type) || \n\t\t\t\t(new DeregisterDCertType()).isBaseOf(site, type) || \n\t\t\t\t(new DelegateDCertType()).isBaseOf(site, type) || \n\t\t\t\t(new RegisterPoolDCertType()).isBaseOf(site, type) ||\n\t\t\t\t(new RetirePoolDCertType()).isBaseOf(site, type); \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new_register\":\n\t\t\t\treturn Instance.new(new FuncType([new StakingCredentialType()], new RegisterDCertType()));\n\t\t\tcase \"new_deregister\":\n\t\t\t\treturn Instance.new(new FuncType([new StakingCredentialType()], new DeregisterDCertType()));\n\t\t\tcase \"new_delegate\":\n\t\t\t\treturn Instance.new(new FuncType([new StakingCredentialType(), new PubKeyHashType()], new DelegateDCertType()));\n\t\t\tcase \"new_register_pool\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType(), new PubKeyHashType()], new RegisterPoolDCertType()));\n\t\t\tcase \"new_retire_pool\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType(), new IntType()], new RetirePoolDCertType()));\n\t\t\tcase \"Register\":\n\t\t\t\treturn new RegisterDCertType();\n\t\t\tcase \"Deregister\":\n\t\t\t\treturn new DeregisterDCertType();\n\t\t\tcase \"Delegate\":\n\t\t\t\treturn new DelegateDCertType();\n\t\t\tcase \"RegisterPool\":\n\t\t\t\treturn new RegisterPoolDCertType();\n\t\t\tcase \"RetirePool\":\n\t\t\t\treturn new RetirePoolDCertType();\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 5;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__dcert\";\n\t}\n}\n\nclass RegisterDCertType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new DCertType());\n\t}\n\n\ttoString() {\n\t\treturn \"DCert::Register\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"credential\":\n\t\t\t\treturn Instance.new(new StakingCredentialType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__dcert__register\";\n\t}\n}\n\nclass DeregisterDCertType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new DCertType());\n\t}\n\n\ttoString() {\n\t\treturn \"DCert::Deregister\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"credential\":\n\t\t\t\treturn Instance.new(new StakingCredentialType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__dcert__deregister\";\n\t}\n}\n\nclass DelegateDCertType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new DCertType());\n\t}\n\n\ttoString() {\n\t\treturn \"DCert::Delegate\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"delegator\":\n\t\t\t\treturn Instance.new(new StakingCredentialType());\n\t\t\tcase \"pool_id\":\n\t\t\t\treturn Instance.new(new PubKeyHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 2;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__dcert__delegate\";\n\t}\n}\n\nclass RegisterPoolDCertType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new DCertType());\n\t}\n\n\ttoString() {\n\t\treturn \"DCert::RegisterPool\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"pool_id\":\n\t\t\t\treturn Instance.new(new PubKeyHashType());\n\t\t\tcase \"pool_vrf\":\n\t\t\t\treturn Instance.new(new PubKeyHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 3;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__dcert__registerpool\";\n\t}\n}\n\nclass RetirePoolDCertType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new DCertType());\n\t}\n\n\ttoString() {\n\t\treturn \"DCert::RetirePool\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"pool_id\":\n\t\t\t\treturn Instance.new(new PubKeyHashType());\n\t\t\tcase \"epoch\":\n\t\t\t\treturn Instance.new(new IntType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 4;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__dcert__retirepool\";\n\t}\n}\n\n/**\n * Builtin Tx type\n * @package\n */\nclass TxType extends BuiltinType {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\ttoString() {\n\t\treturn \"Tx\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\treturn Instance.new(new FuncType([\n\t\t\t\t\t\tnew ListType(new TxInputType()), // 0\n\t\t\t\t\t\tnew ListType(new TxInputType()), // 1\n\t\t\t\t\t\tnew ListType(new TxOutputType()), // 2\n\t\t\t\t\t\tnew ValueType(), // 3\n\t\t\t\t\t\tnew ValueType(), // 4\n\t\t\t\t\t\tnew ListType(new DCertType()), // 5\n\t\t\t\t\t\tnew MapType(new StakingCredentialType(), new IntType()), // 6\n\t\t\t\t\t\tnew TimeRangeType(), // 7\n\t\t\t\t\t\tnew ListType(new PubKeyHashType()), // 8\n\t\t\t\t\t\tnew MapType(new ScriptPurposeType(), new AnyDataType()), // 9\n\t\t\t\t\t\tnew MapType(new DatumHashType(), new AnyDataType()) // 10\n\t\t\t\t\t], this));\n\t\t\t\t} else {\n\t\t\t\t\tthrow name.referenceError(\"'Tx::new' can only be used after 'main'\");\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"inputs\":\n\t\t\t\treturn Instance.new(new ListType(new TxInputType()));\n\t\t\tcase \"ref_inputs\":\n\t\t\t\treturn Instance.new(new ListType(new TxInputType()));\n\t\t\tcase \"outputs\":\n\t\t\t\treturn Instance.new(new ListType(new TxOutputType()));\n\t\t\tcase \"fee\":\n\t\t\t\treturn Instance.new(new ValueType());\n\t\t\tcase \"minted\":\n\t\t\t\treturn Instance.new(new ValueType());\n\t\t\tcase \"dcerts\":\n\t\t\t\treturn Instance.new(new ListType(new DCertType()));\n\t\t\tcase \"withdrawals\":\n\t\t\t\treturn Instance.new(new MapType(new StakingCredentialType(), new IntType()));\n\t\t\tcase \"time_range\":\n\t\t\t\treturn Instance.new(new TimeRangeType());\n\t\t\tcase \"signatories\":\n\t\t\t\treturn Instance.new(new ListType(new PubKeyHashType()));\n\t\t\tcase \"redeemers\":\n\t\t\t\treturn Instance.new(new MapType(new ScriptPurposeType(), new RawDataType()));\n\t\t\tcase \"datums\":\n\t\t\t\treturn Instance.new(new MapType(new DatumHashType(), new RawDataType()));\n\t\t\tcase \"id\":\n\t\t\t\treturn Instance.new(new TxIdType());\n\t\t\tcase \"find_datum_hash\":\n\t\t\t\treturn Instance.new(new FuncType([new AnyDataType()], new DatumHashType()));\n\t\t\tcase \"get_datum_data\":\n\t\t\t\treturn Instance.new(new FuncType([new TxOutputType()], new RawDataType()));\n\t\t\tcase \"outputs_sent_to\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType()], new ListType(new TxOutputType())));\n\t\t\tcase \"outputs_sent_to_datum\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType(), new AnyDataType(), new BoolType()], new ListType(new TxOutputType())));\n\t\t\tcase \"outputs_locked_by\":\n\t\t\t\treturn Instance.new(new FuncType([new ValidatorHashType()], new ListType(new TxOutputType())));\n\t\t\tcase \"outputs_locked_by_datum\":\n\t\t\t\treturn Instance.new(new FuncType([new ValidatorHashType(), new AnyDataType(), new BoolType()], new ListType(new TxOutputType())));\n\t\t\tcase \"value_sent_to\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType()], new ValueType()));\n\t\t\tcase \"value_sent_to_datum\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType(), new AnyDataType(), new BoolType()], new ValueType()));\n\t\t\tcase \"value_locked_by\":\n\t\t\t\treturn Instance.new(new FuncType([new ValidatorHashType()], new ValueType()));\n\t\t\tcase \"value_locked_by_datum\":\n\t\t\t\treturn Instance.new(new FuncType([new ValidatorHashType(), new AnyDataType(), new BoolType()], new ValueType()));\n\t\t\tcase \"is_signed_by\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType()], new BoolType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__tx\";\n\t}\n}\n\n/**\n * Builtin TxId type\n * @package\n */\nclass TxIdType extends BuiltinType {\n\ttoString() {\n\t\treturn \"TxId\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, this], new BoolType()));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new ByteArrayType()], this));\n\t\t\tcase \"CURRENT\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\treturn Instance.new(this);\n\t\t\t\t} else {\n\t\t\t\t\tthrow name.referenceError(\"'TxId::CURRENT' can only be used after 'main'\");\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__txid\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn TxId;\n\t}\n}\n\n/**\n * Builtin TxInput type\n * @package\n */\nclass TxInputType extends BuiltinType {\n\ttoString() {\n\t\treturn \"TxInput\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new\":\n\t\t\t\tif (this.macrosAllowed) {\n\t\t\t\t\treturn Instance.new(new FuncType([\n\t\t\t\t\t\tnew TxOutputIdType(), // 0\n\t\t\t\t\t\tnew TxOutputType(), // 1\n\t\t\t\t\t], this));\n\t\t\t\t} else {\n\t\t\t\t\tthrow name.referenceError(\"'TxInput::new' can only be used after 'main'\");\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"output_id\":\n\t\t\t\treturn Instance.new(new TxOutputIdType());\n\t\t\tcase \"output\":\n\t\t\t\treturn Instance.new(new TxOutputType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__txinput\";\n\t}\n}\n\n/**\n * Builtin TxOutput type\n * @package\n */\nclass TxOutputType extends BuiltinType {\n\ttoString() {\n\t\treturn \"TxOutput\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([\n\t\t\t\t\tnew AddressType(), // 0\n\t\t\t\t\tnew ValueType(), // 1\n\t\t\t\t\tnew OutputDatumType(), // 2\n\t\t\t\t], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"address\":\n\t\t\t\treturn Instance.new(new AddressType());\n\t\t\tcase \"value\":\n\t\t\t\treturn Instance.new(new ValueType());\n\t\t\tcase \"datum\":\n\t\t\t\treturn Instance.new(new OutputDatumType());\n\t\t\tcase \"ref_script_hash\":\n\t\t\t\treturn Instance.new(new OptionType(new ScriptHashType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__txoutput\";\n\t}\n}\n\n/**\n * @package\n */\nclass OutputDatumType extends BuiltinType {\n\ttoString() {\n\t\treturn \"OutputDatum\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new NoOutputDatumType()).isBaseOf(site, type) || \n\t\t\t\t(new HashedOutputDatumType()).isBaseOf(site, type) || \n\t\t\t\t(new InlineOutputDatumType()).isBaseOf(site, type);; \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new_none\":\n\t\t\t\treturn Instance.new(new FuncType([], new NoOutputDatumType()));\n\t\t\tcase \"new_hash\":\n\t\t\t\treturn Instance.new(new FuncType([new DatumHashType()], new HashedOutputDatumType()));\n\t\t\tcase \"new_inline\": {\n\t\t\t\tlet a = new ParamType(\"a\");\n\t\t\t\treturn new ParamFuncValue([a], new FuncType([a], new InlineOutputDatumType()), () => {\n\t\t\t\t\tlet type = a.type;\n\t\t\t\t\tif (type === null) {\n\t\t\t\t\t\tthrow new Error(\"should've been inferred by now\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (a.type instanceof FuncType) {\n\t\t\t\t\t\t\tthrow name.site.typeError(\"can't use function as argument to OutputDatum::new_inline()\");\n\t\t\t\t\t\t} else if ((new BoolType()).isBaseOf(Site.dummy(), type)) {\n\t\t\t\t\t\t\treturn \"new_inline_from_bool\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn \"new_inline\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tcase \"None\":\n\t\t\t\treturn new NoOutputDatumType();\n\t\t\tcase \"Hash\":\n\t\t\t\treturn new HashedOutputDatumType();\n\t\t\tcase \"Inline\":\n\t\t\t\treturn new InlineOutputDatumType();\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"get_inline_data\":\n\t\t\t\treturn Instance.new(new FuncType([], new RawDataType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 3;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__outputdatum\";\n\t}\n}\n\n/**\n * @package\n */\nclass NoOutputDatumType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new OutputDatumType);\n\t}\n\n\ttoString() {\n\t\treturn \"OutputDatum::None\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__outputdatum__none\";\n\t}\n}\n\n/**\n * @package\n */\nclass HashedOutputDatumType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new OutputDatumType());\n\t}\n\n\ttoString() {\n\t\treturn \"OutputDatum::Hash\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"hash\":\n\t\t\t\treturn Instance.new(new DatumHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__outputdatum__hash\";\n\t}\n}\n\n/**\n * @package\n */\nclass InlineOutputDatumType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new OutputDatumType());\n\t}\n\n\ttoString() {\n\t\treturn \"OutputDatum::Inline\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"data\":\n\t\t\t\treturn Instance.new(new RawDataType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 2;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__outputdatum__inline\";\n\t}\n}\n\n/**\n * Type of external data that must be cast/type-checked before using\n * Not named 'Data' in Js because it's too generic\n * @package\n */\nclass RawDataType extends BuiltinType {\n\ttoString() {\n\t\treturn \"Data\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"from_data\":\n\t\t\t\tthrow name.referenceError(`calling Data::from_data(data) is useless`);\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"tag\":\n\t\t\t\treturn Instance.new(new IntType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__data\";\n\t}\n}\n\n/**\n * Builtin TxOutputId type\n * @package\n */\nclass TxOutputIdType extends BuiltinType {\n\ttoString() {\n\t\treturn \"TxOutputId\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__lt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__geq\":\n\t\t\t\treturn Instance.new(new FuncType([this, new TxOutputIdType()], new BoolType()));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new TxIdType(), new IntType()], new TxOutputIdType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"tx_id\":\n\t\t\t\treturn Instance.new(new TxIdType());\n\t\t\tcase \"index\":\n\t\t\t\treturn Instance.new(new IntType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__txoutputid\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn TxOutputId;\n\t}\n}\n\n/**\n * Buitin Address type\n * @package\n */\nclass AddressType extends BuiltinType {\n\ttoString() {\n\t\treturn \"Address\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([\n\t\t\t\t\tnew CredentialType(), // 0\n\t\t\t\t\tnew OptionType(new StakingCredentialType()), // 1\n\t\t\t\t], this));\n\t\t\tcase \"new_empty\":\n\t\t\t\treturn Instance.new(new FuncType([], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"credential\":\n\t\t\t\treturn Instance.new(new CredentialType());\n\t\t\tcase \"staking_credential\":\n\t\t\t\treturn Instance.new(new OptionType(new StakingCredentialType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__address\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn Address;\n\t}\n}\n\n/**\n * Builtin Credential type\n * @package\n */\nclass CredentialType extends BuiltinType {\n\ttoString() {\n\t\treturn \"Credential\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new CredentialPubKeyType()).isBaseOf(site, type) || \n\t\t\t\t(new CredentialValidatorType()).isBaseOf(site, type); \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"PubKey\":\n\t\t\t\treturn new CredentialPubKeyType();\n\t\t\tcase \"Validator\":\n\t\t\t\treturn new CredentialValidatorType();\n\t\t\tcase \"new_pubkey\":\n\t\t\t\treturn Instance.new(new FuncType([new PubKeyHashType()], new CredentialPubKeyType()));\n\t\t\tcase \"new_validator\":\n\t\t\t\treturn Instance.new(new FuncType([new ValidatorHashType()], new CredentialValidatorType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__credential\";\n\t}\n}\n\n/**\n * Builtin Credential::PubKey\n */\nclass CredentialPubKeyType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new CredentialType());\n\t}\n\n\ttoString() {\n\t\treturn \"Credential::PubKey\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"hash\":\n\t\t\t\treturn Instance.new(new PubKeyHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__credential__pubkey\";\n\t}\n}\n\n/**\n * Builtin Credential::Validator type\n */\nclass CredentialValidatorType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new CredentialType());\n\t}\n\n\ttoString() {\n\t\treturn \"Credential::Validator\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"hash\":\n\t\t\t\treturn Instance.new(new ValidatorHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__credential__validator\";\n\t}\n}\n\n/**\n * Builtin StakingHash type\n * @package\n */\nclass StakingHashType extends BuiltinType {\n\ttoString() {\n\t\treturn \"StakingHash\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new StakingHashStakeKeyType()).isBaseOf(site, type) || \n\t\t\t\t(new StakingHashValidatorType()).isBaseOf(site, type); \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"StakeKey\":\n\t\t\t\treturn new StakingHashStakeKeyType();\n\t\t\tcase \"Validator\":\n\t\t\t\treturn new StakingHashValidatorType();\n\t\t\tcase \"new_stakekey\":\n\t\t\t\treturn Instance.new(new FuncType([new StakeKeyHashType()], new StakingHashStakeKeyType()));\n\t\t\tcase \"new_validator\":\n\t\t\t\treturn Instance.new(new FuncType([new StakingValidatorHashType()], new StakingHashValidatorType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 2;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakinghash\";\n\t}\n}\n\n/**\n * Builtin StakingHash::StakeKey\n */\nclass StakingHashStakeKeyType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new StakingHashType());\n\t}\n\n\ttoString() {\n\t\treturn \"StakingHash::StakeKey\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"hash\":\n\t\t\t\treturn Instance.new(new StakeKeyHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakinghash__stakekey\";\n\t}\n}\n\n/**\n * Builtin StakingHash::Validator type\n */\nclass StakingHashValidatorType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new StakingHashType());\n\t}\n\n\ttoString() {\n\t\treturn \"StakingHash::Validator\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"hash\":\n\t\t\t\treturn Instance.new(new StakingValidatorHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakinghash__validator\";\n\t}\n}\n\n/**\n * Builtin StakingCredential type\n * @package\n */\nclass StakingCredentialType extends BuiltinType {\n\ttoString() {\n\t\treturn \"StakingCredential\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type \n\t * @returns {boolean}\n\t */\n\tisBaseOf(site, type) {\n\t\tlet b = super.isBaseOf(site, type) ||\n\t\t\t\t(new StakingHashCredentialType()).isBaseOf(site, type) || \n\t\t\t\t(new StakingPtrCredentialType()).isBaseOf(site, type); \n\n\t\treturn b;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"Hash\":\n\t\t\t\treturn new StakingHashCredentialType();\n\t\t\tcase \"Ptr\":\n\t\t\t\treturn new StakingPtrCredentialType();\n\t\t\tcase \"new_hash\":\n\t\t\t\treturn Instance.new(new FuncType([new StakingHashType()], new StakingHashCredentialType()));\n\t\t\tcase \"new_ptr\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType(), new IntType(), new IntType()], new StakingPtrCredentialType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn 2;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakingcredential\";\n\t}\n}\n\n/**\n * Builtin StakingCredential::Hash\n */\nclass StakingHashCredentialType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new StakingCredentialType());\n\t}\n\n\ttoString() {\n\t\treturn \"StakingCredential::Hash\";\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"hash\":\n\t\t\t\treturn Instance.new(new StakingHashType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 0;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakingcredential__hash\";\n\t}\n}\n\n/**\n * Builtin StakingCredential::Ptr\n */\nclass StakingPtrCredentialType extends BuiltinEnumMember {\n\tconstructor() {\n\t\tsuper(new StakingCredentialType());\n\t}\n\n\ttoString() {\n\t\treturn \"StakingCredential::Ptr\";\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn 1;\n\t}\n\n\tget path() {\n\t\treturn \"__helios__stakingcredential__ptr\";\n\t}\n}\n\n/**\n * Builtin Time type. Opaque alias of Int representing milliseconds since 1970\n */\nclass TimeType extends BuiltinType {\n\ttoString() {\n\t\treturn \"Time\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\t\treturn Instance.new(new FuncType([this, new DurationType()], new TimeType()));\n\t\t\tcase \"__sub\":\n\t\t\t\treturn Instance.new(new FuncType([this, new TimeType()], new DurationType()));\n\t\t\tcase \"__sub_alt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new DurationType()], new TimeType()));\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new TimeType()], new BoolType()));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType()], this));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__time\";\n\t}\n\n\t/**\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn Time;\n\t}\n}\n\n/**\n * Builtin Duration type\n * @package\n */\nclass DurationType extends BuiltinType {\n\ttoString() {\n\t\treturn \"Duration\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\tcase \"__sub\":\n\t\t\tcase \"__mod\":\n\t\t\t\treturn Instance.new(new FuncType([this, new DurationType()], new DurationType()));\n\t\t\tcase \"__mul\":\n\t\t\tcase \"__div\":\n\t\t\t\treturn Instance.new(new FuncType([this, new IntType()], new DurationType()));\n\t\t\tcase \"__div_alt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new DurationType()], new IntType()));\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new DurationType()], new BoolType()));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType()], this));\n\t\t\tcase \"SECOND\":\n\t\t\tcase \"MINUTE\":\n\t\t\tcase \"HOUR\":\n\t\t\tcase \"DAY\":\n\t\t\tcase \"WEEK\":\n\t\t\t\treturn Instance.new(this)\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__duration\";\n\t}\n\n\tget userType() {\n\t\treturn Duration;\n\t}\n}\n\n/**\n * Builtin TimeRange type\n * @package\n */\nclass TimeRangeType extends BuiltinType {\n\ttoString() {\n\t\treturn \"TimeRange\";\n\t}\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new TimeType(), new TimeType()], new TimeRangeType()));\n\t\t\tcase \"ALWAYS\":\n\t\t\t\treturn Instance.new(new TimeRangeType());\n\t\t\tcase \"NEVER\":\n\t\t\t\treturn Instance.new(new TimeRangeType());\n\t\t\tcase \"from\":\n\t\t\t\treturn Instance.new(new FuncType([new TimeType()], new TimeRangeType()));\n\t\t\tcase \"to\":\n\t\t\t\treturn Instance.new(new FuncType([new TimeType()], new TimeRangeType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"is_before\": // is_before condition never overlaps with contains\n\t\t\tcase \"is_after\": // is_after condition never overlaps with contains\n\t\t\tcase \"contains\":\n\t\t\t\treturn Instance.new(new FuncType([new TimeType()], new BoolType()));\n\t\t\tcase \"start\":\n\t\t\tcase \"end\":\n\t\t\t\treturn Instance.new(new TimeType());\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__timerange\";\n\t}\n}\n\n/**\n * Builtin AssetClass type\n * @package\n */\nclass AssetClassType extends BuiltinType {\n\ttoString() {\n\t\treturn \"AssetClass\";\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"ADA\":\n\t\t\t\treturn Instance.new(new AssetClassType());\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new MintingPolicyHashType(), new ByteArrayType()], new AssetClassType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"mph\":\n\t\t\t\treturn Instance.new(new MintingPolicyHashType());\n\t\t\tcase \"token_name\":\n\t\t\t\treturn Instance.new(new ByteArrayType());\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn \"__helios__assetclass\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn AssetClass;\n\t}\n}\n\n/**\n * Builtin money Value type\n * @package\n */\nclass ValueType extends BuiltinType {\n\ttoString() {\n\t\treturn \"Value\";\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__add\":\n\t\t\tcase \"__sub\":\n\t\t\t\treturn Instance.new(new FuncType([this, new ValueType()], new ValueType()));\n\t\t\tcase \"__mul\":\n\t\t\tcase \"__div\":\n\t\t\t\treturn Instance.new(new FuncType([this, new IntType()], new ValueType()));\n\t\t\tcase \"__geq\":\n\t\t\tcase \"__gt\":\n\t\t\tcase \"__leq\":\n\t\t\tcase \"__lt\":\n\t\t\t\treturn Instance.new(new FuncType([this, new ValueType()], new BoolType()));\n\t\t\tcase \"ZERO\":\n\t\t\t\treturn Instance.new(new ValueType());\n\t\t\tcase \"lovelace\":\n\t\t\t\treturn Instance.new(new FuncType([new IntType()], new ValueType()));\n\t\t\tcase \"new\":\n\t\t\t\treturn Instance.new(new FuncType([new AssetClassType(), new IntType()], new ValueType()));\n\t\t\tcase \"from_map\":\n\t\t\t\treturn Instance.new(new FuncType([new MapType(new MintingPolicyHashType(), new MapType(new ByteArrayType(), new IntType()))], new ValueType()));\n\t\t\tdefault:\n\t\t\t\treturn super.getTypeMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {Word} name \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name) {\n\t\tswitch (name.value) {\n\t\t\tcase \"contains\":\n\t\t\t\treturn Instance.new(new FuncType([new ValueType()], new BoolType()));\n\t\t\tcase \"is_zero\":\n\t\t\t\treturn Instance.new(new FuncType([], new BoolType()));\n\t\t\tcase \"get\":\n\t\t\t\treturn Instance.new(new FuncType([new AssetClassType()], new IntType()));\n\t\t\tcase \"get_safe\":\n\t\t\t\treturn Instance.new(new FuncType([new AssetClassType()], new IntType()));\n\t\t\tcase \"get_lovelace\":\n\t\t\t\treturn Instance.new(new FuncType([], new IntType()));\n\t\t\tcase \"get_assets\":\n\t\t\t\treturn Instance.new(new FuncType([], new ValueType()));\n\t\t\tcase \"get_policy\":\n\t\t\t\treturn Instance.new(new FuncType([new MintingPolicyHashType()], new MapType(new ByteArrayType(), new IntType())));\n\t\t\tcase \"contains_policy\":\n\t\t\t\treturn Instance.new(new FuncType([new MintingPolicyHashType()], new BoolType()));\n\t\t\tcase \"show\":\n\t\t\t\treturn Instance.new(new FuncType([], new StringType()));\n\t\t\tcase \"to_map\":\n\t\t\t\treturn Instance.new(new FuncType([], new MapType(new MintingPolicyHashType(), new MapType(new ByteArrayType(), new IntType()))));\n\t\t\tdefault:\n\t\t\t\treturn super.getInstanceMember(name);\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @type {string}\n\t */\n\tget path() {\n\t\treturn \"__helios__value\";\n\t}\n\n\t/**\n\t * @package\n\t * @type {HeliosDataClass<HeliosData>}\n\t */\n\tget userType() {\n\t\treturn Value;\n\t}\n}\n\n\n/////////////////////\n// Section 14: Scopes\n/////////////////////\n\n/**\n * GlobalScope sits above the top-level scope and contains references to all the builtin Values and Types\n * @package\n */\nclass GlobalScope {\n\t/**\n\t * @type {[Word, EvalEntity][]}\n\t */\n\t#values;\n\n\tconstructor() {\n\t\tthis.#values = [];\n\t}\n\n\t/**\n\t * Checks if scope contains a name\n\t * @param {Word} name \n\t * @returns {boolean}\n\t */\n\thas(name) {\n\t\tfor (let pair of this.#values) {\n\t\t\tif (pair[0].toString() == name.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets a global name, doesn't check for uniqueness\n\t * Called when initializing GlobalScope\n\t * @param {string | Word} name\n\t * @param {EvalEntity} value\n\t */\n\tset(name, value) {\n\t\t/** @type {Word} */\n\t\tlet nameWord = !(name instanceof Word) ? Word.new(name) : name;\n\n\t\tthis.#values.push([nameWord, value]);\n\t}\n\n\t/**\n\t * Gets a named value from the scope.\n\t * Throws an error if not found.\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tget(name) {\n\t\tfor (let pair of this.#values) {\n\t\t\tif (pair[0].toString() == name.toString()) {\n\t\t\t\tpair[1].markAsUsed();\n\t\t\t\treturn pair[1];\n\t\t\t}\n\t\t}\n\n\t\tthrow name.referenceError(`'${name.toString()}' undefined`);\n\t}\n\n\t/**\n\t * Check if funcstatement is called recursively (always false here)\n\t * @param {RecurseableStatement} statement\n\t * @returns {boolean}\n\t */\n\tisRecursive(statement) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisStrict() {\n\t\tthrow new Error(\"should've been returned be TopScope\");\n\t}\n\n\t/**\n\t * Initialize the GlobalScope with all the builtins\n\t * @param {number} purpose\n\t * @returns {GlobalScope}\n\t */\n\tstatic new(purpose) {\n\t\tlet scope = new GlobalScope();\n\n\t\t// List (aka '[]'), Option, and Map types are accessed through special expressions\n\n\t\t// fill the global scope with builtin types\n        scope.set(\"Address\",              new AddressType());\n        scope.set(\"AssetClass\",           new AssetClassType());\n        scope.set(\"Bool\",                 new BoolType());\n        scope.set(\"ByteArray\",            new ByteArrayType());\n        scope.set(\"Credential\",           new CredentialType());\n        scope.set(\"DatumHash\",            new DatumHashType());\n        scope.set(\"Data\",                 new RawDataType());\n        scope.set(\"DCert\",                new DCertType());\n        scope.set(\"Duration\",             new DurationType());\n\t\tscope.set(\"Int\",                  new IntType());\n        scope.set(\"MintingPolicyHash\",    new MintingPolicyHashType(purpose));\n        scope.set(\"OutputDatum\",          new OutputDatumType());\n        scope.set(\"PubKey\",               new PubKeyType());\n\t\tscope.set(\"PubKeyHash\",           new PubKeyHashType());\n        scope.set(\"ScriptContext\",        new ScriptContextType(purpose));\n        scope.set(\"ScriptHash\",           new ScriptHashType());\n        scope.set(\"ScriptPurpose\",        new ScriptPurposeType());\n        scope.set(\"StakeKeyHash\",         new StakeKeyHashType());\n        scope.set(\"StakingCredential\",    new StakingCredentialType());\n        scope.set(\"StakingHash\",          new StakingHashType());\n        scope.set(\"StakingPurpose\",       new StakingPurposeType());\n        scope.set(\"StakingValidatorHash\", new StakingValidatorHashType(purpose));\n\t\tscope.set(\"String\",               new StringType());\n        scope.set(\"Time\",                 new TimeType());\n        scope.set(\"TimeRange\",            new TimeRangeType());\n        scope.set(\"Tx\",                   new TxType());\n        scope.set(\"TxId\",                 new TxIdType());\n        scope.set(\"TxInput\",              new TxInputType());\n        scope.set(\"TxOutput\",             new TxOutputType());\n        scope.set(\"TxOutputId\",           new TxOutputIdType());\n\t\tscope.set(\"ValidatorHash\",        new ValidatorHashType(purpose));\n        scope.set(\"Value\",                new ValueType());\n\n        // builtin functions\n        scope.set(\"assert\",               new AssertFunc());\n\t\tscope.set(\"error\",                new ErrorFunc());\n        scope.set(\"print\",                new PrintFunc());\n\t\t\n\n\t\treturn scope;\n\t}\n\n\tallowMacros() {\n\t\tfor (let [_, value] of this.#values) {\n\t\t\tif (value instanceof BuiltinType) {\n\t\t\t\tvalue.allowMacros();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {(name: string, type: Type) => void} callback \n\t */\n\tloopTypes(callback) {\n\t\tfor (let [k, v] of this.#values) {\n\t\t\tif (v instanceof Type) {\n\t\t\t\tcallback(k.value, v);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * User scope\n * @package\n */\nclass Scope {\n\t/** @type {GlobalScope | Scope} */\n\t#parent;\n\n\t/** \n\t * TopScope can elverage the #values to store ModuleScopes\n\t * @type {[Word, (EvalEntity | Scope)][]} \n\t */\n\t#values;\n\n\t/**\n\t * @param {GlobalScope | Scope} parent \n\t */\n\tconstructor(parent) {\n\t\tthis.#parent = parent;\n\t\tthis.#values = []; // list of pairs\n\t}\n\n\t/**\n\t * Used by top-scope to loop over all the statements\n\t */\n\tget values() {\n\t\treturn this.#values.slice();\n\t}\n\n\t/**\n\t * Checks if scope contains a name\n\t * @param {Word} name \n\t * @returns {boolean}\n\t */\n\thas(name) {\n\t\tfor (let pair of this.#values) {\n\t\t\tif (pair[0].toString() == name.toString()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.#parent !== null) {\n\t\t\treturn this.#parent.has(name);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Sets a named value. Throws an error if not unique\n\t * @param {Word} name \n\t * @param {EvalEntity | Scope} value \n\t */\n\tset(name, value) {\n\t\tif (this.has(name)) {\n\t\t\tthrow name.syntaxError(`'${name.toString()}' already defined`);\n\t\t}\n\n\t\tthis.#values.push([name, value]);\n\t}\n\n\t/**\n\t * Gets a named value from the scope. Throws an error if not found\n\t * @param {Word} name \n\t * @returns {EvalEntity | Scope}\n\t */\n\tget(name) {\n\t\tif (!(name instanceof Word)) {\n\t\t\tname = Word.new(name);\n\t\t}\n\n\t\tfor (let [key, entity] of this.#values) {\n\t\t\tif (key.toString() == name.toString()) {\n\t\t\t\tif (entity instanceof EvalEntity) {\n\t\t\t\t\tentity.markAsUsed();\n\t\t\t\t}\n\n\t\t\t\treturn entity;\n\t\t\t}\n\t\t}\n\n\t\tif (this.#parent !== null) {\n\t\t\treturn this.#parent.get(name);\n\t\t} else {\n\t\t\tthrow name.referenceError(`'${name.toString()}' undefined`);\n\t\t}\n\t}\n\n\t/**\n\t * Check if function statement is called recursively\n\t * @param {RecurseableStatement} statement\n\t * @returns {boolean}\n\t */\n\tisRecursive(statement) {\n\t\treturn this.#parent.isRecursive(statement);\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisStrict() {\n\t\treturn this.#parent.isStrict();\n\t}\n\n\t/**\n\t * Asserts that all named values are user.\n\t * Throws an error if some are unused.\n\t * Check is only run if we are in strict mode\n\t * @param {boolean} onlyIfStrict\n\t */\n\tassertAllUsed(onlyIfStrict = true) {\n\t\tif (!onlyIfStrict || this.isStrict()) {\n\t\t\tfor (let [name, entity] of this.#values) {\n\t\t\t\tif (entity instanceof EvalEntity && !entity.isUsed()) {\n\t\t\t\t\tthrow name.referenceError(`'${name.toString()}' unused`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {boolean}\n\t */\n\tisUsed(name) {\n\t\tfor (let [name, entity] of this.#values) {\n\t\t\tif (name.value == name.value && entity instanceof EvalEntity) {\n\t\t\t\treturn entity.isUsed();\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`${name.value} not found`);\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {Type}\n\t */\n\tassertType(site) {\n\t\tthrow site.typeError(\"expected a type, got a module\");\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {Instance}\n\t */\n\tassertValue(site) {\n\t\tthrow site.typeError(\"expected a value, got a module\");\n\t}\n\n\tdump() {\n\t\tconsole.log(\"DUMPING SCOPE\", this.#values.length);\n\t\tthis.#values.forEach(([w, v]) => {\n\t\t\tconsole.log(w.value, v);\n\t\t});\n\t}\n\n\t/**\n\t * @param {(name: string, type: Type) => void} callback \n\t */\n\tloopTypes(callback) {\n\t\tthis.#parent.loopTypes(callback);\n\n\t\tfor (let [k, v] of this.#values) {\n\t\t\tif (v instanceof Type) {\n\t\t\t\tcallback(k.value, v);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * TopScope is a special scope that can contain UserTypes\n * @package\n */\nclass TopScope extends Scope {\n\t#strict;\n\n\t/**\n\t * @param {GlobalScope} parent \n\t * @param {boolean} strict\n\t */\n\tconstructor(parent, strict = true) {\n\t\tsuper(parent);\n\t\tthis.#strict = strict;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @param {EvalEntity | Scope} value \n\t */\n\tset(name, value) {\n\t\tsuper.set(name, value);\n\t}\n\n\t/**\n\t * @param {boolean} s \n\t */\n\tsetStrict(s) {\n\t\tthis.#strict = s;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisStrict() {\n\t\treturn this.#strict;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {ModuleScope}\n\t */\n\tgetModuleScope(name) {\n\t\tconst maybeModuleScope = this.get(name);\n\t\tif (maybeModuleScope instanceof ModuleScope) {\n\t\t\treturn maybeModuleScope;\n\t\t} else {\n\t\t\tthrow new Error(\"expected ModuleScope\");\n\t\t}\n\t}\n}\n\n/**\n * @package\n */\nclass ModuleScope extends Scope {\n}\n\n/**\n * FuncStatementScope is a special scope used to detect recursion\n * @package\n */\nclass FuncStatementScope extends Scope {\n\t#statement;\n\n\t/**\n\t * @param {Scope} parent\n\t * @param {RecurseableStatement} statement\n\t */\n\tconstructor(parent, statement) {\n\t\tsuper(parent);\n\n\t\tthis.#statement = statement;\n\t}\n\n\t/**\n\t * @param {RecurseableStatement} statement \n\t * @returns {boolean}\n\t */\n\tisRecursive(statement) {\n\t\tif (this.#statement === statement) {\n\t\t\tthis.#statement.setRecursive();\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn super.isRecursive(statement);\n\t\t}\n\t}\n}\n\n\n/////////////////////////////////////\n// Section 15: Helios AST expressions\n/////////////////////////////////////\n\n/**\n * Base class of every Type and Instance expression.\n */\nclass Expr extends Token {\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tsuper(site);\n\t}\n\n\tuse() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Base class of every Type expression\n * Caches evaluated Type.\n * @package\n */\nclass TypeExpr extends Expr {\n\t#cache;\n\n\t/**\n\t * @param {Site} site \n\t * @param {?Type} cache\n\t */\n\tconstructor(site, cache = null) {\n\t\tsuper(site);\n\t\tthis.#cache = cache;\n\t}\n\n\tget type() {\n\t\tif (this.#cache === null) {\n\t\t\tthrow new Error(\"type not yet evaluated\");\n\t\t} else {\n\t\t\treturn this.#cache;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\teval(scope) {\n\t\tif (this.#cache === null) {\n\t\t\tthis.#cache = this.evalInternal(scope);\n\t\t}\n\n\t\treturn this.#cache;\n\t}\n}\n\n/**\n * Type reference class (i.e. using a Word)\n * @package\n */\nclass TypeRefExpr extends TypeExpr {\n\t#name;\n\n\t/**\n\t * @param {Word} name\n\t * @param {?Type} cache\n\t */\n\tconstructor(name, cache = null) {\n\t\tsuper(name.site, cache);\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#name.toString();\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tlet type = scope.get(this.#name);\n\n\t\treturn type.assertType(this.#name.site);\n\t}\n\n\tget path() {\n\t\treturn this.type.path;\n\t}\n\n\tuse() {\n\t\tlet t = this.type;\n\n\t\tif (t instanceof StatementType) {\n\t\t\tt.statement.use();\n\t\t}\n\t}\n}\n\n/**\n * Type::Member expression\n * @package\n */\nclass TypePathExpr extends TypeExpr {\n\t#baseExpr;\n\t#memberName;\n\n\t/**\n\t * @param {Site} site \n\t * @param {TypeExpr} baseExpr \n\t * @param {Word} memberName\n\t */\n\tconstructor(site, baseExpr, memberName) {\n\t\tsuper(site);\n\t\tthis.#baseExpr = baseExpr;\n\t\tthis.#memberName = memberName;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#baseExpr.toString()}::${this.#memberName.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tlet enumType = this.#baseExpr.eval(scope);\n\n\t\tlet memberType = enumType.getTypeMember(this.#memberName);\n\n\t\treturn memberType.assertType(this.#memberName.site);\n\t}\n\n\tget path() {\n\t\treturn this.type.path;\n\t}\n\n\tuse() {\n\t\tthis.#baseExpr.use();\n\t}\n}\n\n/**\n * []ItemType\n * @package\n */\nclass ListTypeExpr extends TypeExpr {\n\t#itemTypeExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {TypeExpr} itemTypeExpr \n\t */\n\tconstructor(site, itemTypeExpr) {\n\t\tsuper(site);\n\t\tthis.#itemTypeExpr = itemTypeExpr;\n\t}\n\n\ttoString() {\n\t\treturn `[]${this.#itemTypeExpr.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tlet itemType = this.#itemTypeExpr.eval(scope);\n\n\t\tif (itemType instanceof FuncType) {\n\t\t\tthrow this.#itemTypeExpr.typeError(\"list item type can't be function\");\n\t\t}\n\n\t\treturn new ListType(itemType);\n\t}\n\n\tuse() {\n\t\tthis.#itemTypeExpr.use();\n\t}\n}\n\n/**\n * Map[KeyType]ValueType expression\n * @package\n */\nclass MapTypeExpr extends TypeExpr {\n\t#keyTypeExpr;\n\t#valueTypeExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {TypeExpr} keyTypeExpr \n\t * @param {TypeExpr} valueTypeExpr \n\t */\n\tconstructor(site, keyTypeExpr, valueTypeExpr) {\n\t\tsuper(site);\n\t\tthis.#keyTypeExpr = keyTypeExpr;\n\t\tthis.#valueTypeExpr = valueTypeExpr;\n\t}\n\n\ttoString() {\n\t\treturn `Map[${this.#keyTypeExpr.toString()}]${this.#valueTypeExpr.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tlet keyType = this.#keyTypeExpr.eval(scope);\n\n\t\tif (keyType instanceof FuncType) {\n\t\t\tthrow this.#keyTypeExpr.typeError(\"map key type can't be function\");\n\t\t} else if (keyType instanceof BoolType) {\n\t\t\tthrow this.#keyTypeExpr.typeError(\"map key type can't be a boolean\");\n\t\t}\n\n\t\tlet valueType = this.#valueTypeExpr.eval(scope);\n\n\t\tif (valueType instanceof FuncType) {\n\t\t\tthrow this.#valueTypeExpr.typeError(\"map value type can't be function\");\n\t\t}\n\n\t\treturn new MapType(keyType, valueType);\n\t}\n\n\tuse() {\n\t\tthis.#keyTypeExpr.use();\n\t\tthis.#valueTypeExpr.use();\n\t}\n}\n\n/**\n * Option[SomeType] expression\n * @package\n */\nclass OptionTypeExpr extends TypeExpr {\n\t#someTypeExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {TypeExpr} someTypeExpr \n\t */\n\tconstructor(site, someTypeExpr) {\n\t\tsuper(site);\n\t\tthis.#someTypeExpr = someTypeExpr;\n\t}\n\n\ttoString() {\n\t\treturn `Option[${this.#someTypeExpr.toString()}]`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tlet someType = this.#someTypeExpr.eval(scope);\n\n\t\tif (someType instanceof FuncType) {\n\t\t\tthrow this.#someTypeExpr.typeError(\"option some type can't be function\");\n\t\t}\n\n\t\treturn new OptionType(someType);\n\t}\n\n\tuse() {\n\t\tthis.#someTypeExpr.use();\n\t}\n}\n\n/**\n * '()' which can only be used as return type of func\n * @package\n */\nclass VoidTypeExpr extends TypeExpr {\n\tconstructor(site) {\n\t\tsuper(site);\n\t}\n\n\ttoString() {\n\t\treturn \"()\";\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\treturn new VoidType();\n\t}\n\t\n\tuse() {\n\t}\n}\n\n/**\n * @package\n */\nclass FuncArgTypeExpr extends Token {\n\t#name;\n\t#typeExpr;\n\toptional;\n\n\t/**\n\t * @param {Site} site \n\t * @param {null | Word} name \n\t * @param {TypeExpr} typeExpr \n\t * @param {boolean} optional \n\t */\n\tconstructor(site, name, typeExpr, optional) {\n\t\tsuper(site);\n\t\tthis.#name = name;\n\t\tthis.#typeExpr = typeExpr;\n\t\tthis.optional = optional;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisNamed() {\n\t\treturn this.#name == null;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisOptional() {\n\t\treturn this.optional;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn [\n\t\t\tthis.#name != null ? `${this.#name.toString()}: ` : \"\",\n\t\t\tthis.optional ? \"?\" : \"\",\n\t\t\tthis.#typeExpr.toString()\n\t\t].join(\"\");\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {ArgType}\n\t */\n\teval(scope) {\n\t\treturn new ArgType(this.#name, this.#typeExpr.eval(scope), this.optional);\n\t}\n\n\tuse() {\n\t\tthis.#typeExpr.use();\n\t}\n}\n\n/**\n * (ArgType1, ...) -> RetType expression\n * @package\n */\nclass FuncTypeExpr extends TypeExpr {\n\t#argTypeExprs;\n\t#retTypeExprs;\n\n\t/**\n\t * @param {Site} site \n\t * @param {FuncArgTypeExpr[]} argTypeExprs \n\t * @param {TypeExpr[]} retTypeExprs \n\t */\n\tconstructor(site, argTypeExprs, retTypeExprs) {\n\t\tsuper(site);\n\t\tthis.#argTypeExprs = argTypeExprs;\n\t\tthis.#retTypeExprs = retTypeExprs;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tif (this.#retTypeExprs.length === 1) {\n\t\t\treturn `(${this.#argTypeExprs.map(a => a.toString()).join(\", \")}) -> ${this.#retTypeExprs.toString()}`;\n\t\t} else {\n\t\t\treturn `(${this.#argTypeExprs.map(a => a.toString()).join(\", \")}) -> (${this.#retTypeExprs.map(e => e.toString()).join(\", \")})`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalInternal(scope) {\n\t\tlet argTypes = this.#argTypeExprs.map(a => a.eval(scope));\n\n\t\tlet retTypes = this.#retTypeExprs.map(e => e.eval(scope));\n\n\t\treturn new FuncType(argTypes, retTypes);\n\t}\n\n\tuse() {\n\t\tthis.#argTypeExprs.forEach(arg => arg.use());\n\t\tthis.#retTypeExprs.forEach(e => e.use());\n\t}\n}\n\n/**\n * Base class of expression that evaluate to Values.\n * @package\n */\nclass ValueExpr extends Expr {\n\t/** @type {?Instance} */\n\t#cache;\n\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tsuper(site);\n\n\t\tthis.#cache = null;\n\t}\n\n\t/**\n\t * @type {Instance}\n\t */\n\tget value() {\n\t\tif (this.#cache === null) {\n\t\t\tthrow new Error(\"type not yet evaluated\");\n\t\t} else {\n\t\t\treturn this.#cache;\n\t\t}\n\t}\n\n\tget type() {\n\t\treturn this.value.getType(this.site);\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\teval(scope) {\n\t\tif (this.#cache === null) {\n\t\t\tthis.#cache = this.evalInternal(scope);\n\t\t}\n\n\t\treturn this.#cache;\n\t}\n\n\t/**\n\t * Returns Intermediate Representation of a value expression.\n\t * The IR should be indented to make debugging easier.\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tthrow new Error(\"not implemented\");\n\t}\n}\n\n/**\n * '... = ... ; ...' expression\n * @package\n */\nclass AssignExpr extends ValueExpr {\n\t#nameTypes;\n\t#upstreamExpr;\n\t#downstreamExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {DestructExpr[]} nameTypes \n\t * @param {ValueExpr} upstreamExpr \n\t * @param {ValueExpr} downstreamExpr \n\t */\n\tconstructor(site, nameTypes, upstreamExpr, downstreamExpr) {\n\t\tsuper(site);\n\t\tassert(nameTypes.length > 0);\n\t\tthis.#nameTypes = nameTypes;\n\t\tthis.#upstreamExpr = assertDefined(upstreamExpr);\n\t\tthis.#downstreamExpr = assertDefined(downstreamExpr);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tlet downstreamStr = this.#downstreamExpr.toString();\n\t\tassert(downstreamStr != undefined);\n\n\t\tif (this.#nameTypes.length === 1) {\n\t\t\treturn `${this.#nameTypes.toString()} = ${this.#upstreamExpr.toString()}; ${downstreamStr}`;\n\t\t} else {\n\t\t\treturn `(${this.#nameTypes.map(nt => nt.toString()).join(\", \")}) = ${this.#upstreamExpr.toString()}; ${downstreamStr}`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet subScope = new Scope(scope);\n\n\t\tlet upstreamVal = this.#upstreamExpr.eval(scope);\n\n\t\tif (this.#nameTypes.length > 1) {\n\t\t\tif (!(upstreamVal instanceof MultiInstance)) {\n\t\t\t\tthrow this.typeError(\"rhs ins't a multi-value\");\n\t\t\t} else {\n\t\t\t\tlet vals = upstreamVal.values;\n\n\t\t\t\tif (this.#nameTypes.length != vals.length) {\n\t\t\t\t\tthrow this.typeError(`expected ${this.#nameTypes.length} rhs in multi-assign, got ${vals.length}`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.#nameTypes.forEach((nt, i) => nt.evalInAssignExpr(subScope, vals[i].getType(nt.site), i));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!upstreamVal.isValue()) {\n\t\t\t\tthrow this.typeError(\"rhs isn't a value\");\n\t\t\t}\n\n\t\t\tif (this.#nameTypes[0].hasType()) {\n\t\t\t\tthis.#nameTypes[0].evalInAssignExpr(subScope, upstreamVal.getType(this.#nameTypes[0].site), 0);\n\t\t\t} else if (this.#upstreamExpr.isLiteral()) {\n\t\t\t\t// enum variant type resulting from a constructor-like associated function must be cast back into its enum type\n\t\t\t\tif ((this.#upstreamExpr instanceof CallExpr &&\n\t\t\t\t\tthis.#upstreamExpr.fnExpr instanceof ValuePathExpr) || \n\t\t\t\t\t(this.#upstreamExpr instanceof ValuePathExpr && \n\t\t\t\t\t!this.#upstreamExpr.isZeroFieldConstructor())) \n\t\t\t\t{\n\t\t\t\t\tlet upstreamType = upstreamVal.getType(this.#upstreamExpr.site);\n\n\t\t\t\t\tif (upstreamType.isEnumMember()) {\n\t\t\t\t\t\tupstreamVal = Instance.new(upstreamType.parentType(Site.dummy()));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsubScope.set(this.#nameTypes[0].name, upstreamVal);\n\t\t\t} else {\n\t\t\t\tthrow this.typeError(\"unable to infer type of assignment rhs\");\n\t\t\t}\n\t\t}\n\n\t\tconst downstreamVal = this.#downstreamExpr.eval(subScope);\n\n\t\tsubScope.assertAllUsed();\n\n\t\treturn downstreamVal;\n\t}\n\n\tuse() {\n\t\tthis.#nameTypes.forEach(nt => nt.use());\n\t\tthis.#upstreamExpr.use();\n\t\tthis.#downstreamExpr.use();\n\t}\n\n\t/**\n\t * \n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\t\n\t\tif (this.#nameTypes.length === 1) {\n\t\t\tlet inner = this.#downstreamExpr.toIR(indent + TAB);\n\n\t\t\tinner = this.#nameTypes[0].wrapDestructIR(indent, inner, 0);\n\n\t\t\tlet upstream = this.#upstreamExpr.toIR(indent);\n\n\t\t\t// enum member run-time error IR\n\t\t\tif (this.#nameTypes[0].hasType()) {\n\t\t\t\tconst t = this.#nameTypes[0].type;\n\n\t\t\t\tif (t.isEnumMember()) {\n\t\t\t\t\tupstream = new IR([\n\t\t\t\t\t\tnew IR(\"__helios__common__assert_constr_index(\"),\n\t\t\t\t\t\tupstream,\n\t\t\t\t\t\tnew IR(`, ${t.getConstrIndex(this.#nameTypes[0].site)})`)\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new IR([\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\tthis.#nameTypes[0].toNameIR(0),\n\t\t\t\tnew IR(\") \"),\n\t\t\t\tnew IR(\"->\", this.site), new IR(` {\\n${indent}${TAB}`),\n\t\t\t\tinner,\n\t\t\t\tnew IR(`\\n${indent}}(`),\n\t\t\t\tupstream,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t} else {\n\t\t\tlet inner = this.#downstreamExpr.toIR(indent + TAB + TAB);\n\n\t\t\tfor (let i = this.#nameTypes.length - 1; i >= 0; i--) {\n\t\t\t\t// internally generates enum-member error IR\n\t\t\t\tinner = this.#nameTypes[i].wrapDestructIR(indent, inner, i);\n\t\t\t}\n\n\t\t\tconst ir = new IR([\n\t\t\t\tthis.#upstreamExpr.toIR(indent),\n\t\t\t\tnew IR(`(\\n${indent + TAB}(`), new IR(this.#nameTypes.map((nt, i) => nt.toNameIR(i))).join(\", \"), new IR(\") ->\", this.site), new IR(` {\\n${indent}${TAB}${TAB}`),\n\t\t\t\tinner,\n\t\t\t\tnew IR(`\\n${indent + TAB}}\\n${indent})`)\n\t\t\t]);\n\n\t\t\treturn ir;\n\t\t}\n\t}\n}\n\n/**\n * print(...); ... expression\n * @package\n */\nclass PrintExpr extends ValueExpr {\n\t#msgExpr;\n\t#downstreamExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {ValueExpr} msgExpr \n\t * @param {ValueExpr} downstreamExpr \n\t */\n\tconstructor(site, msgExpr, downstreamExpr) {\n\t\tsuper(site);\n\t\tthis.#msgExpr = msgExpr;\n\t\tthis.#downstreamExpr = downstreamExpr;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tlet downstreamStr = this.#downstreamExpr.toString();\n\t\tassert(downstreamStr != undefined);\n\t\treturn `print(${this.#msgExpr.toString()}); ${downstreamStr}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet msgVal = this.#msgExpr.eval(scope);\n\n\t\tassert(msgVal.isValue());\n\n\t\tif (!msgVal.isInstanceOf(this.#msgExpr.site, StringType)) {\n\t\t\tthrow this.#msgExpr.typeError(\"expected string arg for print\");\n\t\t}\n\n\t\tlet downstreamVal = this.#downstreamExpr.eval(scope);\n\n\t\treturn downstreamVal;\n\t}\n\n\tuse() {\n\t\tthis.#msgExpr.use();\n\t\tthis.#downstreamExpr.use();\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\treturn new IR([\n\t\t\tnew IR(\"__core__trace\", this.site), new IR(\"(\"), new IR(\"__helios__common__unStringData(\"),\n\t\t\tthis.#msgExpr.toIR(indent),\n\t\t\tnew IR(`), () -> {\\n${indent}${TAB}`),\n\t\t\tthis.#downstreamExpr.toIR(indent + TAB),\n\t\t\tnew IR(`\\n${indent}})()`)\n\t\t]);\n\t}\n}\n\n/**\n * Helios equivalent of unit\n * @package\n */\nclass VoidExpr extends ValueExpr {\n\t/**\n\t * @param {Site} site\n\t */\n\tconstructor(site) {\n\t\tsuper(site);\n\t}\n\n\ttoString() {\n\t\treturn \"()\";\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\treturn new VoidInstance();\n\t}\n\n\tuse() {\n\t}\n\n\ttoIR() {\n\t\treturn new IR(\"()\", this.site);\n\t}\n}\n\n/**\n * expr(...); ...\n * @package\n */\nclass ChainExpr extends ValueExpr {\n\t#upstreamExpr;\n\t#downstreamExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {ValueExpr} upstreamExpr \n\t * @param {ValueExpr} downstreamExpr \n\t */\n\tconstructor(site, upstreamExpr, downstreamExpr) {\n\t\tsuper(site);\n\t\tthis.#upstreamExpr = upstreamExpr;\n\t\tthis.#downstreamExpr = downstreamExpr;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#upstreamExpr.toString()}; ${this.#downstreamExpr.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope\n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet upstreamVal = this.#upstreamExpr.eval(scope);\n\n\t\tif (upstreamVal instanceof ErrorInstance) {\n\t\t\tthrow this.#downstreamExpr.typeError(\"unreachable code (upstream always throws error)\");\n\t\t} else if (!(upstreamVal instanceof VoidInstance)) {\n\t\t\tthrow this.#upstreamExpr.typeError(\"unexpected return value (hint: use '='\");\n\t\t}\n\n\t\treturn this.#downstreamExpr.eval(scope);\n\t}\n\n\tuse() {\n\t\tthis.#upstreamExpr.use();\n\t\tthis.#downstreamExpr.use();\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\treturn new IR([\n\t\t\tnew IR(\"__core__chooseUnit(\", this.site),\n\t\t\tthis.#upstreamExpr.toIR(indent),\n\t\t\tnew IR(\", \"),\n\t\t\tthis.#downstreamExpr.toIR(indent),\n\t\t\tnew IR(\")\")\n\t\t]);\n\t}\n}\n\n/**\n * Literal expression class (wraps literal tokens)\n * @package\n */\nclass PrimitiveLiteralExpr extends ValueExpr {\n\t#primitive;\n\n\t/**\n\t * @param {PrimitiveLiteral} primitive \n\t */\n\tconstructor(primitive) {\n\t\tsuper(primitive.site);\n\t\tthis.#primitive = primitive;\n\t}\n\n\tisLiteral() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#primitive.toString();\n\t}\n\n\t/**\n\t * @type {Type}\n\t */\n\tget type() {\n\t\tif (this.#primitive instanceof IntLiteral) {\n\t\t\treturn new IntType();\n\t\t} else if (this.#primitive instanceof BoolLiteral) {\n\t\t\treturn new BoolType();\n\t\t} else if (this.#primitive instanceof StringLiteral) {\n\t\t\treturn new StringType();\n\t\t} else if (this.#primitive instanceof ByteArrayLiteral) {\n\t\t\treturn new ByteArrayType(this.#primitive.bytes.length == 32 ? 32 : null);\n\t\t} else {\n\t\t\tthrow new Error(\"unhandled primitive type\");\n\t\t}\t\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\treturn new DataInstance(this.type);\n\t}\n\n\tuse() {\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\t// all literals can be reused in their string-form in the IR\n\t\tlet inner = new IR(this.#primitive.toString(), this.#primitive.site);\n\n\t\tif (this.#primitive instanceof IntLiteral) {\n\t\t\treturn new IR([new IR(\"__core__iData\", this.site), new IR(\"(\"), inner, new IR(\")\")]);\n\t\t} else if (this.#primitive instanceof BoolLiteral) {\n\t\t\treturn inner;\n\t\t} else if (this.#primitive instanceof StringLiteral) {\n\t\t\treturn new IR([new IR(\"__helios__common__stringData\", this.site), new IR(\"(\"), inner, new IR(\")\")]);\n\t\t} else if (this.#primitive instanceof ByteArrayLiteral) {\n\t\t\treturn new IR([new IR(\"__core__bData\", this.site), new IR(\"(\"), inner, new IR(\")\")]);\n\t\t} else {\n\t\t\tthrow new Error(\"unhandled primitive type\");\n\t\t}\n\t}\n}\n\n/**\n * Literal UplcData which is the result of parameter substitutions.\n * @package\n */\nclass LiteralDataExpr extends ValueExpr {\n\t#type;\n\t#data;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Type} type\n\t * @param {UplcData} data\n\t */\n\tconstructor(site, type, data) {\n\t\tsuper(site);\n\t\tthis.#type = type;\n\t\tthis.#data = data;\n\t}\n\n\t/**\n\t * @package\n\t * @type {Type}\n\t */\n\tget type() {\n\t\treturn this.#type;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisLiteral() {\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\treturn `##${bytesToHex(this.#data.toCbor())}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\treturn Instance.new(this.#type);\n\t}\n\n\tuse() {\n\t}\n\n\ttoIR(indent = \"\") {\n\t\treturn new IR(this.toString(), this.site);\n\t}\n}\n\n/**\n * Struct field (part of a literal struct constructor)\n * @package\n */\nclass StructLiteralField {\n\t#name;\n\t#value;\n\n\t/**\n\t * @param {?Word} name \n\t * @param {ValueExpr} value \n\t */\n\tconstructor(name, value) {\n\t\tthis.#name = name;\n\t\tthis.#value = value;\n\t}\n\n\tget site() {\n\t\tif (this.#name === null) {\n\t\t\treturn this.#value.site;\n\t\t} else {\n\t\t\treturn this.#name.site;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisNamed() {\n\t\treturn this.#name !== null;\n\t}\n\n\tget name() {\n\t\tif (this.#name === null) {\n\t\t\tthrow new Error(\"name of field not given\");\n\t\t} else {\n\t\t\treturn this.#name;\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.#name === null) {\n\t\t\treturn this.#value.toString();\n\t\t} else {\n\t\t\treturn `${this.#name.toString()}: ${this.#value.toString()}`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\teval(scope) {\n\t\treturn this.#value.eval(scope);\n\t}\n\n\tuse() {\n\t\tthis.#value.use();\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\treturn this.#value.toIR(indent);\n\t}\n}\n\n/**\n * Struct literal constructor\n * @package\n */\nclass StructLiteralExpr extends ValueExpr {\n\t#typeExpr;\n\t#fields;\n\t/** @type {?number} - set during evaluation */\n\t#constrIndex;\n\n\t/**\n\t * @param {TypeExpr} typeExpr \n\t * @param {StructLiteralField[]} fields \n\t */\n\tconstructor(typeExpr, fields) {\n\t\tsuper(typeExpr.site);\n\t\tthis.#typeExpr = typeExpr;\n\t\tthis.#fields = fields;\n\t\tthis.#constrIndex = null;\n\t}\n\n\tisLiteral() {\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#typeExpr.toString()}{${this.#fields.map(f => f.toString()).join(\", \")}}`;\n\t}\n\n\tisNamed() {\n\t\t// the expression builder already checked that all fields are named or all or positional (i.e. not mixed)\n\t\treturn this.#fields.length > 0 && this.#fields[0].isNamed();\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns \n\t */\n\tevalInternal(scope) {\n\t\tlet type = this.#typeExpr.eval(scope);\n\n\t\tassert(type.isType());\n\n\t\tthis.#constrIndex = type.getConstrIndex(this.site);\n\n\t\tlet instance = Instance.new(type);\n\n\t\tif (instance.nFields(this.site) != this.#fields.length) {\n\t\t\tthrow this.typeError(`wrong number of fields for ${type.toString()}, expected ${instance.nFields(this.site)}, got ${this.#fields.length}`);\n\t\t}\n\n\t\tfor (let i = 0; i < this.#fields.length; i++) {\n\t\t\tlet f = this.#fields[i];\n\t\t\n\t\t\tlet fieldVal = f.eval(scope);\n\n\t\t\tif (f.isNamed()) {\n\t\t\t\t// check the named type\n\t\t\t\tlet memberType = instance.getInstanceMember(f.name).getType(f.name.site);\n\n\t\t\t\tif (!fieldVal.isInstanceOf(f.site, memberType)) {\n\t\t\t\t\tthrow f.site.typeError(`wrong field type for '${f.name.toString()}', expected ${memberType.toString()}, got ${fieldVal.getType(Site.dummy()).toString()}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// check the positional type\n\t\t\t\tlet memberType = instance.getFieldType(f.site, i);\n\t\t\t\t\n\t\t\t\tif (!fieldVal.isInstanceOf(f.site, memberType)) {\n\t\t\t\t\tthrow f.site.typeError(`wrong field type for field ${i.toString()}, expected ${memberType.toString()}, got ${fieldVal.getType(Site.dummy()).toString()}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\tuse() {\n\t\tthis.#typeExpr.use();\n\n\t\tfor (let f of this.#fields) {\n\t\t\tf.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {Type} type\n\t * @param {IR[]} fields\n\t * @param {number | null} constrIndex\n\t */\n\tstatic toIRInternal(site, type, fields, constrIndex) {\n\t\tlet ir = new IR(\"__core__mkNilData(())\");\n\n\t\tconst instance = Instance.new(type);\n\n\t\tfor (let i = fields.length - 1; i >= 0; i--) {\n\t\t\tlet f = fields[i];\n\n\t\t\tconst isBool = instance.getFieldType(site, i) instanceof BoolType;\n\n\t\t\tif (isBool) {\n\t\t\t\tf = new IR([\n\t\t\t\t\tnew IR(\"__helios__common__boolData(\"),\n\t\t\t\t\tf,\n\t\t\t\t\tnew IR(\")\"),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// in case of a struct with only one field, return that field directly \n\t\t\tif (fields.length == 1 && type instanceof StructStatementType) {\n\t\t\t\treturn f;\n\t\t\t}\n\n\t\t\tir = new IR([\n\t\t\t\tnew IR(\"__core__mkCons(\"),\n\t\t\t\tf,\n\t\t\t\tnew IR(\", \"),\n\t\t\t\tir,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\n\t\tif (constrIndex === null) {\n\t\t\tthrow new Error(\"constrIndex not yet set\");\n\t\t} else if (constrIndex == -1) {\n\t\t\t// regular struct\n\t\t\treturn new IR([\n\t\t\t\tnew IR(\"__core__listData\", site),\n\t\t\t\tnew IR(\"(\"), \n\t\t\t\tir,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t} else {\n\t\t\treturn new IR([\n\t\t\t\tnew IR(\"__core__constrData\", site), new IR(`(${constrIndex.toString()}, `),\n\t\t\t\tir,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tconst type = this.#typeExpr.type;\n\n\t\tconst fields = this.#fields.slice();\n\n\t\t// sort fields by correct name\n\t\tif (this.isNamed()) {\n\t\t\tfields.sort((a, b) => type.getFieldIndex(this.site, a.name.value) - type.getFieldIndex(this.site, b.name.value));\n\t\t}\n\n\t\tconst irFields = fields.map(f => f.toIR(indent));\n\n\t\treturn StructLiteralExpr.toIRInternal(this.site, type, irFields, this.#constrIndex);\n\t}\n}\n\n/**\n * []{...} expression\n * @package\n */\nclass ListLiteralExpr extends ValueExpr {\n\t#itemTypeExpr;\n\t#itemExprs;\n\n\t/**\n\t * @param {Site} site \n\t * @param {TypeExpr} itemTypeExpr \n\t * @param {ValueExpr[]} itemExprs \n\t */\n\tconstructor(site, itemTypeExpr, itemExprs) {\n\t\tsuper(site);\n\t\tthis.#itemTypeExpr = itemTypeExpr;\n\t\tthis.#itemExprs = itemExprs;\n\t}\n\n\tisLiteral() {\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\treturn `[]${this.#itemTypeExpr.toString()}{${this.#itemExprs.map(itemExpr => itemExpr.toString()).join(', ')}}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope\n\t */\n\tevalInternal(scope) {\n\t\tlet itemType = this.#itemTypeExpr.eval(scope);\n\n\t\tif (itemType instanceof FuncType) {\n\t\t\tthrow this.#itemTypeExpr.typeError(\"content of list can't be func\");\n\t\t}\n\n\t\tfor (let itemExpr of this.#itemExprs) {\n\t\t\tlet itemVal = itemExpr.eval(scope);\n\n\t\t\tif (!itemVal.isInstanceOf(itemExpr.site, itemType)) {\n\t\t\t\tthrow itemExpr.typeError(`expected ${itemType.toString()}, got ${itemVal.toString()}`);\n\t\t\t}\n\t\t}\n\n\t\treturn Instance.new(new ListType(itemType));\n\t}\n\n\tuse() {\n\t\tthis.#itemTypeExpr.use();\n\n\t\tfor (let item of this.#itemExprs) {\n\t\t\titem.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet isBool = this.#itemTypeExpr.type instanceof BoolType;\n\n\t\t// unsure if list literals in untyped Plutus-core accept arbitrary terms, so we will use the more verbose constructor functions \n\t\tlet res = new IR(\"__core__mkNilData(())\");\n\n\t\t// starting from last element, keeping prepending a data version of that item\n\n\t\tfor (let i = this.#itemExprs.length - 1; i >= 0; i--) {\n\t\t\tlet itemIR = this.#itemExprs[i].toIR(indent);\n\n\t\t\tif (isBool) {\n\t\t\t\titemIR = new IR([\n\t\t\t\t\tnew IR(\"__helios__common__boolData(\"),\n\t\t\t\t\titemIR,\n\t\t\t\t\tnew IR(\")\"),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tres = new IR([\n\t\t\t\tnew IR(\"__core__mkCons(\"),\n\t\t\t\titemIR,\n\t\t\t\tnew IR(\", \"),\n\t\t\t\tres,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\n\t\treturn new IR([new IR(\"__core__listData\", this.site), new IR(\"(\"), res, new IR(\")\")]);\n\t}\n}\n\n/**\n * Map[...]...{... : ...} expression\n * @package\n */\nclass MapLiteralExpr extends ValueExpr {\n\t#keyTypeExpr;\n\t#valueTypeExpr;\n\t#pairExprs;\n\n\t/**\n\t * @param {Site} site \n\t * @param {TypeExpr} keyTypeExpr \n\t * @param {TypeExpr} valueTypeExpr\n\t * @param {[ValueExpr, ValueExpr][]} pairExprs \n\t */\n\tconstructor(site, keyTypeExpr, valueTypeExpr, pairExprs) {\n\t\tsuper(site);\n\t\tthis.#keyTypeExpr = keyTypeExpr;\n\t\tthis.#valueTypeExpr = valueTypeExpr;\n\t\tthis.#pairExprs = pairExprs;\n\t}\n\n\tisLiteral() {\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\treturn `Map[${this.#keyTypeExpr.toString()}]${this.#valueTypeExpr.toString()}{${this.#pairExprs.map(([keyExpr, valueExpr]) => `${keyExpr.toString()}: ${valueExpr.toString()}`).join(', ')}}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope\n\t */\n\tevalInternal(scope) {\n\t\tlet keyType = this.#keyTypeExpr.eval(scope);\n\t\tlet valueType = this.#valueTypeExpr.eval(scope);\n\n\t\tif (keyType instanceof FuncType) {\n\t\t\tthrow this.#keyTypeExpr.typeError(\"key-type of Map can't be func\");\n\t\t} else if (valueType instanceof FuncType) {\n\t\t\tthrow this.#valueTypeExpr.typeError(\"value-type of Map can't be func\");\n\t\t}\n\n\t\tfor (let [keyExpr, valueExpr] of this.#pairExprs) {\n\t\t\tlet keyVal = keyExpr.eval(scope);\n\t\t\tlet valueVal = valueExpr.eval(scope);\n\n\t\t\tif (!keyVal.isInstanceOf(keyExpr.site, keyType)) {\n\t\t\t\tthrow keyExpr.typeError(`expected ${keyType.toString()} for map key, got ${keyVal.toString()}`);\n\t\t\t} else if (!valueVal.isInstanceOf(valueExpr.site, valueType)) {\n\t\t\t\tthrow valueExpr.typeError(`expected ${valueType.toString()} for map value, got ${valueVal.toString()}`);\n\t\t\t}\n\t\t}\n\n\t\treturn Instance.new(new MapType(keyType, valueType));\n\t}\n\n\tuse() {\n\t\tthis.#keyTypeExpr.use();\n\t\tthis.#valueTypeExpr.use();\n\n\t\tfor (let [fst, snd] of this.#pairExprs) {\n\t\t\tfst.use();\n\t\t\tsnd.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet isBoolValue = this.#valueTypeExpr.type instanceof BoolType;\n\n\t\t// unsure if list literals in untyped Plutus-core accept arbitrary terms, so we will use the more verbose constructor functions \n\t\tlet res = new IR(\"__core__mkNilPairData(())\");\n\n\t\t// starting from last element, keeping prepending a data version of that item\n\n\t\tfor (let i = this.#pairExprs.length - 1; i >= 0; i--) {\n\t\t\tlet [keyExpr, valueExpr] = this.#pairExprs[i];\n\n\t\t\tlet valueIR = valueExpr.toIR(indent);\n\n\t\t\tif (isBoolValue) {\n\t\t\t\tvalueIR = new IR([\n\t\t\t\t\tnew IR(\"__helios__common__boolData(\"),\n\t\t\t\t\tvalueIR,\n\t\t\t\t\tnew IR(\")\"),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tres = new IR([\n\t\t\t\tnew IR(\"__core__mkCons(\"),\n\t\t\t\tnew IR(\"__core__mkPairData(\"),\n\t\t\t\tkeyExpr.toIR(indent),\n\t\t\t\tnew IR(\",\"),\n\t\t\t\tvalueIR,\n\t\t\t\tnew IR(\")\"),\n\t\t\t\tnew IR(\", \"),\n\t\t\t\tres,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\n\t\treturn new IR([new IR(\"__core__mapData\", this.site), new IR(\"(\"), res, new IR(\")\")]);\n\t}\n}\n\n/**\n * NameTypePair is base class of FuncArg and DataField (differs from StructLiteralField) \n * @package\n */\nclass NameTypePair {\n\t#name;\n\t#typeExpr;\n\n\t/**\n\t * @param {Word} name \n\t * @param {?TypeExpr} typeExpr \n\t */\n\tconstructor(name, typeExpr) {\n\t\tthis.#name = name;\n\t\tthis.#typeExpr = typeExpr;\n\t}\n\n\t/**\n\t * @type {Site}\n\t */\n\tget site() {\n\t\treturn this.#name.site;\n\t}\n\n\t/**\n\t * @type {Word}\n\t */\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\tisIgnored() {\n\t\treturn this.name.value === \"_\";\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\thasType() {\n\t\treturn this.#typeExpr !== null;\n\t}\n\n\t/**\n\t * Throws an error if called before evalType()\n\t * @type {Type}\n\t */\n\tget type() {\n\t\tif (this.isIgnored()) {\n\t\t\treturn new AnyType();\n\t\t} else if (this.#typeExpr === null) {\n\t\t\tthrow new Error(\"typeExpr not set\");\n\t\t} else {\n\t\t\treturn this.#typeExpr.type;\n\t\t}\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget typeName() {\n\t\tif (this.#typeExpr === null) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn this.#typeExpr.toString();\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.#typeExpr === null) {\n\t\t\treturn this.name.toString();\n\t\t} else {\n\t\t\treturn `${this.name.toString()}: ${this.#typeExpr.toString()}`;\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates the type, used by FuncLiteralExpr and DataDefinition\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalType(scope) {\n\t\tif (this.isIgnored()) {\n\t\t\treturn new AnyType();\n\t\t} else if (this.#typeExpr === null) {\n\t\t\tthrow new Error(\"typeExpr not set\");\n\t\t} else {\n\t\t\treturn this.#typeExpr.eval(scope);\n\t\t}\n\t}\n\n\tuse() {\n\t\tif (this.#typeExpr !== null) {\n\t\t\tthis.#typeExpr.use();\n\t\t}\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\treturn new IR(this.#name.toString(), this.#name.site);\n\t}\n}\n\n/**\n * Function argument class\n * @package\n */\nclass FuncArg extends NameTypePair {\n\t#defaultValueExpr;\n\n\t/**\n\t * @param {Word} name \n\t * @param {?TypeExpr} typeExpr\n\t * @param {null | ValueExpr} defaultValueExpr\n\t */\n\tconstructor(name, typeExpr, defaultValueExpr = null) {\n\t\tsuper(name, typeExpr);\n\n\t\tthis.#defaultValueExpr = defaultValueExpr;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t */\n\tevalDefault(scope) {\n\t\tif (this.#defaultValueExpr != null) {\n\t\t\tconst v = this.#defaultValueExpr.eval(scope);\n\n\t\t\tconst t = this.evalType(scope);\n\n\t\t\tif (!v.isInstanceOf(this.#defaultValueExpr.site, t)) {\n\t\t\t\tthrow this.#defaultValueExpr.site.typeError(`expected ${t.toString()}, got ${v.getType(Site.dummy()).toString()}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {ArgType}\n\t */\n\tevalArgType(scope) {\n\t\tconst t = super.evalType(scope);\n\n\t\treturn new ArgType(this.name, t, this.#defaultValueExpr != null);\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\tconst name = super.toIR();\n\n\t\tif (this.#defaultValueExpr == null) {\n\t\t\treturn name;\n\t\t} else {\n\t\t\treturn new IR([\n\t\t\t\tnew IR(`__useopt__${this.name.toString()}`),\n\t\t\t\tnew IR(\", \"),\n\t\t\t\tname\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {IR} bodyIR \n\t * @param {string} name \n\t * @param {IR} defaultIR \n\t * @returns {IR}\n\t */\n\tstatic wrapWithDefaultInternal(bodyIR, name, defaultIR) {\n\t\treturn new IR([\n\t\t\tnew IR(`(${name}) -> {`),\n\t\t\tbodyIR,\n\t\t\tnew IR([\n\t\t\t\tnew IR(`}(__core__ifThenElse(__useopt__${name}, () -> {${name}}, () -> {`),\n\t\t\t\tdefaultIR, \n\t\t\t\tnew IR(\"})())\")\n\t\t\t])\n\t\t]);\n\t}\n\n\t/**\n\t * (argName) -> {\n\t *   <bodyIR>\n\t * }(\n\t *   ifThenElse(\n\t * \t\t__useoptarg__argName,\n\t *  \t() -> {\n\t *        argName\n\t *      },\n\t *      () -> {\n\t *        <defaultValueExpr>\n\t *      }\n\t *   )()\n\t * )\n\t * TODO: indentation\n\t * @param {IR} bodyIR \n\t * @returns {IR}\n\t */\n\twrapWithDefault(bodyIR) {\n\t\tif (this.#defaultValueExpr == null) {\n\t\t\treturn bodyIR;\n\t\t} else {\n\t\t\tconst name = this.name.toString();\n\n\t\t\treturn FuncArg.wrapWithDefaultInternal(bodyIR, name, this.#defaultValueExpr.toIR(\"\"));\n\t\t}\n\t}\n}\n\n/**\n * (..) -> RetTypeExpr {...} expression\n * @package\n */\nclass FuncLiteralExpr extends ValueExpr {\n\t#args;\n\t#retTypeExprs;\n\t#bodyExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {FuncArg[]} args \n\t * @param {(?TypeExpr)[]} retTypeExprs \n\t * @param {ValueExpr} bodyExpr \n\t */\n\tconstructor(site, args, retTypeExprs, bodyExpr) {\n\t\tsuper(site);\n\t\tthis.#args = args;\n\t\tthis.#retTypeExprs = retTypeExprs;\n\t\tthis.#bodyExpr = bodyExpr;\n\t}\n\n\t/**\n\t * @type {Type[]}\n\t */\n\tget argTypes() {\n\t\treturn this.#args.map(a => a.type);\n\t}\n\n\t/**\n\t * @type {string[]}\n\t */\n\tget argTypeNames() {\n\t\treturn this.#args.map(a => a.typeName)\n\t}\n\n\t/**\n\t * @type {Type[]}\n\t */\n\tget retTypes() {\n\t\treturn this.#retTypeExprs.map(e => {\n\t\t\tif (e == null) {\n\t\t\t\treturn new AnyType();\n\t\t\t} else {\n\t\t\t\treturn e.type\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisLiteral() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tif (this.#retTypeExprs.length === 1) {\n\t\t\tlet retTypeExpr = this.#retTypeExprs[0];\n\t\t\tif (retTypeExpr == null) {\n\t\t\t\treturn `(${this.#args.map(a => a.toString()).join(\", \")}) -> {${this.#bodyExpr.toString()}}`;\n\t\t\t} else {\n\t\t\t\treturn `(${this.#args.map(a => a.toString()).join(\", \")}) -> ${retTypeExpr.toString()} {${this.#bodyExpr.toString()}}`;\n\t\t\t}\n\t\t} else {\n\t\t\treturn `(${this.#args.map(a => a.toString()).join(\", \")}) -> (${this.#retTypeExprs.map(e => assertDefined(e).toString()).join(\", \")}) {${this.#bodyExpr.toString()}}`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns \n\t */\n\tevalType(scope) {\n\t\tlet args = this.#args;\n\t\tif (this.isMethod()) {\n\t\t\targs = args.slice(1);\n\t\t}\n\n\t\tlet argTypes = args.map(a => a.evalArgType(scope));\n\n\t\tlet retTypes = this.#retTypeExprs.map(e => {\n\t\t\tif (e == null) {\n\t\t\t\treturn new AnyType();\n\t\t\t} else {\n\t\t\t\treturn e.eval(scope)\n\t\t\t}\n\t\t});\n\n\t\treturn new FuncType(argTypes, retTypes);\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {FuncInstance}\n\t */\n\tevalInternal(scope) {\n\t\tlet fnType = this.evalType(scope);\n\t\t\n\t\t// argTypes is calculated separately again here so it includes self\n\t\tlet argTypes = this.#args.map(a => a.evalType(scope));\n\n\t\tlet res = new FuncInstance(fnType);\n\n\t\tlet subScope = new Scope(scope);\n\t\targTypes.forEach((a, i) => {\n\t\t\tif (!this.#args[i].isIgnored()) {\n\t\t\t\tthis.#args[i].evalDefault(subScope);\n\n\t\t\t\tsubScope.set(this.#args[i].name, Instance.new(a));\n\t\t\t}\n\t\t});\n\n\t\tlet bodyVal = this.#bodyExpr.eval(subScope);\n\n\t\tif (this.#retTypeExprs.length === 1) {\n\t\t\tif (this.#retTypeExprs[0] == null) {\n\t\t\t\tif (bodyVal instanceof MultiInstance) {\n\t\t\t\t\treturn new FuncInstance(new FuncType(fnType.argTypes, bodyVal.values.map(v => v.getType(this.site))));\n\t\t\t\t} else {\n\t\t\t\t\treturn new FuncInstance(new FuncType(fnType.argTypes, bodyVal.getType(this.site)));\n\t\t\t\t}\n\t\t\t} else if (bodyVal instanceof MultiInstance) {\n\t\t\t\tthrow this.#retTypeExprs[0].typeError(\"unexpected multi-value body\");\n\t\t\t} else if (!bodyVal.isInstanceOf(this.#retTypeExprs[0].site, fnType.retTypes[0])) {\n\t\t\t\tthrow this.#retTypeExprs[0].typeError(`wrong return type, expected ${fnType.retTypes[0].toString()} but got ${this.#bodyExpr.type.toString()}`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (bodyVal instanceof MultiInstance) {\n\t\t\t\t/** @type {Instance[]} */\n\t\t\t\tlet bodyVals = bodyVal.values;\n\n\t\t\t\tif (bodyVals.length !== this.#retTypeExprs.length) {\n\t\t\t\t\tthrow this.#bodyExpr.typeError(`expected multi-value function body with ${this.#retTypeExprs.length} values, but got ${bodyVals.length} values`);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < bodyVals.length; i++) {\n\t\t\t\t\t\tlet v = bodyVals[i];\n\n\t\t\t\t\t\tlet retTypeExpr = assertDefined(this.#retTypeExprs[i]);\n\t\t\t\t\t\tif (!v.isInstanceOf(retTypeExpr.site, fnType.retTypes[i])) {\n\t\t\t\t\t\t\tthrow retTypeExpr.typeError(`wrong return type for value ${i}, expected ${fnType.retTypes[i].toString()} but got ${v.getType(this.#bodyExpr.site).toString()}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow this.#bodyExpr.typeError(`expected multi-value function body, but got ${this.#bodyExpr.type.toString()}`);\n\t\t\t}\n\t\t}\n\n\t\tsubScope.assertAllUsed();\n\n\t\treturn res;\n\t}\n\n\tisMethod() {\n\t\treturn this.#args.length > 0 && this.#args[0].name.toString() == \"self\";\n\t}\n\n\tuse() {\n\t\tfor (let arg of this.#args) {\n\t\t\targ.use();\n\t\t}\n\n\t\tthis.#retTypeExprs.forEach(e => {\n\t\t\tif (e !== null) {\n\t\t\t\te.use();\n\t\t\t}\n\t\t});\n\t\tthis.#bodyExpr.use();\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\targsToIR() {\n\t\tlet args = this.#args.map(a => a.toIR());\n\t\tif (this.isMethod()) {\n\t\t\targs = args.slice(1);\n\t\t}\n\n\t\treturn (new IR(args)).join(\", \");\n\t}\n\n\t/**\n\t * In reverse order, because later opt args might depend on earlier args\n\t * @param {IR} innerIR \n\t * @returns {IR}\n\t */\n\twrapWithDefaultArgs(innerIR) {\n\t\tconst args = this.#args.slice().reverse();\n\n\t\tfor (let arg of args) {\n\t\t\tinnerIR = arg.wrapWithDefault(innerIR);\n\t\t}\n\n\t\treturn innerIR;\n\t}\n\n\t/**\n\t * @param {?string} recursiveName \n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIRInternal(recursiveName, indent = \"\") {\n\t\tlet argsWithCommas = this.argsToIR();\n\n\t\tlet innerIndent = indent;\n\t\tlet methodIndent = indent;\n\t\tif (this.isMethod()) {\n\t\t\tinnerIndent += TAB;\n\t\t}\n\n\t\tif (recursiveName !== null) {\n\t\t\tinnerIndent += TAB;\n\t\t\tmethodIndent += TAB;\n\t\t}\n\n\t\tlet innerIR = this.#bodyExpr.toIR(innerIndent + TAB);\n\n\t\tinnerIR = this.wrapWithDefaultArgs(innerIR);\n\n\t\tlet ir = new IR([\n\t\t\tnew IR(\"(\"),\n\t\t\targsWithCommas,\n\t\t\tnew IR(\") \"), new IR(\"->\", this.site), new IR(` {\\n${innerIndent}${TAB}`),\n\t\t\tinnerIR,\n\t\t\tnew IR(`\\n${innerIndent}}`),\n\t\t]);\n\n\t\t// wrap with 'self'\n\t\tif (this.isMethod()) {\n\t\t\tir = new IR([\n\t\t\t\tnew IR(`(self) -> {\\n${methodIndent}${TAB}`),\n\t\t\t\tir,\n\t\t\t\tnew IR(`\\n${methodIndent}}`),\n\t\t\t]);\n\t\t}\n\n\t\tif (recursiveName !== null) {\n\t\t\tir = new IR([\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\tnew IR(recursiveName),\n\t\t\t\tnew IR(`) -> {\\n${indent}${TAB}`),\n\t\t\t\tir,\n\t\t\t\tnew IR(`\\n${indent}}`)\n\t\t\t]);\n\t\t}\n\n\t\treturn ir;\n\t}\n\n\t/**\n\t * @param {string} recursiveName \n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIRRecursive(recursiveName, indent = \"\") {\n\t\treturn this.toIRInternal(recursiveName, indent);\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\treturn this.toIRInternal(null, indent);\n\t}\n}\n\n/**\n * Variable expression\n * @package\n */\nclass ValueRefExpr extends ValueExpr {\n\t#name;\n\t#isRecursiveFunc;\n\n\t/**\n\t * @param {Word} name \n\t */\n\tconstructor(name) {\n\t\tsuper(name.site);\n\t\tthis.#name = name;\n\t\tthis.#isRecursiveFunc = false;\n\t}\n\n\ttoString() {\n\t\treturn this.#name.toString();\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet val = scope.get(this.#name);\n\n\t\tif (val instanceof FuncInstance && val.isRecursive(scope)) {\n\t\t\tthis.#isRecursiveFunc = true;\n\t\t}\n\n\t\treturn val.assertValue(this.#name.site);\n\t}\n\n\tuse() {\n\t\tif (this.value instanceof FuncStatementInstance) {\n\t\t\tthis.value.statement.use();\n\t\t} else if (this.value instanceof ConstStatementInstance) {\n\t\t\tthis.value.statement.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet path = this.toString();\n\n\t\tif (this.value instanceof FuncStatementInstance || this.value instanceof ConstStatementInstance) {\n\t\t\tpath = this.value.statement.path;\n\t\t} else if (this.value instanceof BuiltinFuncInstance) {\n\t\t\tpath = this.value.path;\n\t\t}\n\n\t\tlet ir = new IR(path, this.site);\n\n\t\tif (this.#isRecursiveFunc) {\n\t\t\tir = new IR([\n\t\t\t\tir,\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\tir,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\t\t\n\t\treturn ir;\n\t}\n}\n\n/**\n * Word::Word::... expression\n * @package\n */\nclass ValuePathExpr extends ValueExpr {\n\t#baseTypeExpr;\n\t#memberName;\n\t#isRecursiveFunc;\n\n\t/**\n\t * @param {TypeExpr} baseTypeExpr \n\t * @param {Word} memberName \n\t */\n\tconstructor(baseTypeExpr, memberName) {\n\t\tsuper(memberName.site);\n\t\tthis.#baseTypeExpr = baseTypeExpr;\n\t\tthis.#memberName = memberName;\n\t\tthis.#isRecursiveFunc = false;\n\t}\n\n\t/**\n\t * @type {Type}\n\t */\n\tget baseType() {\n\t\treturn this.#baseTypeExpr.type;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#baseTypeExpr.toString()}::${this.#memberName.toString()}`;\n\t}\n\n\tisZeroFieldConstructor() {\n\t\tlet type = this.type;\n\n\t\tif (type instanceof EnumMemberStatementType && type.statement.name.value === this.#memberName.value) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if ValuePathExpr constructs a literal enum member with zero field or\n\t * if this baseType is also a baseType of the returned value\n\t * @returns {boolean}\n\t */\n\tisLiteral() {\n\t\tif (this.isZeroFieldConstructor()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tlet type = this.type;\n\n\t\t\tif (this.baseType.isBaseOf(this.site, type)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet baseType = this.#baseTypeExpr.eval(scope);\n\t\tassert(baseType.isType());\n\n\t\tlet memberVal = baseType.getTypeMember(this.#memberName);\n\n\t\tif (memberVal instanceof FuncInstance && memberVal.isRecursive(scope)) {\n\t\t\tthis.#isRecursiveFunc = true;\n\t\t}\n\n\t\treturn memberVal.assertValue(this.#memberName.site);\n\t}\n\n\tuse() {\n\t\tthis.#baseTypeExpr.use();\n\n\t\tif (this.value instanceof ConstStatementInstance) {\n\t\t\tthis.value.statement.use();\n\t\t} else if (this.value instanceof FuncStatementInstance) {\n\t\t\tthis.value.statement.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\t// if we are directly accessing an enum member as a zero-field constructor we must change the code a bit\n\t\tlet memberVal = this.#baseTypeExpr.type.getTypeMember(this.#memberName);\n\n\t\tif ((memberVal instanceof EnumMemberStatementType) || (memberVal instanceof OptionNoneType)) {\n\t\t\tlet cId = memberVal.getConstrIndex(this.#memberName.site);\n\n\t\t\tassert(cId >= 0);\n\n\t\t\treturn new IR(`__core__constrData(${cId.toString()}, __core__mkNilData(()))`, this.site)\n\t\t} else {\n\t\t\tlet ir = new IR(`${this.#baseTypeExpr.type.path}__${this.#memberName.toString()}`, this.site);\n\n\t\t\tif (this.#isRecursiveFunc) {\n\t\t\t\tir = new IR([\n\t\t\t\t\tir,\n\t\t\t\t\tnew IR(\"(\"),\n\t\t\t\t\tir,\n\t\t\t\t\tnew IR(\")\")\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\treturn ir;\n\t\t}\n\t}\n}\n\n/**\n * Unary operator expression\n * Note: there are no post-unary operators, only pre\n * @package\n */\nclass UnaryExpr extends ValueExpr {\n\t#op;\n\t#a;\n\n\t/**\n\t * @param {SymbolToken} op \n\t * @param {ValueExpr} a \n\t */\n\tconstructor(op, a) {\n\t\tsuper(op.site);\n\t\tthis.#op = op;\n\t\tthis.#a = a;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#op.toString()}${this.#a.toString()}`;\n\t}\n\n\t/**\n\t * Turns an op symbol into an internal name\n\t * @returns {Word}\n\t */\n\ttranslateOp() {\n\t\tlet op = this.#op.toString();\n\t\tlet site = this.#op.site;\n\n\t\tif (op == \"+\") {\n\t\t\treturn new Word(site, \"__pos\");\n\t\t} else if (op == \"-\") {\n\t\t\treturn new Word(site, \"__neg\");\n\t\t} else if (op == \"!\") {\n\t\t\treturn new Word(site, \"__not\");\n\t\t} else {\n\t\t\tthrow new Error(\"unhandled unary op\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet a = this.#a.eval(scope);\n\n\t\tlet fnVal = a.assertValue(this.#a.site).getType(this.site).getTypeMember(this.translateOp());\n\n\t\t// ops are immediately applied\n\t\treturn fnVal.call(this.#op.site, [a]);\n\t}\n\n\tuse() {\n\t\tthis.#a.use();\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet path = this.type.path;\n\n\t\treturn new IR([\n\t\t\tnew IR(`${path}__${this.translateOp().value}`, this.site), new IR(\"(\"),\n\t\t\tthis.#a.toIR(indent),\n\t\t\tnew IR(\")\")\n\t\t]);\n\t}\n}\n\n/**\n * Binary operator expression\n * @package\n */\nclass BinaryExpr extends ValueExpr {\n\t#op;\n\t#a;\n\t#b;\n\t#swap; // swap a and b for commutative ops\n\t#alt; // use alt (each operator can have one overload)\n\n\t/**\n\t * @param {SymbolToken} op \n\t * @param {ValueExpr} a \n\t * @param {ValueExpr} b \n\t */\n\tconstructor(op, a, b) {\n\t\tsuper(op.site);\n\t\tthis.#op = op;\n\t\tthis.#a = a;\n\t\tthis.#b = b;\n\t\tthis.#swap = false;\n\t\tthis.#alt = false;\n\t}\n\n\t/** \n\t * @type {ValueExpr}\n\t */\n\tget first() {\n\t\treturn this.#swap ? this.#b : this.#a;\n\t}\n\n\t/**\n\t * @type {ValueExpr} \n\t */\n\tget second() {\n\t\treturn this.#swap ? this.#a : this.#b;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#a.toString()} ${this.#op.toString()} ${this.#b.toString()}`;\n\t}\n\n\t/**\n\t * Turns op symbol into internal name\n\t * @param {boolean} alt\n\t * @returns {Word}\n\t */\n\ttranslateOp(alt = false) {\n\t\tlet op = this.#op.toString();\n\t\tlet site = this.#op.site;\n\t\tlet name;\n\n\t\tif (op == \"||\") {\n\t\t\tname = \"__or\";\n\t\t} else if (op == \"&&\") {\n\t\t\tname = \"__and\";\n\t\t} else if (op == \"==\") {\n\t\t\tname = \"__eq\";\n\t\t} else if (op == \"!=\") {\n\t\t\tname = \"__neq\";\n\t\t} else if (op == \"<\") {\n\t\t\tname = \"__lt\";\n\t\t} else if (op == \"<=\") {\n\t\t\tname = \"__leq\";\n\t\t} else if (op == \">\") {\n\t\t\tname = \"__gt\";\n\t\t} else if (op == \">=\") {\n\t\t\tname = \"__geq\";\n\t\t} else if (op == \"+\") {\n\t\t\tname = \"__add\";\n\t\t} else if (op == \"-\") {\n\t\t\tname = \"__sub\";\n\t\t} else if (op == \"*\") {\n\t\t\tname = \"__mul\";\n\t\t} else if (op == \"/\") {\n\t\t\tname = \"__div\";\n\t\t} else if (op == \"%\") {\n\t\t\tname = \"__mod\";\n\t\t} else {\n\t\t\tthrow new Error(\"unhandled\");\n\t\t}\n\n\t\tif (alt) {\n\t\t\tname += \"_alt\";\n\t\t}\n\n\t\treturn new Word(site, name);\n\t}\n\n\tisCommutative() {\n\t\tlet op = this.#op.toString();\n\t\treturn op == \"+\" || op == \"*\";\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet a = this.#a.eval(scope);\n\t\tlet b = this.#b.eval(scope);\n\n\t\tassert(a.isValue() && b.isValue());\n\n\t\t/**\n\t\t * @type {?UserError}\n\t\t */\n\t\tlet firstError = null;\n\n\t\tfor (let swap of (this.isCommutative() ? [false, true] : [false])) {\n\t\t\tfor (let alt of [false, true]) {\n\t\t\t\tlet first  = swap ? b : a;\n\t\t\t\tlet second = swap ? a : b;\n\n\t\t\t\ttry {\n\t\t\t\t\tlet fnVal = first.getType(this.site).getTypeMember(this.translateOp(alt));\n\n\t\t\t\t\tlet res = fnVal.call(this.#op.site, [first, second]);\n\n\t\t\t\t\tthis.#swap = swap;\n\t\t\t\t\tthis.#alt  = alt;\n\n\t\t\t\t\treturn res;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof UserError) {\n\t\t\t\t\t\tif (firstError === null) {\n\t\t\t\t\t\t\tfirstError = e;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (firstError !== null) {\n\t\t\tthrow firstError;\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t}\n\t}\n\n\tuse() {\n\t\tthis.#a.use();\n\t\tthis.#b.use();\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet path = this.first.type.path;\n\n\t\tlet op = this.translateOp(this.#alt).value;\n\n\t\tif (op == \"__and\" || op == \"__or\") {\n\t\t\treturn new IR([\n\t\t\t\tnew IR(`${path}${op}`, this.site), new IR(`(\\n${indent}${TAB}() -> {`),\n\t\t\t\tthis.first.toIR(indent + TAB),\n\t\t\t\tnew IR(`},\\n${indent}${TAB}() -> {`),\n\t\t\t\tthis.second.toIR(indent + TAB),\n\t\t\t\tnew IR(`}\\n${indent})`)\n\t\t\t]);\n\t\t} else {\n\t\t\treturn new IR([\n\t\t\t\tnew IR(`${path}__${op}`, this.site), new IR(\"(\"),\n\t\t\t\tthis.first.toIR(indent),\n\t\t\t\tnew IR(\", \"),\n\t\t\t\tthis.second.toIR(indent),\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\t}\n}\n\n/**\n * Parentheses expression\n * @package\n */\nclass ParensExpr extends ValueExpr {\n\t#exprs;\n\n\t/**\n\t * @param {Site} site \n\t * @param {ValueExpr[]} exprs\n\t */\n\tconstructor(site, exprs) {\n\t\tsuper(site);\n\t\tthis.#exprs = exprs;\n\t}\n\n\ttoString() {\n\t\treturn `(${this.#exprs.map(e => e.toString()).join(\", \")})`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tif (this.#exprs.length === 1) {\n\t\t\treturn this.#exprs[0].eval(scope);\n\t\t} else {\n\t\t\treturn new MultiInstance(this.#exprs.map(e => {\n\t\t\t\tconst v = e.eval(scope);\n\n\t\t\t\tif (v.getType(e.site) instanceof ErrorType) {\n\t\t\t\t\tthrow e.site.typeError(\"unexpected error call in multi-valued expression\");\n\t\t\t\t}\n\n\t\t\t\treturn v;\n\t\t\t}));\n\t\t}\n\t}\n\n\tuse() {\n\t\tthis.#exprs.forEach(e => e.use());\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tif (this.#exprs.length === 1) {\n\t\t\treturn this.#exprs[0].toIR(indent);\n\t\t} else {\n\t\t\treturn new IR(\n\t\t\t\t[new IR(`(callback) -> {\\n${indent + TAB}callback(\\n${indent + TAB + TAB}`, this.site)]\n\t\t\t\t.concat(new IR(this.#exprs.map(e => e.toIR(indent + TAB + TAB))).join(`,\\n${indent + TAB + TAB}`))\n\t\t\t\t.concat([new IR(`\\n${indent + TAB})\\n${indent}}`)])\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * @package\n */\nclass CallArgExpr extends Token {\n\t#name;\n\t#valueExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {null | Word} name \n\t * @param {ValueExpr} valueExpr \n\t */\n\tconstructor(site, name, valueExpr) {\n\t\tsuper(site);\n\n\t\tthis.#name = name;\n\t\tthis.#valueExpr = valueExpr;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\treturn this.#name?.toString() ?? \"\";\n\t}\n\n\t/**\n\t * @type {ValueExpr}\n\t */\n\tget valueExpr() {\n\t\treturn this.#valueExpr;\n\t}\n\n\t/**\n\t * @type {Instance}\n\t */\n\tget value() {\n\t\treturn this.#valueExpr.value;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisNamed() {\n\t\treturn this.#name != null;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisLiteral() {\n\t\treturn this.#valueExpr.isLiteral();\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn [\n\t\t\tthis.#name != null ? `${this.#name.toString()}: `: \"\",\n\t\t\tthis.#valueExpr.toString()\n\t\t].join(\"\");\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\teval(scope) {\n\t\treturn this.#valueExpr.eval(scope);\n\t}\n\n\tuse() {\n\t\tthis.#valueExpr.use();\n\t}\n}\n\n/**\n * ...(...) expression\n * @package\n */\nclass CallExpr extends ValueExpr {\n\t#fnExpr;\n\t#argExprs;\n\n\t/**\n\t * @param {Site} site \n\t * @param {ValueExpr} fnExpr \n\t * @param {CallArgExpr[]} argExprs \n\t */\n\tconstructor(site, fnExpr, argExprs) {\n\t\tsuper(site);\n\t\tthis.#fnExpr = fnExpr;\n\t\tthis.#argExprs = argExprs;\n\t}\n\n\tget fnExpr() {\n\t\treturn this.#fnExpr;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#fnExpr.toString()}(${this.#argExprs.map(a => a.toString()).join(\", \")})`;\n\t}\n\n\tisLiteral() {\n\t\tif (this.#fnExpr instanceof ValuePathExpr && this.#fnExpr.baseType.isBaseOf(this.site, this.type)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tconst fnVal = this.#fnExpr.eval(scope);\n\n\t\tconst argVals = this.#argExprs.map(ae => ae.eval(scope));\n\n\t\t/**\n\t\t * @type {Instance[]}\n\t\t */\n\t\tlet posArgVals = [];\n\n\t\tthis.#argExprs.forEach((argExpr, i) => {\n\t\t\tif (!argExpr.isNamed()) {\n\t\t\t\tposArgVals.push(argVals[i]);\n\t\t\t}\n\t\t});\n\n\t\tposArgVals = MultiInstance.flatten(posArgVals);\n\n\t\t/**\n\t\t * @type {{[name: string]: Instance}}\n\t\t */\n\t\tconst namedArgVals = {};\n\n\t\tthis.#argExprs.forEach((argExpr, i) => {\n\t\t\tif (argExpr.isNamed()) {\n\t\t\t\tconst val = argVals[i];\n\n\t\t\t\t// can't be multi instance\n\t\t\t\tif (val instanceof MultiInstance) {\n\t\t\t\t\tthrow argExpr.typeError(\"can't use multiple return values as named argument\");\n\t\t\t\t}\n\n\t\t\t\tnamedArgVals[argExpr.name] = val;\n\t\t\t}\n\t\t});\n\n\t\tassert(posArgVals.every(pav => pav != undefined));\n\n\t\treturn fnVal.call(this.site, posArgVals, namedArgVals);\n\t}\n\n\tuse() {\n\t\tthis.#fnExpr.use();\n\n\t\tfor (let arg of this.#argExprs) {\n\t\t\targ.use();\n\t\t}\n\t}\n\n\t/**\n\t * Don't call this inside eval() because param types won't yet be complete.\n\t * @type {FuncType}\n\t */\n\tget fn() {\n\t\treturn assertClass(this.#fnExpr.value.getType(this.#fnExpr.site), FuncType);\n\t}\n\n\t/**\n\t * @returns {[ValueExpr[], IR[]]} - first list are positional args, second list named args and remaining opt args\n\t */\n\texpandArgs() {\n\t\tconst fn = this.fn;\n\t\tconst nNonOptArgs = fn.nNonOptArgs;\n\n\t\t/**\n\t\t * @type {ValueExpr[]}\n\t\t */\n\t\tconst positional = [];\n\n\t\tthis.#argExprs.forEach(ae => {\n\t\t\tif (!ae.isNamed()) {\n\t\t\t\tpositional.push(ae.valueExpr);\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * @type {IR[]}\n\t\t */\n\t\tconst namedOptional = [];\n\n\t\tthis.#argExprs.forEach(ae => {\n\t\t\tif (ae.isNamed()) {\n\t\t\t\tconst i = fn.getNamedIndex(ae.site, ae.name);\n\n\t\t\t\tif (i < nNonOptArgs) {\n\t\t\t\t\tpositional[i] = ae.valueExpr;\n\t\t\t\t} else {\n\t\t\t\t\tnamedOptional[i - nNonOptArgs] = new IR([\n\t\t\t\t\t\tnew IR(\"true\"),\n\t\t\t\t\t\tnew IR(\", \"),\n\t\t\t\t\t\tae.valueExpr.toIR()\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfor (let i = nNonOptArgs; i < fn.nArgs; i++) {\n\t\t\tif (namedOptional[i - nNonOptArgs] == undefined) {\n\t\t\t\tnamedOptional[i - nNonOptArgs] = new IR([\n\t\t\t\t\tnew IR(\"false\"),\n\t\t\t\t\tnew IR(\", \"),\n\t\t\t\t\tnew IR(\"()\")\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\treturn [positional.filter(p => p != undefined), namedOptional];\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tconst fn = this.fn;\n\n\t\t/**\n\t\t * First step is to eliminate the named args\n\t\t * @type {[ValueExpr[], IR[]]}\n\t\t */\n\t\tconst [positional, namedOptional] = this.expandArgs();\n\n\t\tif (positional.some(e => (!e.isLiteral()) && (e.value instanceof MultiInstance))) {\n\t\t\t// count the number of final args\n\t\t\tlet n = 0;\n\n\t\t\tpositional.forEach((e, i) => {\n\t\t\t\tif ((!e.isLiteral()) && (e.value instanceof MultiInstance)) {\n\t\t\t\t\tn += e.value.values.length;\n\t\t\t\t} else {\n\t\t\t\t\tn += 1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tn += namedOptional.length;\n\n\t\t\tif (n > fn.nArgs) {\n\t\t\t\tnamedOptional.splice(0, n - fn.nArgs);\n\t\t\t}\n\n\t\t\tlet names = [];\n\n\t\t\tfor (let i = 0; i < fn.nArgs; i++) {\n\t\t\t\tif (i >= fn.nNonOptArgs) {\n\t\t\t\t\tnames.push(`__useopt__x${i}`);\n\t\t\t\t}\n\n\t\t\t\tnames.push(`x${i}`);\n\t\t\t}\n\n\t\t\tlet ir = new IR([\n\t\t\t\tthis.#fnExpr.toIR(),\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\tnew IR(names.map(n => new IR(n))).join(\", \"),\n\t\t\t\tnew IR(\")\", this.site)\n\t\t\t]);\n\n\t\t\tfor (let namedIR of namedOptional.slice().reverse()) {\n\t\t\t\tconst n2 = assertDefined(names.pop());\n\t\t\t\tconst n1 = assertDefined(names.pop());\n\t\t\t\tassert(n1.startsWith(\"__useopt__\"));\n\n\t\t\t\tir = new IR([\n\t\t\t\t\tnew IR(\"(\"),\n\t\t\t\t\tnew IR(n1),\n\t\t\t\t\tnew IR(\", \"),\n\t\t\t\t\tnew IR(n2),\n\t\t\t\t\tnew IR(\") -> {\"),\n\t\t\t\t\tir,\n\t\t\t\t\tnew IR(\"}(\"),\n\t\t\t\t\tassertDefined(namedIR), // bool - val pair\n\t\t\t\t\tnew IR(\")\")\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tfor (let i = positional.length - 1; i >= 0; i--) {\n\t\t\t\tconst e = positional[i];\n\n\t\t\t\tif ((!e.isLiteral()) && (e.value instanceof MultiInstance)) {\n\t\t\t\t\tconst nMulti = e.value.values.length;\n\t\t\t\t\tconst multiNames = [];\n\t\t\t\t\tconst multiOpt = [];\n\n\t\t\t\t\twhile (multiNames.length < nMulti) {\n\t\t\t\t\t\tmultiNames.unshift(assertDefined(names.pop()));\n\n\t\t\t\t\t\tif (names.length > 0 && names[names.length-1] == `__useopt__${multiNames[0]}`) {\n\t\t\t\t\t\t\tmultiOpt.unshift(assertDefined(names.pop()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (multiOpt.length > 0) {\n\t\t\t\t\t\tir = new IR([\n\t\t\t\t\t\t\tnew IR(\"(\"),\n\t\t\t\t\t\t\tnew IR(multiOpt.map(n => new IR(n))).join(\", \"),\n\t\t\t\t\t\t\tnew IR(\") -> {\"),\n\t\t\t\t\t\t\tir,\n\t\t\t\t\t\t\tnew IR(\"}(\"),\n\t\t\t\t\t\t\tnew IR(multiOpt.map(n => new IR(\"true\"))).join(\", \"),\n\t\t\t\t\t\t\tnew IR(\")\")\n\t\t\t\t\t\t])\n\t\t\t\t\t}\n\n\t\t\t\t\tir = new IR([\n\t\t\t\t\t\te.toIR(),\n\t\t\t\t\t\tnew IR(\"((\"),\n\t\t\t\t\t\tnew IR(multiNames.map(n => new IR(n))).join(\", \"),\n\t\t\t\t\t\tnew IR(\") -> {\"),\n\t\t\t\t\t\tir,\n\t\t\t\t\t\tnew IR(\"})\")\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tconst name = assertDefined(names.pop());\n\n\t\t\t\t\tif (names.length > 0 && names[names.length - 1] == `__useopt__${name}`) {\n\t\t\t\t\t\tir = new IR([\n\t\t\t\t\t\t\tnew IR(\"(\"),\n\t\t\t\t\t\t\tnew IR(assertDefined(names.pop())),\n\t\t\t\t\t\t\tnew IR(\") -> {\"),\n\t\t\t\t\t\t\tnew IR(\"}(true)\")\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\n\t\t\t\t\tir = new IR([\n\t\t\t\t\t\tnew IR(\"(\"),\n\t\t\t\t\t\tnew IR(name),\n\t\t\t\t\t\tnew IR(\") -> {\"),\n\t\t\t\t\t\tir,\n\t\t\t\t\t\tnew IR(\"}(\"),\n\t\t\t\t\t\te.toIR(),\n\t\t\t\t\t\tnew IR(\")\")\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ir;\n\t\t} else {\n\t\t\tif (positional.length + namedOptional.length > fn.nArgs) {\n\t\t\t\tnamedOptional.splice(0, positional.length + namedOptional.length - fn.nArgs);\n\t\t\t}\n\n\t\t\tlet args = positional.map((a, i) => {\n\t\t\t\tlet ir = a.toIR(indent);\n\n\t\t\t\tif (i >= fn.nNonOptArgs) {\n\t\t\t\t\tir = new IR([\n\t\t\t\t\t\tnew IR(\"true, \"),\n\t\t\t\t\t\tir\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\treturn ir;\n\t\t\t}).concat(namedOptional);\n\n\t\t\treturn new IR([\n\t\t\t\tthis.#fnExpr.toIR(indent),\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\t(new IR(args)).join(\", \"),\n\t\t\t\tnew IR(\")\", this.site)\n\t\t\t]);\n\t\t}\n\t}\n}\n\n/**\n *  ... . ... expression\n * @package\n */\nclass MemberExpr extends ValueExpr {\n\t#objExpr;\n\t#memberName;\n\t#isRecursiveFunc;\n\n\t/**\n\t * @param {Site} site \n\t * @param {ValueExpr} objExpr \n\t * @param {Word} memberName \n\t */\n\tconstructor(site, objExpr, memberName) {\n\t\tsuper(site);\n\t\tthis.#objExpr = objExpr;\n\t\tthis.#memberName = memberName;\n\t\tthis.#isRecursiveFunc = false;\n\t}\n\n\ttoString() {\n\t\treturn `${this.#objExpr.toString()}.${this.#memberName.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet objVal = this.#objExpr.eval(scope);\n\n\t\tlet memberVal = objVal.assertValue(this.#objExpr.site).getInstanceMember(this.#memberName);\n\n\t\tif (memberVal instanceof FuncInstance && memberVal.isRecursive(scope)) {\n\t\t\tthis.#isRecursiveFunc = true;\n\t\t}\n\n\t\treturn memberVal;\n\t}\n\n\tuse() {\n\t\tthis.#objExpr.use();\n\n\t\tif (this.value instanceof FuncStatementInstance) {\n\t\t\tthis.value.statement.use();\n\t\t} else if (this.value instanceof ConstStatementInstance) {\n\t\t\tthis.value.statement.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\t// members can be functions so, field getters are also encoded as functions for consistency\n\n\t\tlet objPath = this.#objExpr.type.path;\n\n\t\t// if we are getting the member of an enum member we should check if it a field or method, because for a method we have to use the parent type\n\t\tif ((this.#objExpr.type instanceof EnumMemberStatementType) && (!this.#objExpr.type.statement.hasField(this.#memberName))) {\n\t\t\tobjPath = this.#objExpr.type.statement.parent.path;\n\t\t}\n\n\t\t// if the memberVal was a ParamFuncValue then the member name might need to be modified if the output type of some callbacks is a Bool\n\t\tif (this.value instanceof ParamFuncValue && this.value.correctMemberName !== null) {\n\t\t\tthis.#memberName = new Word(this.#memberName.site, this.value.correctMemberName());\n\t\t}\n\n\t\tlet ir = new IR(`${objPath}__${this.#memberName.toString()}`, this.site);\n\n\t\tif (this.#isRecursiveFunc) {\n\t\t\tir = new IR([\n\t\t\t\tir,\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\tir,\n\t\t\t\tnew IR(\")\"),\n\t\t\t]);\n\t\t}\n\n\t\treturn new IR([\n\t\t\tir, new IR(\"(\"),\n\t\t\tthis.#objExpr.toIR(indent),\n\t\t\tnew IR(\")\"),\n\t\t]);\n\t}\n}\n\n/**\n * if-then-else expression \n * @package\n */\nclass IfElseExpr extends ValueExpr {\n\t#conditions;\n\t#branches;\n\n\t/**\n\t * @param {Site} site \n\t * @param {ValueExpr[]} conditions \n\t * @param {ValueExpr[]} branches \n\t */\n\tconstructor(site, conditions, branches) {\n\t\tassert(branches.length == conditions.length + 1);\n\t\tassert(branches.length > 1);\n\n\t\tsuper(site);\n\t\tthis.#conditions = conditions;\n\t\tthis.#branches = branches;\n\t}\n\n\ttoString() {\n\t\tlet s = \"\";\n\t\tfor (let i = 0; i < this.#conditions.length; i++) {\n\t\t\ts += `if (${this.#conditions[i].toString()}) {${this.#branches[i].toString()}} else `;\n\t\t}\n\n\t\ts += `{${this.#branches[this.#conditions.length].toString()}}`;\n\n\t\treturn s;\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {?Type} prevType\n\t * @param {Type} newType\n\t */\n\tstatic reduceBranchType(site, prevType, newType) {\n\t\tif (prevType === null || prevType instanceof ErrorType) {\n\t\t\treturn newType;\n\t\t} else if (newType instanceof ErrorType) {\n\t\t\treturn prevType;\n\t\t} else if (!prevType.isBaseOf(site, newType)) {\n\t\t\tif (newType.isBaseOf(site, prevType)) {\n\t\t\t\treturn newType;\n\t\t\t} else {\n\t\t\t\t// check if enumparent is base of newType and of prevType\n\t\t\t\tif (newType.isEnumMember()) {\n\t\t\t\t\tconst parentType = newType.parentType(Site.dummy());\n\n\t\t\t\t\tif (parentType.isBaseOf(site, prevType) && parentType.isBaseOf(site, newType)) {\n\t\t\t\t\t\treturn parentType;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow site.typeError(\"inconsistent types\");\n\t\t\t}\n\t\t} else {\n\t\t\treturn prevType;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {?Type[]} prevTypes\n\t * @param {Instance} newValue\n\t * @returns {?Type[]}\n\t */\n\tstatic reduceBranchMultiType(site, prevTypes, newValue) {\n\t\tif (!(newValue instanceof MultiInstance) && newValue.getType(site) instanceof ErrorType) {\n\t\t\treturn prevTypes;\n\t\t}\n\n\t\tconst newTypes = (newValue instanceof MultiInstance) ?\n\t\t\tnewValue.values.map(v => v.getType(site)) :\n\t\t\t[newValue.getType(site)];\n\n\t\tif (prevTypes === null) {\n\t\t\treturn newTypes;\n\t\t} else if (prevTypes.length !== newTypes.length) {\n\t\t\tthrow site.typeError(\"inconsistent number of multi-value types\");\n\t\t} else {\n\t\t\treturn prevTypes.map((pt, i) => IfElseExpr.reduceBranchType(site, pt, newTypes[i]));\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tfor (let c of this.#conditions) {\n\t\t\tlet cVal = c.eval(scope);\n\t\t\tif (!cVal.isInstanceOf(c.site, BoolType)) {\n\t\t\t\tthrow c.typeError(\"expected bool\");\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Supports multiple return values\n\t\t * @type {?Type[]}\n\t\t */\n\t\tlet branchMultiType = null;\n\n\t\tfor (let b of this.#branches) {\n\t\t\tlet branchVal = b.eval(scope);\n\n\t\t\tbranchMultiType = IfElseExpr.reduceBranchMultiType(\n\t\t\t\tb.site, \n\t\t\t\tbranchMultiType, \n\t\t\t\tbranchVal\n\t\t\t);\n\t\t}\n\n\t\tif (branchMultiType === null) {\n\t\t\t// i.e. every branch throws an error\n\t\t\treturn Instance.new(new ErrorType());\n\t\t} else  {\n\t\t\treturn Instance.new(branchMultiType);\n\t\t}\n\t}\n\n\tuse() {\n\t\tfor (let c of this.#conditions) {\n\t\t\tc.use();\n\t\t}\n\n\t\tfor (let b of this.#branches) {\n\t\t\tb.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet n = this.#conditions.length;\n\n\t\t// each branch actually returns a function to allow deferred evaluation\n\t\tlet res = new IR([\n\t\t\tnew IR(\"() -> {\"),\n\t\t\tthis.#branches[n].toIR(indent),\n\t\t\tnew IR(\"}\")\n\t\t]);\n\n\t\t// TODO: nice indentation\n\t\tfor (let i = n - 1; i >= 0; i--) {\n\t\t\tres = new IR([\n\t\t\t\tnew IR(\"__core__ifThenElse(\"),\n\t\t\t\tthis.#conditions[i].toIR(indent),\n\t\t\t\tnew IR(\", () -> {\"),\n\t\t\t\tthis.#branches[i].toIR(indent),\n\t\t\t\tnew IR(\"}, () -> {\"),\n\t\t\t\tres,\n\t\t\t\tnew IR(\"()})\"),\n\t\t\t]);\n\t\t}\n\n\t\treturn new IR([res, new IR(\"()\", this.site)]);\n\t}\n}\n\n/**\n * DestructExpr is for the lhs-side of assignments and for switch cases\n * @package\n */\nclass DestructExpr {\n\t#name;\n\t#typeExpr;\n\t#destructExprs;\n\n\t/**\n\t * @param {Word} name - use an underscore as a sink\n\t * @param {?TypeExpr} typeExpr \n\t * @param {DestructExpr[]} destructExprs\n\t */\n\tconstructor(name, typeExpr, destructExprs = []) {\n\t\tthis.#name = name;\n\t\tthis.#typeExpr = typeExpr;\n\t\tthis.#destructExprs = destructExprs;\n\n\t\tassert (!(this.#typeExpr == null && this.#destructExprs.length > 0));\n\t}\n\n\t/**\n\t * @type {Site}\n\t */\n\tget site() {\n\t\treturn this.#name.site;\n\t}\n\n\t/**\n\t * @type {Word}\n\t */\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\thasDestructExprs() {\n\t\treturn this.#destructExprs.length > 0;\n\t}\n\n\tisIgnored() {\n\t\treturn this.name.value === \"_\";\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\thasType() {\n\t\treturn this.#typeExpr !== null;\n\t}\n\n\t/**\n\t * Throws an error if called before evalType()\n\t * @type {Type}\n\t */\n\tget type() {\n\t\tif (this.#typeExpr === null) {\n\t\t\tif (this.isIgnored()) {\n\t\t\t\treturn new AnyType();\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"typeExpr not set\");\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.#typeExpr.type;\n\t\t}\n\t}\n\n\t/**\n\t * @type {Word}\n\t */\n\tget typeName() {\n\t\tif (this.#typeExpr === null) {\n\t\t\treturn new Word(this.site, \"\");\n\t\t} else {\n\t\t\treturn new Word(this.#typeExpr.site, this.#typeExpr.toString());\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.#typeExpr === null) {\n\t\t\treturn this.name.toString();\n\t\t} else {\n\t\t\tlet destructStr = \"\";\n\n\t\t\tif (this.#destructExprs.length > 0) {\n\t\t\t\tdestructStr = `{${this.#destructExprs.map(de => de.toString()).join(\", \")}}`;\n\t\t\t}\n\n\t\t\tif (this.isIgnored()) {\n\t\t\t\treturn `${this.#typeExpr.toString()}${destructStr}`;\n\t\t\t} else {\n\t\t\t\treturn `${this.name.toString()}: ${this.#typeExpr.toString()}${destructStr}`;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates the type, used by FuncLiteralExpr and DataDefinition\n\t * @param {Scope} scope \n\t * @returns {Type}\n\t */\n\tevalType(scope) {\n\t\tif (this.#typeExpr === null) {\n\t\t\tif (this.isIgnored()) {\n\t\t\t\treturn new AnyType();\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"typeExpr not set\");\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.#typeExpr.eval(scope);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @param {Type} upstreamType \n\t */\n\tevalDestructExprs(scope, upstreamType) {\n\t\tif (this.#destructExprs.length > 0) {\n\t\t\tif (!(upstreamType instanceof AnyType) && upstreamType.nFields(this.site) != this.#destructExprs.length) {\n\t\t\t\tthrow this.site.typeError(`wrong number of destruct fields, expected ${upstreamType.nFields(this.site)}, got ${this.#destructExprs.length}`);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < this.#destructExprs.length; i++) {\n\n\t\t\t\tthis.#destructExprs[i].evalInternal(\n\t\t\t\t\tscope, \n\t\t\t\t\tupstreamType.getFieldType(this.site, i), \n\t\t\t\t\ti\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @param {Type} upstreamType\n\t * @param {number} i\n\t */\n\tevalInternal(scope, upstreamType, i) {\n\t\tif (this.hasType()) {\n\t\t\tlet t = this.evalType(scope)\n\n\t\t\tassert(t.isType());\n\n\t\t\t// differs from upstreamType because can be enum parent\n\t\t\tlet checkType = t;\n\n\t\t\t// if t is enum variant, get parent instead (exact variant is checked at runtime instead)\n\t\t\tif (t.isEnumMember() && !upstreamType.isEnumMember()) {\n\t\t\t\tcheckType = t.parentType(this.site);\n\t\t\t}\n\n\t\t\tif (!Instance.new(upstreamType).isInstanceOf(this.site, checkType)) {\n\t\t\t\tthrow this.site.typeError(`expected ${checkType.toString()} for destructure field ${i+1}, got ${upstreamType.toString()}`);\n\t\t\t}\n\n\t\t\tif (!this.isIgnored()) {\n\t\t\t\t// TODO: take into account ghost type parameters\n\t\t\t\tscope.set(this.name, Instance.new(t));\n\t\t\t}\n\n\t\t\tthis.evalDestructExprs(scope, t);\n\t\t} else {\n\t\t\tif (!this.isIgnored()) {\n\t\t\t\t// TODO: take into account ghost type parameters\n\t\t\t\tscope.set(this.name, Instance.new(upstreamType));\n\t\t\t}\n\n\t\t\tthis.evalDestructExprs(scope, upstreamType);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope\n\t * @param {Type} caseType\n\t */\n\tevalInSwitchCase(scope, caseType) {\n\t\tif (!this.isIgnored()) {\n\t\t\tscope.set(this.#name, Instance.new(caseType));\n\t\t}\n\n\t\tthis.evalDestructExprs(scope, caseType)\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @param {Type} upstreamType\n\t * @param {number} i\n\t */\n\tevalInAssignExpr(scope, upstreamType, i) {\n\t\tlet t = this.evalType(scope)\n\n\t\tassert(t.isType());\n\n\t\t// differs from upstreamType because can be enum parent\n\t\tlet checkType = t;\n\n\t\t// if t is enum variant, get parent instead (exact variant is checked at runtime instead)\n\t\tif (t.isEnumMember() && !upstreamType.isEnumMember()) {\n\t\t\tcheckType = t.parentType(this.site);\n\t\t}\n\n\t\tif (!Instance.new(upstreamType).isInstanceOf(this.site, checkType)) {\n\t\t\tthrow this.site.typeError(`expected ${checkType.toString()} for rhs ${i+1}, got ${upstreamType.toString()}`);\n\t\t}\n\n\t\tif (!this.isIgnored()) {\n\t\t\t// TODO: take into account ghost type parameters\n\t\t\tscope.set(this.name, Instance.new(t));\n\t\t}\n\n\t\tthis.evalDestructExprs(scope, t);\n\t}\n\n\tuse() {\n\t\tif (this.#typeExpr !== null) {\n\t\t\tthis.#typeExpr.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} argIndex \n\t * @returns {IR}\n\t */\n\ttoNameIR(argIndex) {\n\t\tif (this.isIgnored()) {\n\t\t\treturn new IR(`__lhs_${argIndex}`);\n\t\t} else {\n\t\t\treturn new IR(this.#name.toString(), this.#name.site)\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} fieldIndex\n\t * @param {boolean} isSwitchCase\n\t * @returns {string}\n\t */\n\tgetFieldFn(fieldIndex, isSwitchCase = false) {\n\t\tif (isSwitchCase) {\n\t\t\treturn `__helios__common__field_${fieldIndex}`;\n\t\t}\n\n\t\tconst type = this.type;\n\n\t\tif (type.isEnumMember()) {\n\t\t\treturn `__helios__common__field_${fieldIndex}`;\n\t\t} else if (type instanceof StructStatementType) {\n\t\t\tif (type.nFields(Site.dummy()) == 1) {\n\t\t\t\treturn \"\";\n\t\t\t} else {\n\t\t\t\treturn `__helios__common__tuple_field_${fieldIndex}`;\n\t\t\t}\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @param {IR} inner \n\t * @param {string} objName \n\t * @param {number} fieldIndex \n\t * @param {string} fieldFn\n\t * @returns {IR}\n\t */\n\twrapDestructIRInternal(indent, inner, objName, fieldIndex, fieldFn) {\n\t\tif (this.isIgnored() && this.#destructExprs.length == 0) {\n\t\t\treturn inner;\n\t\t} else {\n\t\t\tconst baseName = this.isIgnored() ? `${objName}_${fieldIndex}` : this.#name.toString();\n\n\t\t\tfor (let i = this.#destructExprs.length - 1; i >= 0; i--) {\n\t\t\t\tinner = this.#destructExprs[i].wrapDestructIRInternal(indent + TAB, inner, baseName, i, this.getFieldFn(i));\n\t\t\t}\n\n\t\t\tlet getter = `${fieldFn}(${objName})`;\n\n\t\t\t// assert correct constructor index\n\t\t\tif (this.#typeExpr && this.type.isEnumMember()) {\n\t\t\t\tconst constrIdx = this.type.getConstrIndex(this.#typeExpr.site);\n\n\t\t\t\tgetter = `__helios__common__assert_constr_index(${getter}, ${constrIdx})`;\n\t\t\t}\n\t\t\t\n\t\t\treturn new IR([\n\t\t\t\tnew IR(\"(\"),\n\t\t\t\tnew IR(baseName, this.#name.site),\n\t\t\t\tnew IR(\") \"),\n\t\t\t\tnew IR(\"->\", this.site), new IR(` {\\n${indent}${TAB}`),\n\t\t\t\tinner,\n\t\t\t\tnew IR(`\\n${indent}}(${getter})`),\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @param {IR} inner \n\t * @param {number} argIndex \n\t * @param {boolean} isSwitchCase\n\t * @returns {IR}\n\t */\n\twrapDestructIR(indent, inner, argIndex, isSwitchCase = false) {\n\t\tif (this.#destructExprs.length == 0) {\n\t\t\treturn inner;\n\t\t} else {\n\t\t\tconst baseName = this.isIgnored() ? `__lhs_${argIndex}` : this.#name.toString();\n\n\t\t\tfor (let i = this.#destructExprs.length - 1; i >= 0; i--) {\n\t\t\t\tconst de = this.#destructExprs[i];\n\n\t\t\t\tinner = de.wrapDestructIRInternal(indent + TAB, inner, baseName, i, this.getFieldFn(i, isSwitchCase));\n\t\t\t}\n\n\t\t\treturn inner;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIR() {\n\t\treturn new IR(this.#name.toString(), this.#name.site);\n\t}\n}\n\n/**\n * Switch case for a switch expression\n * @package\n */\nclass SwitchCase extends Token {\n\t#lhs;\n\t#bodyExpr;\n\n\t/** @type {?number} */\n\t#constrIndex;\n\n\t/**\n\t * @param {Site} site \n\t * @param {DestructExpr} lhs\n\t * @param {ValueExpr} bodyExpr \n\t */\n\tconstructor(site, lhs, bodyExpr) {\n\t\tsuper(site);\n\t\tthis.#lhs = lhs;\n\t\tthis.#bodyExpr = bodyExpr;\n\t\tthis.#constrIndex = null;\n\t}\n\n\t/**\n\t * @type {ValueExpr}\n\t */\n\tget body() {\n\t\treturn this.#bodyExpr;\n\t}\n\n\t/**\n\t * Used by parser to check if typeExpr reference the same base enum\n\t * @type {Word} - word representation of type\n\t */\n\tget memberName() {\n\t\treturn this.#lhs.typeName;\n\t}\n\n\tisDataMember() {\n\t\tswitch (this.memberName.value) {\n\t\t\tcase \"Int\":\n\t\t\tcase \"[]Data\":\n\t\t\tcase \"ByteArray\":\n\t\t\tcase \"Map[Data]Data\":\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tget constrIndex() {\n\t\tif (this.#constrIndex === null) {\n\t\t\tthrow new Error(\"constrIndex not yet set\");\n\t\t} else {\n\t\t\treturn this.#constrIndex;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn `${this.#lhs.toString()} => ${this.#bodyExpr.toString()}`;\n\t}\n\n\t/**\n\t * Evaluates the switch type and body value of a case.\n\t * @param {Scope} scope \n\t * @param {Type} enumType\n\t * @returns {Instance}\n\t */\n\tevalEnumMember(scope, enumType) {\n\t\tconst caseType = enumType.getTypeMember(this.memberName).assertType(this.memberName.site);\n\n\t\tthis.#constrIndex = caseType.getConstrIndex(this.memberName.site);\n\n\t\tassert(this.#constrIndex >= 0);\n\n\t\tconst caseScope = new Scope(scope);\n\n\t\tthis.#lhs.evalInSwitchCase(caseScope, caseType);\n\n\t\tconst bodyVal = this.#bodyExpr.eval(caseScope);\n\n\t\tcaseScope.assertAllUsed();\n\n\t\treturn bodyVal;\n\t}\n\n\t/**\n\t * Evaluates the switch type and body value of a case.\n\t * @param {Scope} scope\n\t * @returns {Instance}\n\t */\n\tevalDataMember(scope) {\n\t\t/** @type {Type} */\n\t\tlet memberType;\n\n\t\tswitch (this.memberName.value) {\n\t\t\tcase \"Int\":\n\t\t\t\tmemberType = new IntType();\n\t\t\t\tbreak;\n\t\t\tcase \"ByteArray\":\n\t\t\t\tmemberType = new ByteArrayType();\n\t\t\t\tbreak;\n\t\t\tcase \"[]Data\":\n\t\t\t\tmemberType = new ListType(new RawDataType());\n\t\t\t\tbreak;\n\t\t\tcase \"Map[Data]Data\":\n\t\t\t\tmemberType = new MapType(new RawDataType(), new RawDataType());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlet maybeMemberType = scope.get(this.memberName);\n\t\t\t\tif (maybeMemberType instanceof Type) {\n\t\t\t\t\tmemberType = maybeMemberType;\n\n\t\t\t\t\tif (!(memberType instanceof EnumStatementType)) {\n\t\t\t\t\t\tthrow this.memberName.typeError(\"expected an enum type\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow this.memberName.typeError(\"expected a type\");\n\t\t\t\t}\n\t\t}\n\n\t\tconst caseScope = new Scope(scope);\n\n\t\tthis.#lhs.evalInSwitchCase(caseScope, memberType);\n\n\t\tconst bodyVal = this.#bodyExpr.eval(caseScope);\n\n\t\tcaseScope.assertAllUsed();\n\n\t\treturn bodyVal;\n\t}\n\n\tuse() {\n\t\tthis.#bodyExpr.use();\n\t}\n\n\t/**\n\t * Accept an arg because will be called with the result of the controlexpr\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet inner = this.#bodyExpr.toIR(indent + TAB);\n\n\t\tinner = this.#lhs.wrapDestructIR(indent, inner, 0, true);\n\n\t\treturn new IR([\n\t\t\tnew IR(\"(\"),\n\t\t\tthis.#lhs.toNameIR(0), \n\t\t\tnew IR(\") \"),\n\t\t\tnew IR(\"->\", this.site), new IR(` {\\n${indent}${TAB}`),\n\t\t\tinner,\n\t\t\tnew IR(`\\n${indent}}`),\n\t\t]);\n\t}\n}\n\n/**\n * @package\n */\nclass UnconstrDataSwitchCase extends SwitchCase {\n\t#intVarName;\n\t#lstVarName;\n\n\t/**\n\t * @param {Site} site \n\t * @param {?Word} intVarName \n\t * @param {?Word} lstVarName \n\t * @param {ValueExpr} bodyExpr \n\t */\n\tconstructor(site, intVarName, lstVarName, bodyExpr) {\n\t\tsuper(site, new DestructExpr(new Word(site, \"_\"), new TypeRefExpr(new Word(site, \"(Int, []Data)\"))), bodyExpr);\n\n\t\tthis.#intVarName = intVarName;\n\t\tthis.#lstVarName = lstVarName;\n\t}\n\n\tisDataMember() {\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\treturn `(${this.#intVarName === null ? \"\" : this.#intVarName.value + \": \"}Int, ${this.#lstVarName === null ? \"\" : this.#lstVarName.value + \": \"} []Data) => ${this.body.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @param {Type} enumType\n\t * @returns {Instance}\n\t */\n\tevalEnumMember(scope, enumType) {\n\t\tthrow new Error(\"not available\");\n\t}\n\n\t/**\n\t * Evaluates the switch type and body value of a case.\n\t * @param {Scope} scope\n\t * @returns {Instance}\n\t */\n\tevalDataMember(scope) {\n\t\tif (this.#intVarName !== null || this.#lstVarName !== null) {\n\t\t\tlet caseScope = new Scope(scope);\n\n\t\t\tif (this.#intVarName !== null) {\n\t\t\t\tcaseScope.set(this.#intVarName, Instance.new(new IntType()));\n\t\t\t}\n\n\t\t\tif (this.#lstVarName !== null) {\n\t\t\t\tcaseScope.set(this.#lstVarName, Instance.new(new ListType(new RawDataType())));\n\t\t\t}\n\n\t\t\tlet bodyVal = this.body.eval(caseScope);\n\n\t\t\tcaseScope.assertAllUsed();\n\n\t\t\treturn bodyVal;\n\t\t} else {\n\t\t\treturn this.body.eval(scope);\n\t\t}\n\t}\n\n\t/**\n\t * Accepts two args\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\treturn new IR([\n\t\t\tnew IR(`(data) -> {\\n${indent}${TAB}`),\n\t\t\tnew IR(`(pair) -> {\\n${indent}${TAB}${TAB}`),\n\t\t\tnew IR(`(${this.#intVarName !== null ? this.#intVarName.toString() : \"_\"}, ${this.#lstVarName !== null ? this.#lstVarName.toString() : \"_\"}) `), new IR(\"->\", this.site), new IR(` {\\n${indent}${TAB}${TAB}${TAB}`),\n\t\t\tthis.body.toIR(indent + TAB + TAB + TAB),\n\t\t\tnew IR(`\\n${indent}${TAB}${TAB}}(__core__iData(__core__fstPair(pair)), __core__listData(__core__sndPair(pair)))`),\n\t\t\tnew IR(`\\n${indent}${TAB}}(__core__unConstrData(data))`),\n\t\t\tnew IR(`\\n${indent}}`)\n\t\t]);\n\t}\n}\n\n/**\n * Default switch case\n * @package\n */\nclass SwitchDefault extends Token {\n\t#bodyExpr;\n\n\t/**\n\t * @param {Site} site\n\t * @param {ValueExpr} bodyExpr\n\t */\n\tconstructor(site, bodyExpr) {\n\t\tsuper(site);\n\t\tthis.#bodyExpr = bodyExpr;\n\t}\n\n\ttoString() {\n\t\treturn `else => ${this.#bodyExpr.toString()}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\teval(scope) {\n\t\treturn this.#bodyExpr.eval(scope);\n\t}\n\n\tuse() {\n\t\tthis.#bodyExpr.use();\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\treturn new IR([\n\t\t\tnew IR(`(_) `), new IR(\"->\", this.site), new IR(` {\\n${indent}${TAB}`),\n\t\t\tthis.#bodyExpr.toIR(indent + TAB),\n\t\t\tnew IR(`\\n${indent}}`)\n\t\t]);\n\t}\n}\n\n/**\n * Parent class of EnumSwitchExpr and DataSwitchExpr\n */\nclass SwitchExpr extends ValueExpr {\n\t#controlExpr;\n\t#cases;\n\t#defaultCase;\n\n\t/** \n\t * @param {Site} site\n\t * @param {ValueExpr} controlExpr - input value of the switch\n\t * @param {SwitchCase[]} cases\n\t * @param {?SwitchDefault} defaultCase\n\t*/\n\tconstructor(site, controlExpr, cases, defaultCase = null) {\n\t\tsuper(site);\n\t\tthis.#controlExpr = controlExpr;\n\t\tthis.#cases = cases;\n\t\tthis.#defaultCase = defaultCase;\n\t}\n\n\tget controlExpr() {\n\t\treturn this.#controlExpr;\n\t}\n\n\tget cases() {\n\t\treturn this.#cases;\n\t}\n\n\tget defaultCase() {\n\t\treturn this.#defaultCase;\n\t}\n\n\t/**\n\t * If there isn't enough coverage then we can simply set the default case to void, so the other branches can be error, print or assert\n\t */\n\tsetDefaultCaseToVoid() {\n\t\tthis.#defaultCase = new SwitchDefault(this.site, new VoidExpr(this.site));\n\t}\n\n\ttoString() {\n\t\treturn `${this.#controlExpr.toString()}.switch{${this.#cases.map(c => c.toString()).join(\", \")}${this.#defaultCase === null ? \"\" : \", \" + this.#defaultCase.toString()}}`;\n\t}\n\n\tuse() {\n\t\tthis.#controlExpr.use();\n\n\t\tfor (let c of this.#cases) {\n\t\t\tc.use();\n\t\t}\n\n\t\tif (this.#defaultCase !== null) {\n\t\t\tthis.#defaultCase.use();\n\t\t}\n\t}\n}\n\n/**\n * Switch expression for Enum, with SwitchCases and SwitchDefault as children\n * @package\n */\nclass EnumSwitchExpr extends SwitchExpr {\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet controlVal = this.controlExpr.eval(scope);\n\t\tlet enumType = controlVal.getType(this.controlExpr.site);\n\t\tlet nEnumMembers = enumType.nEnumMembers(this.controlExpr.site);\n\n\t\t// check that we have enough cases to cover the enum members\n\t\tif (this.defaultCase === null && nEnumMembers > this.cases.length) {\n\t\t\t// mutate defaultCase to VoidExpr\n\t\t\tthis.setDefaultCaseToVoid();\n\t\t}\n\n\t\t/** @type {?Type[]} */\n\t\tlet branchMultiType = null;\n\n\t\tfor (let c of this.cases) {\n\t\t\tlet branchVal = c.evalEnumMember(scope, enumType);\n\t\n\t\t\tbranchMultiType = IfElseExpr.reduceBranchMultiType(\n\t\t\t\tc.site, \n\t\t\t\tbranchMultiType, \n\t\t\t\tbranchVal\n\t\t\t);\n\t\t}\n\n\t\tif (this.defaultCase !== null) {\n\t\t\tlet defaultVal = this.defaultCase.eval(scope);\n\n\t\t\tbranchMultiType = IfElseExpr.reduceBranchMultiType(\n\t\t\t\tthis.defaultCase.site,\n\t\t\t\tbranchMultiType, \n\t\t\t\tdefaultVal\n\t\t\t);\n\t\t}\n\n\t\tif (branchMultiType === null) {\n\t\t\treturn Instance.new(new ErrorType());\n\t\t} else {\n\t\t\treturn Instance.new(branchMultiType);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\tlet cases = this.cases.slice();\n\n\t\t/** @type {SwitchCase | SwitchDefault} */\n\t\tlet last;\n\t\tif (this.defaultCase !== null) {\n\t\t\tlast = this.defaultCase;\n\t\t} else {\n\t\t\tlast = assertDefined(cases.pop());\n\t\t}\n\n\t\tlet n = cases.length;\n\n\t\tlet res = last.toIR(indent + TAB + TAB + TAB);\n\n\t\tfor (let i = n - 1; i >= 0; i--) {\n\t\t\tres = new IR([\n\t\t\t\tnew IR(`__core__ifThenElse(__core__equalsInteger(i, ${cases[i].constrIndex.toString()}), () -> {`),\n\t\t\t\tcases[i].toIR(indent + TAB + TAB + TAB),\n\t\t\t\tnew IR(`}, () -> {`),\n\t\t\t\tres,\n\t\t\t\tnew IR(`})()`)\n\t\t\t]);\n\t\t}\n\n\t\treturn new IR([\n\t\t\tnew IR(`(e) `), new IR(\"->\", this.site), new IR(` {\\n${indent}${TAB}(\\n${indent}${TAB}${TAB}(i) -> {\\n${indent}${TAB}${TAB}${TAB}`),\n\t\t\tres,\n\t\t\tnew IR(`\\n${indent}${TAB}${TAB}}(__core__fstPair(__core__unConstrData(e)))\\n${indent}${TAB})(e)\\n${indent}}(`),\n\t\t\tthis.controlExpr.toIR(indent),\n\t\t\tnew IR(\")\"),\n\t\t]);\n\t}\n}\n\n/**\n * Switch expression for Data\n * @package\n */\nclass DataSwitchExpr extends SwitchExpr {\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet controlVal = this.controlExpr.eval(scope);\n\t\tlet dataType = controlVal.getType(this.controlExpr.site);\n\n\t\tlet controlSite = this.controlExpr.site;\n\t\tif (!dataType.isBaseOf(controlSite, new RawDataType())) {\n\t\t\tthrow this.controlExpr.typeError(`expected Data type, got ${controlVal.getType(controlSite).toString()}`);\n\t\t}\n\n\t\t// check that we have enough cases to cover the enum members\n\t\tif (this.defaultCase === null && this.cases.length < 5) {\n\t\t\t// mutate defaultCase to VoidExpr\n\t\t\tthis.setDefaultCaseToVoid();\n\t\t}\n\n\t\t/** @type {?Type[]} */\n\t\tlet branchMultiType = null;\n\n\t\tfor (let c of this.cases) {\n\t\t\tlet branchVal = c.evalDataMember(scope);\n\n\t\t\tbranchMultiType = IfElseExpr.reduceBranchMultiType(\n\t\t\t\tc.site, \n\t\t\t\tbranchMultiType, \n\t\t\t\tbranchVal\n\t\t\t);\n\t\t}\n\n\t\tif (this.defaultCase !== null) {\n\t\t\tlet defaultVal = this.defaultCase.eval(scope);\n\n\t\t\tbranchMultiType = IfElseExpr.reduceBranchMultiType(\n\t\t\t\tthis.defaultCase.site, \n\t\t\t\tbranchMultiType, \n\t\t\t\tdefaultVal\n\t\t\t);\n\t\t}\n\n\t\tif (branchMultiType === null) {\n\t\t\t// only possible if each branch is an error\n\t\t\treturn Instance.new(new ErrorType());\n\t\t} else {\n\t\t\treturn Instance.new(branchMultiType);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {IR}\n\t */\n\ttoIR(indent = \"\") {\n\t\t/** @type {[?IR, ?IR, ?IR, ?IR, ?IR]} */\n\t\tlet cases = [null, null, null, null, null]; // constr, map, list, int, byteArray\n\n\t\tfor (let c of this.cases) {\n\t\t\tlet ir = c.toIR(indent + TAB + TAB);\n\n\t\t\tswitch (c.memberName.value) {\n\t\t\t\tcase \"ByteArray\":\n\t\t\t\t\tcases[4] = ir;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Int\":\n\t\t\t\t\tcases[3] = ir;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[]Data\":\n\t\t\t\t\tcases[2] = ir;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Map[Data]Data\":\n\t\t\t\t\tcases[1] = ir;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(Int, []Data)\":\n\t\t\t\t\tcases[0] = ir;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (cases[0] !== null) {\n\t\t\t\t\t\tthrow new Error(\"should've been caught before\");\n\t\t\t\t\t}\n\n\t\t\t\t\tcases[0] = ir;\n\t\t\t}\n\t\t}\n\n\t\tif (this.defaultCase !== null) {\n\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\tif (cases[i] === null) {\n\t\t\t\t\tcases[i] = new IR(`${indent}${TAB}def`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet res = new IR([\n\t\t\tnew IR(`${indent}__core__chooseData(e, `, this.site),\n\t\t\tnew IR(cases.map(c => assertDefined(c))).join(\", \"),\n\t\t\tnew IR(`${indent})`)\n\t\t]);\n\n\t\tif (this.defaultCase !== null) {\n\t\t\tres = new IR([\n\t\t\t\tnew IR(`${indent}(def) -> {\\n`),\n\t\t\t\tres,\n\t\t\t\tnew IR(`\\n${indent}}(`),\n\t\t\t\tthis.defaultCase.toIR(indent),\n\t\t\t\tnew IR(`)`)\n\t\t\t]);\n\t\t}\n\n\t\tres = new IR([\n\t\t\tnew IR(`${indent}(e) -> {\\n`),\n\t\t\tres,\n\t\t\tnew IR(\"(e)\"),\n\t\t\tnew IR(`${indent}}(`),\n\t\t\tthis.controlExpr.toIR(indent),\n\t\t\tnew IR(\")\")\n\t\t]);\n\n\t\treturn res;\n\t}\n}\n\n\n////////////////////////////////\n// Section 16: Literal functions\n////////////////////////////////\n\n/**\n * @package\n * @param {Site} site\n * @param {Type} type - expected type\n * @param {any} value - result of JSON.parse(string)\n * @param {string} path - context for debugging\n * @returns {ValueExpr}\n */\nfunction buildLiteralExprFromJson(site, type, value, path) {\n\tif (value === null) {\n\t\tthrow site.typeError(`expected non-null value for parameter '${path}'`);\n\t} else if (type instanceof BoolType) {\n\t\tif (typeof value == \"boolean\") {\n\t\t\treturn new PrimitiveLiteralExpr(new BoolLiteral(site, value));\n\t\t} else {\n\t\t\tthrow site.typeError(`expected boolean for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof StringType) {\n\t\tif (typeof value == \"string\") {\n\t\t\treturn new PrimitiveLiteralExpr(new StringLiteral(site, value));\n\t\t} else {\n\t\t\tthrow site.typeError(`expected string for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof IntType) {\n\t\tif (typeof value == \"number\") {\n\t\t\tif (value%1 == 0.0) {\n\t\t\t\treturn new PrimitiveLiteralExpr(new IntLiteral(site, BigInt(value)));\n\t\t\t} else {\n\t\t\t\tthrow site.typeError(`expected round number for parameter '${path}', got '${value}'`);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow site.typeError(`expected number for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof ByteArrayType || type instanceof HashType) {\n\t\tif (value instanceof Array) {\n\t\t\t/**\n\t\t\t * @type {number[]}\n\t\t\t */\n\t\t\tconst bytes = [];\n\n\t\t\tfor (let item of value) {\n\t\t\t\tif (typeof item == \"number\" && item%1 == 0.0 && item >= 0 && item < 256) {\n\t\t\t\t\tbytes.push(item);\n\t\t\t\t} else {\n\t\t\t\t\tthrow site.typeError(`expected uint8[] for parameter '${path}', got '${value}'`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {ValueExpr} */\n\t\t\tlet litExpr = new PrimitiveLiteralExpr(new ByteArrayLiteral(site, bytes));\n\n\t\t\tif (type instanceof HashType) {\n\t\t\t\tlitExpr = new CallExpr(site, new ValuePathExpr(new TypeRefExpr(new Word(site, type.toString()), type), new Word(site, \"new\")), [new CallArgExpr(litExpr.site, null, litExpr)]);\n\t\t\t}\n\n\t\t\treturn litExpr;\n\t\t} else {\n\t\t\tthrow site.typeError(`expected array for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof ListType) {\n\t\tif (value instanceof Array) {\n\t\t\t/**\n\t\t\t * @type {ValueExpr[]}\n\t\t\t */\n\t\t\tconst items = [];\n\n\t\t\tfor (let item of value) {\n\t\t\t\titems.push(buildLiteralExprFromJson(site, type.itemType, item, path + \"[]\"));\n\t\t\t}\n\n\t\t\treturn new ListLiteralExpr(site, new TypeExpr(site, type.itemType), items);\n\t\t} else {\n\t\t\tthrow site.typeError(`expected array for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof MapType) {\n\t\t/**\n\t\t * @type {[ValueExpr, ValueExpr][]}\n\t\t */\n\t\tconst pairs = [];\n\n\t\tif (value instanceof Object && type.keyType instanceof StringType) {\n\t\t\tfor (let key in value) {\n\t\t\t\tpairs.push([new PrimitiveLiteralExpr(new StringLiteral(site, key)), buildLiteralExprFromJson(site, type.valueType, value[key], path + \".\" + key)]);\n\t\t\t}\n\t\t} else if (value instanceof Array) {\n\t\t\tfor (let item of value) {\n\t\t\t\tif (item instanceof Array && item.length == 2) {\n\t\t\t\t\tpairs.push([\n\t\t\t\t\t\tbuildLiteralExprFromJson(site, type.keyType, item[0], path + \"[0]\"),\n\t\t\t\t\t\tbuildLiteralExprFromJson(site, type.valueType, item[1], path + \"[1]\"),\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow site.typeError(`expected array of pairs for parameter '${path}', got '${value}'`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow site.typeError(`expected array or object for parameter '${path}', got '${value}'`);\n\t\t}\n\n\t\treturn new MapLiteralExpr(\n\t\t\tsite, \n\t\t\tnew TypeExpr(site, type.keyType), \n\t\t\tnew TypeExpr(site, type.valueType),\n\t\t\tpairs\n\t\t);\n\t} else if (type instanceof StructStatementType || type instanceof EnumMemberStatementType) {\n\t\tif (value instanceof Object) {\n\t\t\tconst nFields = type.statement.nFields(site);\n\n\t\t\t/**\n\t\t\t * @type {StructLiteralField[]}\n\t\t\t */\n\t\t\tconst fields = new Array(nFields);\n\n\t\t\tconst nActual = Object.entries(value).length;\n\n\t\t\tif (nFields != nActual) {\n\t\t\t\tthrow site.typeError(`expected object with ${nFields.toString} fields for parameter '${path}', got '${value}' with ${nActual.toString()} fields`);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < nFields; i++) {\n\t\t\t\tconst key = type.statement.getFieldName(i);\n\n\t\t\t\tconst subValue = value[key];\n\n\t\t\t\tif (subValue === undefined) {\n\t\t\t\t\tthrow site.typeError(`expected object with key '${key}' for parameter '${path}', got '${value}`);\n\t\t\t\t}\n\n\t\t\t\tconst fieldType = type.statement.getFieldType(site, i);\n\n\t\t\t\tconst valueExpr = buildLiteralExprFromJson(site, fieldType, subValue, path + \".\" + key);\n\n\t\t\t\tfields[i] = new StructLiteralField(nFields == 1 ? null : new Word(site, key), valueExpr);\n\t\t\t}\n\n\t\t\treturn new StructLiteralExpr(new TypeExpr(site, type), fields);\n\t\t} else {\n\t\t\tthrow site.typeError(`expected object for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else {\n\t\tthrow site.typeError(`unhandled parameter type '${type.toString()}', for parameter ${path}`);\n\t}\n}\n\n/**\n * @package\n * @param {Site} site\n * @param {Type} type - expected type\n * @param {UplcValue} value \n * @param {string} path - context for debugging\n * @returns {ValueExpr}\n */\nfunction buildLiteralExprFromValue(site, type, value, path) {\n\tif (type instanceof BoolType) {\n\t\tif (value instanceof UplcBool) {\n\t\t\treturn new PrimitiveLiteralExpr(new BoolLiteral(site, value.bool));\n\t\t} else {\n\t\t\tthrow site.typeError(`expected UplcBool for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof StringType) {\n\t\tif (value instanceof UplcDataValue && value.data instanceof ByteArrayData) {\n\t\t\treturn new PrimitiveLiteralExpr(new StringLiteral(site, bytesToText(value.data.bytes)));\n\t\t} else {\n\t\t\tthrow site.typeError(`expected ByteArrayData for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof IntType) {\n\t\tif (value instanceof UplcDataValue && value.data instanceof IntData) {\n\t\t\treturn new PrimitiveLiteralExpr(new IntLiteral(site, value.data.value));\n\t\t} else {\n\t\t\tthrow site.typeError(`expected IntData for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof ByteArrayType) {\n\t\tif (value instanceof UplcDataValue && value.data instanceof ByteArrayData) {\n\t\t\treturn new PrimitiveLiteralExpr(new ByteArrayLiteral(site, value.data.bytes));\n\t\t} else {\n\t\t\tthrow site.typeError(`expected ByteArrayData for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof ListType) {\n\t\tif (value instanceof UplcDataValue && value.data instanceof ListData) {\n\t\t\t/**\n\t\t\t * @type {ValueExpr[]}\n\t\t\t */\n\t\t\tconst items = [];\n\n\t\t\tfor (let data of value.data.list) {\n\t\t\t\titems.push(buildLiteralExprFromValue(site, type.itemType, new UplcDataValue(site, data), path + \"[]\"));\n\t\t\t}\n\n\t\t\treturn new ListLiteralExpr(site, new TypeExpr(site, type.itemType), items);\n\t\t} else {\n\t\t\tthrow site.typeError(`expected ListData for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof MapType) {\n\t\tif (value instanceof UplcDataValue && value.data instanceof MapData) {\n\t\t\t/**\n\t\t\t * @type {[ValueExpr, ValueExpr][]}\n\t\t\t */\n\t\t\tconst pairs = [];\n\n\t\t\tfor (let dataPair of value.data.map) {\n\t\t\t\tconst keyExpr = buildLiteralExprFromValue(site, type.keyType, new UplcDataValue(site, dataPair[0]), path + \"{key}\");\n\t\t\t\tconst valueExpr = buildLiteralExprFromValue(site, type.valueType, new UplcDataValue(site, dataPair[1]), path + \"{value}\");\n\n\t\t\t\tpairs.push([keyExpr, valueExpr]);\n\t\t\t}\n\n\t\t\treturn new MapLiteralExpr(\n\t\t\t\tsite, \n\t\t\t\tnew TypeExpr(site, type.keyType), \n\t\t\t\tnew TypeExpr(site, type.valueType),\n\t\t\t\tpairs\n\t\t\t);\n\t\t} else {\n\t\t\tthrow site.typeError(`expected ListData for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else if (type instanceof StructStatementType || type instanceof EnumMemberStatementType) {\n\t\tif (value instanceof UplcDataValue && value.data instanceof ConstrData) {\n\t\t\tconst nFields = type.statement.nFields(site);\n\t\t\t/**\n\t\t\t * @type {StructLiteralField[]}\n\t\t\t */\n\t\t\tconst fields = new Array(nFields);\n\n\t\t\tif (nFields != value.data.fields.length) {\n\t\t\t\tthrow site.typeError(`expected ConstrData with ${nFields.toString} fields for parameter '${path}', got '${value}' with ${value.data.fields.length.toString()} fields`);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < nFields; i++) {\n\t\t\t\tconst f = value.data.fields[i];\n\n\t\t\t\tconst fieldType = type.statement.getFieldType(site, i);\n\n\t\t\t\tconst valueExpr = buildLiteralExprFromValue(site, fieldType, new UplcDataValue(site, f), path + \".\" + i.toString());\n\n\t\t\t\tfields[i] = new StructLiteralField(nFields == 1 ? null : new Word(site, type.statement.getFieldName(i)), valueExpr);\n\t\t\t}\n\n\t\t\treturn new StructLiteralExpr(new TypeExpr(site, type), fields);\n\t\t} else {\n\t\t\tthrow site.typeError(`expected ConstrData for parameter '${path}', got '${value}'`);\n\t\t}\n\t} else {\n\t\tthrow site.typeError(`unhandled parameter type '${type.toString()}', for parameter ${path}`);\n\t}\n}\n\n\n////////////////////////////////////\n// Section 17: Helios AST statements\n////////////////////////////////////\n\n/**\n * Base class for all statements\n * Doesn't return a value upon calling eval(scope)\n * @package\n */\nclass Statement extends Token {\n\t#name;\n\t#used;\n\t#basePath; // set by the parent Module\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name \n\t */\n\tconstructor(site, name) {\n\t\tsuper(site);\n\t\tthis.#name = name;\n\t\tthis.#used = false;\n\t\tthis.#basePath = \"__user\";\n\t}\n\n\t/**\n\t * @param {string} basePath \n\t */\n\tsetBasePath(basePath) {\n\t\tthis.#basePath = basePath;\n\t}\n\n\tget path() {\n\t\treturn `${this.#basePath}__${this.name.toString()}`;\n\t}\n\n\t/**\n\t * @type {Word}\n\t */\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\t/**\n\t * @type {boolean}\n\t */\n\tget used() {\n\t\treturn this.#used;\n\t}\n\n\t/**\n\t * @param {ModuleScope} scope \n\t */\n\teval(scope) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\tuse() {\n\t\tthis.#used = true;\n\t}\n\n\t/**\n\t * @param {Uint8Array} mask\n\t */\n\thideUnused(mask) {\n\t\tif (!this.#used) {\n\t\t\tif (this.site.endSite === null) {\n\t\t\t\tmask.fill(0, this.site.startPos);\n\t\t\t} else {\n\t\t\t\tmask.fill(0, this.site.startPos, this.site.endSite.startPos);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns IR of statement.\n\t * No need to specify indent here, because all statements are top-level\n\t * @param {IRDefinitions} map \n\t */\n\ttoIR(map) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Each field is given a separate ImportStatement\n * @package\n */\nclass ImportStatement extends Statement {\n\t#origName;\n\t#moduleName;\n\n\t/** \n\t * @type {?Statement} \n\t */\n\t#origStatement;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name\n\t * @param {Word} origName\n\t * @param {Word} moduleName\n\t */\n\tconstructor(site, name, origName, moduleName) {\n\t\tsuper(site, name);\n\t\tthis.#origName = origName;\n\t\tthis.#moduleName = moduleName;\n\t\tthis.#origStatement = null;\n\t}\n\n\t/**\n\t * @type {Word}\n\t */\n\tget moduleName() {\n\t\treturn this.#moduleName;\n\t}\n\n\t/**\n\t * @type {Statement}\n\t */\n\tget origStatement() {\n\t\tif (this.#origStatement == null) {\n\t\t\tthrow new Error(\"should be set\");\n\t\t} else {\n\t\t\treturn this.#origStatement;\n\t\t}\n\t}\n\n\t/**\n\t * @param {ModuleScope} scope\n\t * @returns {EvalEntity}\n\t */\n\tevalInternal(scope) {\n\t\tlet importedScope = scope.get(this.#moduleName);\n\n\t\tif (importedScope instanceof Scope) {\n\t\t\tlet importedEntity = importedScope.get(this.#origName);\n\n\t\t\tif (importedEntity instanceof Scope) {\n\t\t\t\tthrow this.#origName.typeError(`can't import a module from a module`);\n\t\t\t} else {\n\t\t\t\treturn importedEntity;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow this.#moduleName.typeError(`${this.name.toString()} isn't a module`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {ModuleScope} scope \n\t */\n\teval(scope) {\n\t\tlet v = this.evalInternal(scope);\n\n\t\tif (v instanceof FuncStatementInstance || v instanceof ConstStatementInstance || v instanceof StatementType) {\n\t\t\tthis.#origStatement = assertClass(v.statement, Statement);\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected import entity\");\n\t\t}\n\n\t\tscope.set(this.name, v);\n\t}\n\n\tuse() {\n\t\tsuper.use();\n\n\t\tif (this.#origStatement === null) {\n\t\t\tthrow new Error(\"should be set\");\n\t\t} else {\n\t\t\tthis.#origStatement.use();\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRDefinitions} map \n\t */\n\ttoIR(map) {\n\t\t// import statements only have a scoping function and don't do anything to the IR\n\t}\n}\n\n/**\n * Const value statement\n * @package\n */\nclass ConstStatement extends Statement {\n\t/**\n\t * @type {?TypeExpr}\n\t */\n\t#typeExpr;\n\n\t/**\n\t * @type {ValueExpr}\n\t */\n\t#valueExpr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name \n\t * @param {?TypeExpr} typeExpr - can be null in case of type inference\n\t * @param {ValueExpr} valueExpr \n\t */\n\tconstructor(site, name, typeExpr, valueExpr) {\n\t\tsuper(site, name);\n\t\tthis.#typeExpr = typeExpr;\n\t\tthis.#valueExpr = valueExpr;\n\t}\n\n\tget type() {\n\t\tif (this.#typeExpr === null) {\n\t\t\treturn this.#valueExpr.type;\n\t\t} else {\n\t\t\treturn this.#typeExpr.type;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string | UplcValue} value \n\t */\n\tchangeValue(value) {\n\t\tlet type = this.type;\n\t\tlet site = this.#valueExpr.site;\n\n\t\tif (typeof value == \"string\") {\n\t\t\tthis.#valueExpr = buildLiteralExprFromJson(site, type, JSON.parse(value), this.name.value);\n\t\t} else {\n\t\t\tthis.#valueExpr = buildLiteralExprFromValue(site, type, value, this.name.value);\n\t\t}\n\t}\n\n\t/**\n\t * Use this to change a value of something that is already typechecked.\n\t * @param {UplcData} data\n\t */\n\tchangeValueSafe(data) {\n\t\tconst type = this.type;\n\t\tconst site = this.#valueExpr.site;\n\n\t\tif ((new BoolType()).isBaseOf(site, type)) {\n\t\t\tthis.#valueExpr = new PrimitiveLiteralExpr(new BoolLiteral(site, data.index == 1));\n\t\t} else {\n\t\t\tthis.#valueExpr = new LiteralDataExpr(site, type, data);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `const ${this.name.toString()}${this.#typeExpr === null ? \"\" : \": \" + this.#typeExpr.toString()} = ${this.#valueExpr.toString()};`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\tlet value = this.#valueExpr.eval(scope);\n\n\t\t/** @type {Type} */\n\t\tlet type;\n\n\t\tif (this.#typeExpr === null) {\n\t\t\tif (!this.#valueExpr.isLiteral()) {\n\t\t\t\tthrow this.typeError(\"can't infer type\");\n\t\t\t}\n\n\t\t\ttype = this.#valueExpr.type;\n\t\t} else {\n\t\t\ttype = this.#typeExpr.eval(scope);\n\n\t\t\tif (!value.isInstanceOf(this.#valueExpr.site, type)) {\n\t\t\t\tthrow this.#valueExpr.typeError(\"wrong type\");\n\t\t\t}\n\t\t}\n\n\t\treturn new ConstStatementInstance(type, this);\n\t}\n\n\t/**\n\t * Evaluates rhs and adds to scope\n\t * @param {TopScope} scope \n\t */\n\teval(scope) {\n\t\tscope.set(this.name, this.evalInternal(scope));\n\t}\n\n\tuse() {\n\t\tif (!this.used) {\n\t\t\tsuper.use();\n\n\t\t\tthis.#valueExpr.use();\n\n\t\t\tif (this.#typeExpr !== null) {\n\t\t\t\tthis.#typeExpr.use();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {IR}\n\t */\n\ttoIRInternal() {\n\t\treturn new IR([\n\t\t\tnew IR(\"const(\", this.site),\n\t\t\tthis.#valueExpr.toIR(),\n\t\t\tnew IR(\")\")\n\t\t])\n\t\t\n\t}\n\n\t/**\n\t * @param {IRDefinitions} map \n\t */\n\ttoIR(map) {\n\t\tmap.set(this.path, this.toIRInternal());\n\t}\n}\n\n/**\n * Single field in struct or enum member\n * @package\n */\nclass DataField extends NameTypePair {\n\t/**\n\t * @param {Word} name \n\t * @param {TypeExpr} typeExpr \n\t */\n\tconstructor(name, typeExpr) {\n\t\tsuper(name, typeExpr);\n\t}\n}\n\n/**\n * Base class for struct and enum member\n * @package\n */\nclass DataDefinition extends Statement {\n\t#fields;\n\n\t/** @type {Set<string>} */\n\t#usedAutoMethods;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name \n\t * @param {DataField[]} fields \n\t */\n\tconstructor(site, name, fields) {\n\t\tsuper(site, name);\n\t\tthis.#fields = fields;\n\t\tthis.#usedAutoMethods = new Set();\n\t}\n\n\t/**\n\t * @type {Type}\n\t */\n\tget type() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\tget fields() {\n\t\treturn this.#fields.slice();\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Returns index of a field.\n\t * Returns -1 if not found.\n\t * @param {Word} name \n\t * @returns {number}\n\t */\n\tfindField(name) {\n\t\tlet found = -1;\n\t\tlet i = 0;\n\t\tfor (let f of this.#fields) {\n\t\t\tif (f.name.toString() == name.toString()) {\n\t\t\t\tfound = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\n\t\treturn found;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {boolean}\n\t */\n\thasField(name) {\n\t\treturn this.findField(name) != -1;\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {boolean}\n\t */\n\thasMember(name) {\n\t\treturn this.hasField(name) || name.value == \"copy\";\n\t}\n\n\ttoString() {\n\t\treturn `${this.name.toString()} {${this.#fields.map(f => f.toString()).join(\", \")}}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope\n\t */\n\tevalInternal(scope) {\n\t\tfor (let f of this.#fields) {\n\t\t\tlet fieldType = f.evalType(scope);\n\n\t\t\tif (fieldType instanceof FuncType) {\n\t\t\t\tthrow f.site.typeError(\"field can't be function type\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\treturn this.#fields.length;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {number} i \n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\treturn this.#fields[i].type;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} name \n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tconst i = this.findField(new Word(Site.dummy(), name));\n\n\t\tif (i == -1) {\n\t\t\tthrow site.typeError(`field ${name} not find in ${this.toString()}`);\n\t\t} else {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} i\n\t * @returns {string}\n\t */\n\tgetFieldName(i) {\n\t\treturn this.#fields[i].name.toString();\n\t}\n\t\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\tthrow site.typeError(`'${this.name.value}' isn't an enum type`);\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name) {\n\t\tif (this.hasField(name)) {\n\t\t\tthrow name.referenceError(`'${this.name.toString()}::${name.toString()}' undefined (did you mean '${this.name.toString()}.${name.toString()}'?)`);\n\t\t} else {\n\t\t\tthrow name.referenceError(`'${this.name.toString()}::${name.toString()}' undefined`);\n\t\t}\n\t}\n\n\t/**\n\t * Gets insance member value.\n\t * If dryRun == true usage is triggered\n\t * @param {Word} name \n\t * @param {boolean} dryRun \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name, dryRun = false) {\n\t\tswitch (name.value) {\n\t\t\tcase \"copy\":\n\t\t\t\tthis.#usedAutoMethods.add(name.value);\n\t\t\t\treturn Instance.new(new FuncType(this.#fields.map(f => new ArgType(f.name, f.type, true)), this.type));\n\t\t\tdefault:\n\t\t\t\tlet i = this.findField(name);\n\n\t\t\t\tif (i == -1) {\n\t\t\t\t\tthrow name.referenceError(`'${this.name.toString()}.${name.toString()}' undefined`);\n\t\t\t\t} else {\n\t\t\t\t\treturn Instance.new(this.#fields[i].type);\n\t\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tuse() {\n\t\tif (!this.used) {\n\t\t\tsuper.use();\n\t\t\t\n\t\t\tfor (let f of this.#fields) {\n\t\t\t\tf.use();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {IRDefinitions} map \n\t * @param {string[]} getterNames\n\t */\n\tcopyToIR(map, getterNames) {\n\t\tconst key = `${this.path}__copy`;\n\n\t\t// using existing IR generators as much as possible\n\n\t\tlet ir = StructLiteralExpr.toIRInternal(this.site, this.type, this.#fields.map(df => new IR(df.name.value)), this.getConstrIndex(this.site));\n\n\t\t// wrap with defaults\n\n\t\tfor (let i = getterNames.length - 1; i >= 0; i--) {\n\t\t\tconst fieldName = this.#fields[i].name.toString();\n\n\t\t\tir = FuncArg.wrapWithDefaultInternal(ir, fieldName, new IR([\n\t\t\t\tnew IR(getterNames[i]),\n\t\t\t\tnew IR(\"(self)\")\n\t\t\t]))\n\t\t}\n\n\t\tir = new IR([\n\t\t\tnew IR(\"(self) -> {\"),\n\t\t\tnew IR(\"(\"),\n\t\t\tnew IR(this.#fields.map(f => new IR(`__useopt__${f.name.toString()}, ${f.name.toString()}`))).join(\", \"),\n\t\t\tnew IR(\") -> {\"),\n\t\t\tir,\n\t\t\tnew IR(\"}}\")\n\t\t]);\n\n\t\tmap.set(key, ir);\n\t}\n\n\t/**\n\t * Doesn't return anything, but sets its IRdef in the map\n\t * @param {IRDefinitions} map\n\t * @param {boolean} isConstr\n\t */\n\ttoIR(map, isConstr = true) {\n\t\tconst getterBaseName = isConstr ? \"__helios__common__field\" : \"__helios__common__tuple_field\";\n\n\t\t/**\n\t\t * @type {string[]}\n\t\t */\n\t\tconst getterNames = [];\n\n\t\t// add a getter for each field\n\t\tfor (let i = 0; i < this.#fields.length; i++) {\n\t\t\tlet f = this.#fields[i];\n\t\t\tlet key = `${this.path}__${f.name.toString()}`;\n\t\t\tgetterNames.push(key);\n\t\t\tlet isBool = f.type instanceof BoolType;\n\n\t\t\t/**\n\t\t\t * @type {IR}\n\t\t\t */\n\t\t\tlet getter;\n\n\t\t\tif (i < 20) {\n\n\t\t\t\tgetter = new IR(`${getterBaseName}_${i}`, f.site);\n\n\t\t\t\tif (isBool) {\n\t\t\t\t\tgetter = new IR([\n\t\t\t\t\t\tnew IR(\"(self) \"), new IR(\"->\", f.site), new IR(\" {\"),\n\t\t\t\t\t\tnew IR(`__helios__common__unBoolData(${getterBaseName}_${i}(self))`),\n\t\t\t\t\t\tnew IR(\"}\"),\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet inner = isConstr ? new IR(\"__core__sndPair(__core__unConstrData(self))\") : new IR(\"__core__unListData(self)\");\n\n\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\tinner = new IR([new IR(\"__core__tailList(\"), inner, new IR(\")\")]);\n\t\t\t\t}\n\n\t\t\t\tinner = new IR([\n\t\t\t\t\tnew IR(\"__core__headList(\"),\n\t\t\t\t\tinner,\n\t\t\t\t\tnew IR(\")\"),\n\t\t\t\t]);\n\n\t\t\t\tif (isBool) {\n\t\t\t\t\tinner = new IR([new IR(\"__helios__common__unBoolData(\"), inner, new IR(\")\")]);\n\t\t\t\t}\n\n\t\t\t\tgetter = new IR([\n\t\t\t\t\tnew IR(\"(self) \"), new IR(\"->\", f.site), new IR(\" {\"),\n\t\t\t\t\tinner,\n\t\t\t\t\tnew IR(\"}\"),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tmap.set(key, getter)\n\t\t}\n\n\t\tif (this.#usedAutoMethods.has(\"copy\")) {\n\t\t\tthis.copyToIR(map, getterNames);\n\t\t}\n\t}\n}\n\n/**\n * Struct statement\n * @package\n */\nclass StructStatement extends DataDefinition {\n\t#impl;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name \n\t * @param {DataField[]} fields \n\t * @param {ImplDefinition} impl\n\t */\n\tconstructor(site, name, fields, impl) {\n\t\tsuper(site, name, fields);\n\n\t\tthis.#impl = impl;\n\t}\n\n\tget type() {\n\t\treturn new StructStatementType(this);\n\t}\n\n\ttoString() {\n\t\treturn \"struct \" + super.toString();\n\t}\n\n\t/**\n\t * Returns -1, which means -> don't use ConstrData, but use []Data directly\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Evaluates own type and adds to scope\n\t * @param {TopScope} scope \n\t */\n\teval(scope) {\n\t\tif (scope.isStrict() && this.fields.length == 0) {\n\t\t\tthrow this.syntaxError(\"expected at least 1 struct field\");\n\t\t}\n\n\t\t// add before so recursive types are possible\n\t\tscope.set(this.name, this.type);\n\n\t\tthis.evalInternal(scope);\n\n\t\t// check the types of the member methods\n\t\tthis.#impl.eval(scope);\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @param {boolean} dryRun \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name, dryRun = false) {\n\t\tif (super.hasMember(name)) {\n\t\t\treturn super.getInstanceMember(name, dryRun);\n\t\t} else {\n\t\t\treturn this.#impl.getInstanceMember(name, dryRun);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name\n\t * @param {boolean} dryRun\n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name, dryRun = false) {\n\t\t// only the impl can contain potentially contain type members\n\t\treturn this.#impl.getTypeMember(name, dryRun);\n\t}\n\n\t/**\n\t * @param {Uint8Array} mask\n\t */\n\thideUnused(mask) {\n\t\tsuper.hideUnused(mask);\n\n\t\tthis.#impl.hideUnused(mask);\n\t}\n\n\t/**\n\t * @param {IRDefinitions} map\n\t */\n\ttoIR(map) {\n\t\tif (this.fields.length == 1) {\n\t\t\tlet f = this.fields[0];\n\t\t\tlet key = `${this.path}__${f.name.toString()}`;\n\t\t\tlet isBool = f.type instanceof BoolType;\n\n\t\t\tif (isBool) {\n\t\t\t\tmap.set(key, new IR(\"__helios__common__unBoolData\", f.site));\n\t\t\t} else {\n\t\t\t\tmap.set(key, new IR(\"__helios__common__identity\", f.site));\n\t\t\t}\n\t\t} else {\n\t\t\tsuper.toIR(map, false);\n\t\t}\n\n\t\tthis.#impl.toIR(map);\n\t}\n}\n\n/**\n * Function statement\n * (basically just a named FuncLiteralExpr)\n * @package\n */\nclass FuncStatement extends Statement {\n\t#funcExpr;\n\t#recursive;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name \n\t * @param {FuncLiteralExpr} funcExpr \n\t */\n\tconstructor(site, name, funcExpr) {\n\t\tsuper(site, name);\n\t\tthis.#funcExpr = funcExpr;\n\t\tthis.#recursive = false;\n\t}\n\n\t/**\n\t * @type {Type[]}\n\t */\n\tget argTypes() {\n\t\treturn this.#funcExpr.argTypes;\n\t}\n\n\t/**\n\t * @type {string[]}\n\t */\n\tget argTypeNames() {\n\t\treturn this.#funcExpr.argTypeNames;\n\t}\n\n\t/**\n\t * @type {Type[]}\n\t */\n\tget retTypes() {\n\t\treturn this.#funcExpr.retTypes;\n\t}\n\n\ttoString() {\n\t\treturn `func ${this.name.toString()}${this.#funcExpr.toString()}`;\n\t}\n\n\t/**\n\t * Evaluates a function and returns a func value\n\t * @param {Scope} scope \n\t * @returns {Instance}\n\t */\n\tevalInternal(scope) {\n\t\treturn this.#funcExpr.evalInternal(scope);\n\t}\n\n\t/**\n\t * Evaluates type of a funtion.\n\t * Separate from evalInternal so we can use this function recursively inside evalInternal\n\t * @param {Scope} scope \n\t * @returns {FuncType}\n\t */\n\tevalType(scope) {\n\t\treturn this.#funcExpr.evalType(scope);\n\t}\n\n\tuse() {\n\t\tif (!this.used) {\n\t\t\tsuper.use();\n\n\t\t\tthis.#funcExpr.use();\n\t\t}\n\t}\n\n\tisRecursive() {\n\t\treturn this.#recursive;\n\t}\n\n\t/**\n\t * Called in FuncStatementScope as soon as recursion is detected\n\t */\n\tsetRecursive() {\n\t\tthis.#recursive = true;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t */\n\teval(scope) {\n\t\t// add to scope before evaluating, to allow recursive calls\n\n\t\tlet fnType = this.evalType(scope);\n\n\t\tlet fnVal = new FuncStatementInstance(fnType, this);\n\n\t\tscope.set(this.name, fnVal);\n\n\t\tvoid this.#funcExpr.evalInternal(new FuncStatementScope(scope, this));\n\t}\n\n\t/**\n\t * Returns IR of function.\n\t * @param {string} fullName - fullName has been prefixed with a type path for impl members\n\t * @returns {IR}\n\t */\n\ttoIRInternal(fullName = this.path) {\n\t\tif (this.#recursive) {\n\t\t\treturn this.#funcExpr.toIRRecursive(fullName, TAB);\n\t\t} else {\n\t\t\treturn this.#funcExpr.toIR(TAB);\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRDefinitions} map \n\t */\n\ttoIR(map) {\n\t\tmap.set(this.path, this.toIRInternal());\n\t}\n\n\t/**\n\t * @param {Statement} s \n\t * @returns {boolean}\n\t */\n\tstatic isMethod(s) {\n\t\tif (s instanceof FuncStatement) {\n\t\t\treturn s.#funcExpr.isMethod();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * EnumMember defintion is similar to a struct definition\n * @package\n */\nclass EnumMember extends DataDefinition {\n\t/** @type {?EnumStatement} */\n\t#parent;\n\n\t/** @type {?number} */\n\t#constrIndex;\n\n\t/**\n\t * @param {Word} name\n\t * @param {DataField[]} fields\n\t */\n\tconstructor(name, fields) {\n\t\tsuper(name.site, name, fields);\n\t\tthis.#parent = null; // registered later\n\t\tthis.#constrIndex = null;\n\t}\n\n\t/** \n\t * @param {EnumStatement} parent\n\t * @param {number} i\n\t*/\n\tregisterParent(parent, i) {\n\t\tthis.#parent = parent;\n\t\tthis.#constrIndex = i;\n\t}\n\t\n\t/**\n\t * @type {EnumStatement}\n\t */\n\tget parent() {\n\t\tif (this.#parent === null) {\n\t\t\tthrow new Error(\"parent not yet registered\");\n\t\t} else {\n\t\t\treturn this.#parent;\n\t\t}\n\t}\n\n\tget type() {\n\t\treturn new EnumMemberStatementType(this);\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\tif (this.#constrIndex === null) {\n\t\t\tthrow new Error(\"constrIndex not set\");\n\t\t} else {\n\t\t\treturn this.#constrIndex;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t */\n\teval(scope) {\n\t\tif (this.#parent === null) {\n\t\t\tthrow new Error(\"parent should've been registered\");\n\t\t}\n\n\t\tsuper.evalInternal(scope); // the internally created type isn't be added to the scope. (the parent enum type takes care of that)\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @param {boolean} dryRun \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name, dryRun = false) {\n\t\tif (this.hasField(name)) {\n\t\t\treturn super.getInstanceMember(name, dryRun);\n\t\t} else {\n\t\t\tif (this.#parent === null) {\n\t\t\t\tthrow new Error(\"parent should've been registered\");\n\t\t\t} else {\n\t\t\t\treturn this.#parent.getInstanceMember(name, dryRun);\n\t\t\t}\n\t\t}\n\t}\n\n\tget path() {\n\t\treturn `${this.parent.path}__${this.name.toString()}`;\n\t}\n}\n\n/**\n * Enum statement, containing at least one member\n * @package\n */\nclass EnumStatement extends Statement {\n\t#members;\n\t#impl;\n\n\t/**\n\t * @param {Site} site \n\t * @param {Word} name \n\t * @param {EnumMember[]} members \n\t * @param {ImplDefinition} impl\n\t */\n\tconstructor(site, name, members, impl) {\n\t\tsuper(site, name);\n\t\tthis.#members = members;\n\t\tthis.#impl = impl;\n\t\t\n\t\tfor (let i = 0; i < this.#members.length; i++) {\n\t\t\tthis.#members[i].registerParent(this, i);\n\t\t}\n\t}\n\n\tget type() {\n\t\treturn new EnumStatementType(this);\n\t}\n\n\t/**\n\t * Returns index of enum member.\n\t * Returns -1 if not found\n\t * @param {Word} name \n\t * @returns {number}\n\t */\n\t// returns an index\n\tfindEnumMember(name) {\n\t\tlet found = -1;\n\t\tlet i = 0;\n\t\tfor (let member of this.#members) {\n\t\t\tif (member.name.toString() == name.toString()) {\n\t\t\t\tfound = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\n\t\treturn found;\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @param {number} i\n\t * @returns {EnumMember}\n\t */\n\tgetEnumMember(site, i) {\n\t\treturn assertDefined(this.#members[i]);\n\t}\n\n\t/**\n\t * @param {Word} name\n\t * @returns {boolean}\n\t */\n\thasEnumMember(name) {\n\t\treturn this.findEnumMember(name) != -1;\n\t}\n\n\ttoString() {\n\t\treturn `enum ${this.name.toString()} {${this.#members.map(m => m.toString()).join(\", \")}}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t */\n\teval(scope) {\n\t\tscope.set(this.name, this.type);\n\n\t\tthis.#members.forEach(m => {\n\t\t\tm.eval(scope);\n\t\t});\n\n\t\tthis.#impl.eval(scope);\n\t}\n\n\tuse() {\n\t\tif (!this.used) {\n\t\t\tsuper.use();\n\n\t\t\tfor (let m of this.#members) {\n\t\t\t\tm.use();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnFields(site) {\n\t\tthrow site.typeError(\"enum doesn't have fields\");\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {number} i\n\t * @returns {Type}\n\t */\n\tgetFieldType(site, i) {\n\t\tthrow site.typeError(\"enum doesn't have fields\");\n\t}\n\n\t/**f\n\t * @param {Site} site \n\t * @param {string} name \n\t * @returns {number}\n\t */\n\tgetFieldIndex(site, name) {\n\t\tthrow site.typeError(\"enum doesn't have fields\");\n\t}\n\n\t/**\n\t * @param {number} i \n\t * @returns {string}\n\t */\n\tgetFieldName(i) {\n\t\tthrow Site.dummy().typeError(\"enum doesn't have fields\");\n\t}\n\t\n    /**\n     * @param {Word} name \n     * @returns {boolean}\n     */\n    hasField(name) {\n        throw name.site.typeError(\"enum doesn't have fields\");\n    }\n\n\t/** \n\t * @param {Word} name \n\t * @param {boolean} dryRun \n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name, dryRun = false) {\n\t\tif (this.hasEnumMember(name)) {\n\t\t\tthrow name.referenceError(`'${name.toString()}' is an enum of '${this.toString}' (did you mean '${this.toString()}::${name.toString()}'?)`);\n\t\t} else {\n\t\t\treturn this.#impl.getInstanceMember(name, dryRun);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name \n\t * @param {boolean} dryRun\n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name, dryRun = false) {\n\t\tlet i = this.findEnumMember(name);\n\t\tif (i == -1) {\n\t\t\treturn this.#impl.getTypeMember(name, dryRun);\n\t\t} else {\n\t\t\treturn this.#members[i].type;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tgetConstrIndex(site) {\n\t\tthrow site.typeError(\"can't construct an enum directly (cast to a concrete type first)\");\n\t}\n\n\t/**\n\t * @param {Site} site \n\t * @returns {number}\n\t */\n\tnEnumMembers(site) {\n\t\treturn this.#members.length;\n\t}\n\n\t/**\n\t * @param {Uint8Array} mask\n\t */\n\thideUnused(mask) {\n\t\tsuper.hideUnused(mask);\n\n\t\tthis.#impl.hideUnused(mask);\n\t}\n\n\t/**\n\t * @param {IRDefinitions} map \n\t */\n\ttoIR(map) {\n\t\tfor (let member of this.#members) {\n\t\t\tmember.toIR(map);\n\t\t}\n\n\t\tthis.#impl.toIR(map);\n\t}\n}\n\n/**\n * Impl statements, which add functions and constants to registry of user types (Struct, Enum Member and Enums)\n * @package\n */\nclass ImplDefinition {\n\t#selfTypeExpr;\n\t#statements;\n\n\t/** @type {Instance[]} - filled during eval to allow same recursive behaviour as for top-level statements */\n\t#statementValues;\n\n\t/** @type {Set<string>} */\n\t#usedStatements;\n\n\t/**\n\t * @param {TypeRefExpr} selfTypeExpr;\n\t * @param {(FuncStatement | ConstStatement)[]} statements \n\t */\n\tconstructor(selfTypeExpr, statements) {\n\t\tthis.#selfTypeExpr = selfTypeExpr;\n\t\tthis.#statements = statements;\n\t\tthis.#statementValues = [];\n\t\tthis.#usedStatements = new Set(); // used for code-generation, but not for cleanSource filtering\n\t}\n\n\ttoString() {\n\t\treturn `${this.#statements.map(s => s.toString()).join(\"\\n\")}`;\n\t}\n\n\t/**\n\t * @param {Scope} scope \n\t */\n\teval(scope) {\n\t\tlet selfType = this.#selfTypeExpr.eval(scope);\n\n\t\tif (!(selfType instanceof StatementType)) {\n\t\t\tthrow this.#selfTypeExpr.referenceError(\"not a user-type\");\n\t\t} else {\n\t\t\tfor (let s of this.#statements) {\n\t\t\t\tif (s instanceof FuncStatement) {\n\t\t\t\t\t// override eval() of FuncStatement because we don't want the function to add itself to the scope directly.\n\t\t\t\t\tlet v = new FuncStatementInstance(s.evalType(scope), s);\n\n\t\t\t\t\tthis.#statementValues.push(v); // add func type to #statementValues in order to allow recursive calls (acts as a special scope)\n\n\t\t\t\t\t// eval internal doesn't add anything to scope\n\t\t\t\t\tvoid s.evalInternal(new FuncStatementScope(scope, s));\n\t\t\t\t} else {\n\t\t\t\t\t// eval internal doesn't add anything to scope\n\t\t\t\t\tthis.#statementValues.push(s.evalInternal(scope));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Word} name\n\t * @param {boolean} dryRun\n\t * @returns {Instance}\n\t */\n\tgetInstanceMember(name, dryRun = false) {\n\t\tswitch (name.value) {\n\t\t\tcase \"serialize\":\n\t\t\t\tthis.#usedStatements.add(name.toString());\n\t\t\t\treturn Instance.new(new FuncType([], new ByteArrayType()));\n\t\t\t\n\t\t\tdefault:\n\t\t\t\t// loop the contained statements to find one with name 'name'\n\t\t\t\tfor (let i = 0; i < this.#statementValues.length; i++) {\n\t\t\t\t\tlet s = this.#statements[i];\n\n\t\t\t\t\tif (name.toString() == s.name.toString()) {\n\t\t\t\t\t\tif (FuncStatement.isMethod(s)) {\n\t\t\t\t\t\t\tif (!dryRun) {\n\t\t\t\t\t\t\t\tthis.#usedStatements.add(name.toString());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn this.#statementValues[i];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow name.referenceError(`'${this.#selfTypeExpr.toString()}.${name.toString()}' isn't a method (did you mean '${this.#selfTypeExpr.toString()}::${name.toString()}'?)`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow name.referenceError(`'${this.#selfTypeExpr.toString()}.${name.toString()}' undefined`);\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {Word} name \n\t * @param {boolean} dryRun \n\t * @returns {EvalEntity}\n\t */\n\tgetTypeMember(name, dryRun = false) {\n\t\tswitch (name.value) {\n\t\t\tcase \"__eq\":\n\t\t\tcase \"__neq\":\n\t\t\t\tthis.#usedStatements.add(name.toString());\n\t\t\t\treturn Instance.new(new FuncType([this.#selfTypeExpr.type, this.#selfTypeExpr.type], new BoolType()));\n\t\t\tcase \"from_data\":\n\t\t\t\tthis.#usedStatements.add(name.toString());\n\t\t\t\treturn Instance.new(new FuncType([new RawDataType()], this.#selfTypeExpr.type));\n\t\t\tdefault:\n\t\t\t\tfor (let i = 0; i < this.#statementValues.length; i++) {\n\t\t\t\t\tlet s = this.#statements[i];\n\n\t\t\t\t\tif (name.toString() == s.name.toString()) {\n\t\t\t\t\t\tif (FuncStatement.isMethod(s)) {\n\t\t\t\t\t\t\tthrow name.referenceError(`'${this.#selfTypeExpr.toString()}::${name.value}' is a method (did you mean '${this.#selfTypeExpr.toString()}.${name.toString()}'?)`)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!dryRun) {\n\t\t\t\t\t\t\t\tthis.#usedStatements.add(name.toString());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn this.#statementValues[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow name.referenceError(`'${this.#selfTypeExpr.toString()}::${name.toString()}' undefined`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Uint8Array} mask\n\t */\n\thideUnused(mask) {\n\t\tfor (let s of this.#statements) {\n\t\t\tif (!s.used) {\n\t\t\t\tlet site = s.site;\n\n\t\t\t\tif (site.endSite === null) {\n\t\t\t\t\tmask.fill(0, site.startPos);\n\t\t\t\t} else {\n\t\t\t\t\tmask.fill(0, site.startPos, site.endSite.startPos);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns IR of all impl members\n\t * @param {IRDefinitions} map \n\t */\n\ttoIR(map) {\n\t\tlet path = this.#selfTypeExpr.path;\n\t\tlet site = this.#selfTypeExpr.site;\n\n\t\tif (this.#usedStatements.has(\"__eq\")) {\n\t\t\tmap.set(`${path}____eq`, new IR(\"__helios__common____eq\", site));\n\t\t}\n\n\t\tif (this.#usedStatements.has(\"__neq\")) {\n\t\t\tmap.set(`${path}____neq`, new IR(\"__helios__common____neq\", site));\n\t\t}\n\n\t\tif (this.#usedStatements.has(\"serialize\")) {\n\t\t\tmap.set(`${path}__serialize`, new IR(\"__helios__common__serialize\", site));\n\t\t}\n\n\t\tif (this.#usedStatements.has(\"from_data\")) {\n\t\t\tmap.set(`${path}__from_data`, new IR(\"__helios__common__identity\", site));\n\t\t}\n\n\t\tfor (let s of this.#statements) {\n\t\t\tlet key = `${path}__${s.name.toString()}`\n\t\t\tif (s instanceof FuncStatement) {\n\t\t\t\tmap.set(key, s.toIRInternal(key));\n\t\t\t} else {\n\t\t\t\tmap.set(key, s.toIRInternal());\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//////////////////////////////////\n// Section 18: Helios AST building\n//////////////////////////////////\n\nconst AUTOMATIC_METHODS = [\n\t\"__eq\",\n\t\"__neq\",\n\t\"copy\",\n\t\"from_data\",\n\t\"serialize\"\n];\n\n/**\n * @type {null | ((path: StringLiteral) => (string | null))}\n */\nlet importPathTranslator = null\n\n/**\n * Used by VSCode plugin\n * @param {(path: StringLiteral) => (string | null)} fn \n */\nfunction setImportPathTranslator(fn) {\n\timportPathTranslator = fn\n}\n\n/**\n * @package\n * @param {Token[]} ts\n * @returns {Statement[]}\n */\nfunction buildProgramStatements(ts) {\n\t/**\n\t * @type {Statement[]}\n\t */\n\tlet statements = [];\n\n\twhile (ts.length != 0) {\n\t\tconst t = ts.shift()?.assertWord();\n\n\t\tif (!t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst kw = t.value;\n\n\t\t/**\n\t\t * @type {Statement | (Statement | null)[] | null}\n\t\t */\n\t\tlet s = null;\n\n\t\tif (kw == \"const\") {\n\t\t\ts = buildConstStatement(t.site, ts);\n\t\t} else if (kw == \"struct\") {\n\t\t\ts = buildStructStatement(t.site, ts);\n\t\t} else if (kw == \"func\") {\n\t\t\ts = buildFuncStatement(t.site, ts);\n\t\t} else if (kw == \"enum\") {\n\t\t\ts = buildEnumStatement(t.site, ts);\n\t\t} else if (kw == \"import\") {\n\t\t\ts = buildImportStatements(t.site, ts);\n\t\t} else {\n\t\t\tt.syntaxError(`invalid top-level keyword '${kw}'`);\n\t\t}\n\n\t\tif (s) {\n\t\t\tif (Array.isArray(s)) {\n\t\t\t\tfor (let s_ of s) {\n\t\t\t\t\tif (s_) {\n\t\t\t\t\t\tstatements.push(s_);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstatements.push(s);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn statements;\n}\n\n/**\n * @package\n * @param {Token[]} ts\n * @param {null | number} expectedPurpose\n * @returns {[number, Word] | null} - [purpose, name] (ScriptPurpose is an integer)\n * @package\n */\nfunction buildScriptPurpose(ts, expectedPurpose = null) {\n\t// need at least 2 tokens for the script purpose\n\tif (ts.length < 2) {\n\n\t\tif (ts.length == 0) {\n\t\t\tSite.dummy().syntaxError(\"invalid script purpose syntax\");\n\t\t} else {\n\t\t\tts[0].syntaxError(\"invalid script purpose syntax\");\n\t\t\tts.splice(0);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tconst purposeWord = ts.shift()?.assertWord();\n\n\tif (!purposeWord) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {number | null}\n\t */\n\tlet purpose = null;\n\n\tif (purposeWord.isWord(\"spending\")) {\n\t\tpurpose = ScriptPurpose.Spending;\n\t} else if (purposeWord.isWord(\"minting\")) {\n\t\tpurpose = ScriptPurpose.Minting;\n\t} else if (purposeWord.isWord(\"staking\")) {\n\t\tpurpose = ScriptPurpose.Staking;\n\t} else if (purposeWord.isWord(\"testing\")) { // 'test' is not reserved as a keyword though\n\t\tpurpose = ScriptPurpose.Testing;\n\t} else if (purposeWord.isWord(\"module\")) {\n\t\tpurpose = ScriptPurpose.Module;\n\t} else if (purposeWord.isKeyword()) {\n\t\tpurposeWord.syntaxError(`script purpose missing`);\n\n\t\tts.unshift(purposeWord);\n\n\t\treturn null;\n\t} else {\n\t\tpurposeWord.syntaxError(`unrecognized script purpose '${purposeWord.value}' (expected 'testing', 'spending', 'staking', 'minting' or 'module')`);\n\t\tpurpose = -1;\n\t}\n\n\tif (expectedPurpose !== null && purpose !== null) {\n\t\tif (expectedPurpose != purpose) {\n\t\t\tpurposeWord.syntaxError(`expected '${getPurposeName(purpose)}' script purpose`);\n\t\t}\n\t}\n\n\tconst name = assertToken(ts.shift(), purposeWord.site)?.assertWord()?.assertNotKeyword();\n\n\tif (!name) {\n\t\treturn null;\n\t}\n\n\tif (name.value === \"main\") {\n\t\tname.syntaxError(`${purposeWord.value} script can't be named 'main'`);\n\t}\n\n\treturn [purpose, name];\n}\n\n/**\n * Also used by VSCode plugin\n * @param {Token[]} ts \n * @param {number | null} expectedPurpose \n * @returns {[number | null, Word | null, Statement[], number]}\n */\nfunction buildScript(ts, expectedPurpose = null) {\n\tconst first = ts[0];\n\n\tconst purposeName = buildScriptPurpose(ts, expectedPurpose);\n\n\tconst statements = buildProgramStatements(ts);\n\n\tlet mainIdx = -1;\n\n\tconst [purpose, name] = purposeName !== null ? purposeName : [null, null];\n\n\tif (purpose != ScriptPurpose.Module) {\n\t\tmainIdx = statements.findIndex(s => s.name.value === \"main\");\n\n\t\tif (mainIdx == -1) {\n\t\t\tif (name !== null) {\n\t\t\t\tfirst.site.merge(name.site).syntaxError(\"entrypoint 'main' not found\");\n\t\t\t} else {\n\t\t\t\tfirst.site.syntaxError(\"entrypoint 'main' not found\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [purpose, name, statements, mainIdx];\n}\n\n/**\n * Parses Helios quickly to extract the script purpose header.\n * Returns null if header is missing or incorrectly formed (instead of throwing an error)\n * @param {string} rawSrc \n * @returns {?[string, string]} - [purpose, name]\n */\nfunction extractScriptPurposeAndName(rawSrc) {\n\ttry {\n\t\tlet src = new Source(rawSrc);\n\n\t\tlet tokenizer = new Tokenizer(src);\n\n\t\tlet gen = tokenizer.streamTokens();\n\n\t\t// Don't parse the whole script, just 'eat' 2 tokens: `<purpose> <name>`\n\t\tlet ts = [];\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tlet yielded = gen.next();\n\t\t\tif (yielded.done) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tts.push(yielded.value);\n\t\t}\n\n\t\tconst purposeName = buildScriptPurpose(ts);\n\n\t\tsrc.throwErrors();\n\n\t\tif (purposeName !== null) {\n\t\t\tconst [purpose, name] = purposeName;\n\n\t\t\treturn [getPurposeName(purpose), name.value];\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected\"); // should've been caught above by calling src.throwErrors()\n\t\t}\n\t} catch (e) {\n\t\tif (!(e instanceof UserError)) {\n\t\t\tthrow e;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {ConstStatement | null}\n */\nfunction buildConstStatement(site, ts) {\n\tif (ts.length == 0) {\n\t\tsite.syntaxError(\"invalid syntax (expected name after 'const')\");\n\t\treturn null;\n\t}\n\n\tconst name = assertToken(ts.shift(), site)?.assertWord()?.assertNotKeyword();\n\n\tif (!name) {\n\t\treturn null;\n\t}\n\n\tlet typeExpr = null;\n\n\tif (ts.length > 0 && ts[0].isSymbol(\":\")) {\n\t\tconst colon = assertDefined(ts.shift());\n\n\t\tconst equalsPos = SymbolToken.find(ts, \"=\");\n\n\t\tif (equalsPos == -1) {\n\t\t\tts.unshift(colon);\n\t\t\tsite.merge(ts[ts.length-1].site).syntaxError(\"invalid syntax (expected '=' after 'const')\");\n\t\t\tts.splice(0);\n\t\t\treturn null;\n\t\t} else if (equalsPos == 0) {\n\t\t\tcolon.site.merge(ts[0].site).syntaxError(\"expected type expression between ':' and '='\");\n\t\t\tts.shift();\n\t\t\treturn null;\n\t\t}\n\n\t\ttypeExpr = buildTypeExpr(colon.site, ts.splice(0, equalsPos));\n\t}\n\n\tconst maybeEquals = ts.shift();\n\n\tif (maybeEquals === undefined) {\n\t\tsite.merge(name.site).syntaxError(\"expected '=' after 'const'\");\n\t\tts.splice(0);\n\t\treturn null;\n\t} else if (!maybeEquals.isSymbol(\"=\")) {\n\t\tsite.merge(maybeEquals.site).syntaxError(\"expected '=' after 'const'\");\n\t\treturn null;\n\t} else {\n\t\tconst equals = maybeEquals.assertSymbol(\"=\");\n\n\t\tif (!equals) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextStatementPos = Word.find(ts, [\"const\", \"func\", \"struct\", \"enum\", \"import\"]);\n\n\t\tconst tsValue = nextStatementPos == -1 ? ts.splice(0) : ts.splice(0, nextStatementPos);\n\n\t\tif (tsValue.length == 0) {\n\t\t\tequals.syntaxError(\"expected expression after '='\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst endSite = tsValue[tsValue.length-1].site;\n\n\t\t\tconst valueExpr = buildValueExpr(tsValue);\n\n\t\t\tif (valueExpr === null) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn new ConstStatement(site.merge(endSite), name, typeExpr, valueExpr);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts\n * @returns {[Token[], Token[]]}\n */\nfunction splitDataImpl(ts) {\n\tconst implPos = Word.find(ts, [\"const\", \"func\"]);\n\n\tif (implPos == -1) {\n\t\treturn [ts, []];\n\t} else {\n\t\treturn [ts.slice(0, implPos), ts.slice(implPos)];\n\t}\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {StructStatement | null}\n */\nfunction buildStructStatement(site, ts) {\n\tconst maybeName = ts.shift();\n\n\tif (maybeName === undefined) {\n\t\tsite.syntaxError(\"expected name after 'struct'\");\n\t\treturn null;\n\t} else {\n\t\tif (!maybeName.isWord()) {\n\t\t\tmaybeName.syntaxError(\"expected name after 'struct'\");\n\t\t\treturn null;\n\t\t} else if (maybeName.isKeyword()) {\n\t\t\tmaybeName.syntaxError(\"unexpected keyword after 'struct'\");\n\t\t}\n\n\t\tconst name = maybeName?.assertWord();\n\n\t\tif (!name) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maybeBraces = ts.shift();\n\n\t\tif (maybeBraces === undefined) {\n\t\t\tname.syntaxError(`expected '{...}' after 'struct ${name.toString()}'`);\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif (!maybeBraces.isGroup(\"{\", 1)) {\n\t\t\t\tmaybeBraces.syntaxError(\"expected non-empty '{..}' without separators\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst braces = maybeBraces.assertGroup(\"{\", 1);\n\n\t\t\tif (!braces) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst [tsFields, tsImpl] = splitDataImpl(braces.fields[0]);\n\n\t\t\tconst fields = buildDataFields(tsFields);\n\n\t\t\tconst impl = buildImplDefinition(tsImpl, new TypeRefExpr(name), fields.map(f => f.name), braces.site.endSite);\n\n\t\t\tif (impl === null) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn new StructStatement(site.merge(braces.site), name, fields, impl);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {DataField[]}\n */\nfunction buildDataFields(ts) {\n\t/** @type {DataField[]} */\n\tconst fields = []\n\n\t/**\n\t * @param {Word} fieldName\n\t */\n\tfunction assertUnique(fieldName) {\n\t\tif (fields.findIndex(f => f.name.toString() == fieldName.toString()) != -1) {\n\t\t\tfieldName.typeError(`duplicate field \\'${fieldName.toString()}\\'`);\n\t\t}\n\t}\n\n\twhile (ts.length > 0) {\n\t\tconst colonPos = SymbolToken.find(ts, \":\");\n\n\t\tif (colonPos == -1) {\n\t\t\tts[0].site.merge(ts[ts.length-1].site).syntaxError(\"expected ':' in data field\");\n\t\t\treturn fields;\n\t\t}\n\n\t\tconst colon = ts[colonPos];\n\t\tconst tsBef = ts.slice(0, colonPos);\n\t\tconst tsAft = ts.slice(colonPos+1);\n\t\tconst maybeFieldName = tsBef.shift();\n\t\tif (maybeFieldName === undefined) {\n\t\t\tcolon.syntaxError(\"expected word before ':'\");\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tconst fieldName = maybeFieldName?.assertWord()?.assertNotKeyword();\n\n\t\t\tif (!fieldName) {\n\t\t\t\treturn fields;\n\t\t\t}\n\n\t\t\tassertUnique(fieldName);\n\n\t\t\tif (tsAft.length == 0) {\n\t\t\t\tcolon.syntaxError(\"expected type expression after ':'\");\n\t\t\t\treturn fields;\n\t\t\t}\n\n\t\t\tconst nextColonPos = SymbolToken.find(tsAft, \":\");\n\n\t\t\tif (nextColonPos != -1) {\n\t\t\t\tif (nextColonPos == 0) {\n\t\t\t\t\ttsAft[nextColonPos].syntaxError(\"expected word before ':'\");\n\t\t\t\t\treturn fields;\n\t\t\t\t}\n\n\t\t\t\tvoid tsAft[nextColonPos-1].assertWord();\n\n\t\t\t\tts = tsAft.splice(nextColonPos-1);\n\t\t\t} else {\n\t\t\t\tts = [];\n\t\t\t}\n\n\t\t\tconst typeExpr = buildTypeExpr(colon.site, tsAft);\n\n\t\t\tif (!typeExpr) {\n\t\t\t\treturn fields;\n\t\t\t}\n\n\t\t\tfields.push(new DataField(fieldName, typeExpr));\n\t\t}\n\t}\n\n\treturn fields;\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @param {?TypeExpr} methodOf - methodOf !== null then first arg can be named 'self'\n * @returns {FuncStatement | null}\n */\nfunction buildFuncStatement(site, ts, methodOf = null) {\n\tconst name = assertToken(ts.shift(), site)?.assertWord()?.assertNotKeyword();\n\n\tif (!name) {\n\t\treturn null;\n\t}\n\n\tif (ts.length == 0) {\n\t\tname.site.syntaxError(\"invalid syntax\");\n\t\treturn null;\n\t}\n\n\tconst fnExpr = buildFuncLiteralExpr(ts, methodOf, false);\n\n\tif (!fnExpr) {\n\t\treturn null;\n\t}\n\n\treturn new FuncStatement(site.merge(fnExpr.site), name, fnExpr);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @param {?TypeExpr} methodOf - methodOf !== null then first arg can be named 'self'\n * @param {boolean} allowInferredRetType\n * @returns {FuncLiteralExpr | null}\n */\nfunction buildFuncLiteralExpr(ts, methodOf = null, allowInferredRetType = false) {\n\tconst parens = assertDefined(ts.shift()).assertGroup(\"(\");\n\n\tif (!parens) {\n\t\treturn null;\n\t}\n\n\tconst site = parens.site;\n\tconst args = buildFuncArgs(parens, methodOf);\n\n\tconst arrow = assertToken(ts.shift(), site)?.assertSymbol(\"->\");\n\n\tif (!arrow) {\n\t\treturn null;\n\t}\n\n\tconst bodyPos = Group.find(ts, \"{\");\n\n\tif (bodyPos == -1) {\n\t\tsite.syntaxError(\"no function body\");\n\t\treturn null;\n\t} else if (bodyPos == 0 && !allowInferredRetType) {\n\t\tsite.syntaxError(\"no return type specified\");\n\t}\n\n\tconst retTypeExprs = buildFuncRetTypeExprs(arrow.site, ts.splice(0, bodyPos), allowInferredRetType);\n\n\tif (retTypeExprs === null) {\n\t\treturn null;\n\t}\n\n\tconst bodyGroup = assertToken(ts.shift(), site)?.assertGroup(\"{\", 1)\n\n\tif (!bodyGroup) {\n\t\treturn null;\n\t}\n\n\tconst bodyExpr = buildValueExpr(bodyGroup.fields[0]);\n\n\tif (!bodyExpr) {\n\t\treturn null;\n\t}\n\n\treturn new FuncLiteralExpr(site, args, retTypeExprs, bodyExpr);\n}\n\n/**\n * @package\n * @param {Group} parens \n * @param {?TypeExpr} methodOf - methodOf !== nul then first arg can be named 'self'\n * @returns {FuncArg[]}\n */\nfunction buildFuncArgs(parens, methodOf = null) {\n\t/** @type {FuncArg[]} */\n\tconst args = [];\n\n\tlet hasDefaultArgs = false;\n\n\tfor (let i = 0; i < parens.fields.length; i++) {\n\t\tconst f = parens.fields[i];\n\t\tconst ts = f.slice();\n\n\t\tconst name = assertToken(ts.shift(), parens.site)?.assertWord();\n\n\t\tif (!name) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (name.toString() == \"self\") {\n\t\t\tif (i != 0 || methodOf === null) {\n\t\t\t\tname.syntaxError(\"'self' is reserved\");\n\t\t\t} else {\n\t\t\t\tif (ts.length > 0) {\n\t\t\t\t\tif (ts[0].isSymbol(\":\")) {\n\t\t\t\t\t\tts[0].syntaxError(\"unexpected type expression after 'self'\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tts[0].syntaxError(\"unexpected token\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\targs.push(new FuncArg(name, methodOf));\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (name.toString() == \"_\") {\n\t\t\tif (ts.length > 0) {\n\t\t\t\tif (ts[0].isSymbol(\":\")) {\n\t\t\t\t\tts[0].syntaxError(\"unexpected type expression after '_'\");\n\t\t\t\t} else {\n\t\t\t\t\tts[0].syntaxError(\"unexpected token\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\targs.push(new FuncArg(name, methodOf));\n\t\t\t}\n\t\t} else {\n\t\t\tif (name.isKeyword()) {\n\t\t\t\tname.syntaxError(\"unexpected keyword\");\n\t\t\t}\n\n\t\t\tfor (let prev of args) {\n\t\t\t\tif (prev.name.toString() == name.toString()) {\n\t\t\t\t\tname.syntaxError(`duplicate argument '${name.toString()}'`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst maybeColon = ts.shift();\n\t\t\tif (maybeColon === undefined) {\n\t\t\t\tname.syntaxError(`expected ':' after '${name.toString()}'`);\n\t\t\t} else {\n\t\t\t\tconst colon = maybeColon.assertSymbol(\":\");\n\n\t\t\t\tif (!colon) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst equalsPos = SymbolToken.find(ts, \"=\");\n\n\t\t\t\t/**\n\t\t\t\t * @type {null | ValueExpr}\n\t\t\t\t */\n\t\t\t\tlet defaultValueExpr = null;\n\n\t\t\t\tif (equalsPos != -1) {\n\t\t\t\t\tif (equalsPos == ts.length-1) {\n\t\t\t\t\t\tts[equalsPos].syntaxError(\"expected expression after '='\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst vts = ts.splice(equalsPos);\n\n\t\t\t\t\t\tvts.shift()?.assertSymbol(\"=\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tdefaultValueExpr = buildValueExpr(vts);\n\n\t\t\t\t\t\thasDefaultArgs = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (hasDefaultArgs) {\n\t\t\t\t\t\tname.syntaxError(\"positional args must come before default args\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * @type {TypeExpr | null}\n\t\t\t\t */\n\t\t\t\tlet typeExpr = null;\n\n\t\t\t\tif (ts.length == 0) {\n\t\t\t\t\tcolon.syntaxError(\"expected type expression after ':'\");\n\t\t\t\t} else {\n\t\t\t\t\ttypeExpr = buildTypeExpr(colon.site, ts);\n\t\t\t\t}\n\n\t\t\t\targs.push(new FuncArg(name, typeExpr, defaultValueExpr));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn args;\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {EnumStatement | null}\n */\nfunction buildEnumStatement(site, ts) {\n\tconst maybeName = ts.shift();\n\n\tif (maybeName === undefined) {\n\t\tsite.syntaxError(\"expected word after 'enum'\");\n\t\treturn null\n\t} else {\n\t\tconst name = maybeName.assertWord()?.assertNotKeyword();\n\n\t\tif (!name) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maybeBraces = ts.shift();\n\n\t\tif (maybeBraces === undefined) {\n\t\t\tname.syntaxError(`expected '{...}' after 'enum ${name.toString()}'`);\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst braces = maybeBraces.assertGroup(\"{\", 1);\n\n\t\t\tif (!braces) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst [tsMembers, tsImpl] = splitDataImpl(braces.fields[0]);\n\n\t\t\tif (tsMembers.length == 0) {\n\t\t\t\tbraces.syntaxError(\"expected at least one enum member\");\n\t\t\t}\n\n\t\t\t/** @type {EnumMember[]} */\n\t\t\tconst members = [];\n\n\t\t\twhile (tsMembers.length > 0) {\n\t\t\t\tconst member = buildEnumMember(tsMembers);\n\n\t\t\t\tif (!member) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tmembers.push(member);\n\t\t\t}\n\n\t\t\tconst impl = buildImplDefinition(tsImpl, new TypeRefExpr(name), members.map(m => m.name), braces.site.endSite);\n\n\t\t\tif (!impl) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new EnumStatement(site.merge(braces.site), name, members, impl);\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {(ImportStatement | null)[] | null}\n */\nfunction buildImportStatements(site, ts) {\n\tconst maybeBraces = ts.shift();\n\n\tif (maybeBraces === undefined) {\n\t\tsite.syntaxError(\"expected '{...}' after 'import'\");\n\t\treturn null;\n\t} else {\n\t\tconst braces = maybeBraces.assertGroup(\"{\");\n\t\tif (!braces) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maybeFrom = assertToken(ts.shift(), maybeBraces.site, \"expected 'from' after 'import {...}'\")?.assertWord(\"from\");\n\t\tif (!maybeFrom) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maybeModuleName = assertToken(ts.shift(), maybeFrom.site, \"expected module name after 'import {...} from'\");\n\t\tif (!maybeModuleName) {\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * @type {null | undefined | Word}\n\t\t */\n\t\tlet moduleName = null;\n\n\t\tif (maybeModuleName instanceof StringLiteral && importPathTranslator) {\n\t\t\tlet translated = importPathTranslator(maybeModuleName);\n\n\t\t\tif (!translated) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tmoduleName = new Word(maybeModuleName.site, translated);\n\t\t} else {\n\t\t\tmoduleName = maybeModuleName.assertWord()?.assertNotKeyword();\n\t\t}\n\n\t\tif (!moduleName) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst mName = moduleName;\n\n\t\tif (braces.fields.length === 0) {\n\t\t\tbraces.syntaxError(\"expected at least 1 import field\");\n\t\t}\n\n\t\treturn braces.fields.map(fts => {\n\t\t\tconst ts = fts.slice();\n\t\t\tconst maybeOrigName = ts.shift();\n\n\t\t\tif (maybeOrigName === undefined) {\n\t\t\t\tbraces.syntaxError(\"empty import field\");\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst origName = maybeOrigName.assertWord();\n\n\t\t\t\tif (!origName) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (ts.length === 0) {\n\t\t\t\t\treturn new ImportStatement(site, origName, origName, mName);\n\t\t\t\t} else {\n\t\t\t\t\tconst maybeAs = ts.shift();\n\n\t\t\t\t\tif (maybeAs === undefined) {\n\t\t\t\t\t\tmaybeOrigName.syntaxError(`expected 'as' or nothing after '${origName.value}'`);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmaybeAs.assertWord(\"as\");\n\n\t\t\t\t\t\tconst maybeNewName = ts.shift();\n\n\t\t\t\t\t\tif (maybeNewName === undefined) {\n\t\t\t\t\t\t\tmaybeAs.syntaxError(\"expected word after 'as'\");\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst newName = maybeNewName.assertWord();\n\n\t\t\t\t\t\t\tif (!newName) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst rem = ts.shift();\n\t\t\t\t\t\t\tif (rem !== undefined) {\n\t\t\t\t\t\t\t\trem.syntaxError(\"unexpected token\");\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn new ImportStatement(site, newName, origName, mName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).filter(f => f !== null)\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {EnumMember | null}\n */\nfunction buildEnumMember(ts) {\n\tconst name = assertDefined(ts.shift()).assertWord()?.assertNotKeyword();\n\n\tif (!name) {\n\t\treturn null;\n\t} else if (ts.length == 0 || ts[0].isWord()) {\n\t\treturn new EnumMember(name, []);\n\t} else {\n\t\tconst braces = assertToken(ts.shift(), name.site)?.assertGroup(\"{\", 1);\n\n\t\tif (!braces) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst fields = buildDataFields(braces.fields[0]);\n\n\t\t\treturn new EnumMember(name, fields);\n\t\t}\n\t}\n}\n\n/** \n * @package\n * @param {Token[]} ts \n * @param {TypeRefExpr} selfTypeExpr - reference to parent type\n * @param {Word[]} fieldNames - to check if impl statements have a unique name\n * @param {?Site} endSite\n * @returns {ImplDefinition | null}\n */\nfunction buildImplDefinition(ts, selfTypeExpr, fieldNames, endSite) {\n\t/**\n\t * @param {Word} name\n\t * @returns {boolean}\n\t */\n\tfunction isNonAuto(name) {\n\t\tif (AUTOMATIC_METHODS.findIndex(n => n == name.toString()) != -1) {\n\t\t\tname.syntaxError(`'${name.toString()}' is a reserved member`);\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tfor (let fieldName of fieldNames) {\n\t\tif (!isNonAuto(fieldName)) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tconst statements = buildImplMembers(ts, selfTypeExpr);\n\n\t/** \n\t * @param {number} i\n\t * @returns {boolean} - ok\n\t */\n\tfunction isUnique(i) {\n\t\tlet s = statements[i];\n\n\t\tisNonAuto(s.name);\n\n\t\tfor (let fieldName of fieldNames) {\n\t\t\tif (fieldName.toString() == s.name.toString()) {\n\t\t\t\ts.name.syntaxError(`'${s.name.toString()}' is duplicate`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (let j = i+1; j < statements.length; j++) {\n\t\t\tif (statements[j].name.toString() == s.name.toString()) {\n\t\t\t\tstatements[j].name.syntaxError(`'${s.name.toString()}' is duplicate`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst n = statements.length;\n\n\tfor (let i = 0; i < n; i++) {\n\t\tif (!isUnique(i)) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tif (n > 0 && endSite !== null) {\n\t\tstatements[n-1].site.setEndSite(endSite);\n\t}\n\n\treturn new ImplDefinition(selfTypeExpr, statements);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @param {TypeExpr} methodOf\n * @returns {(ConstStatement | FuncStatement)[]}\n */\nfunction buildImplMembers(ts, methodOf) {\n\t/** @type {(ConstStatement | FuncStatement)[]} */\n\tconst statements = [];\n\n\twhile (ts.length != 0) {\n\t\tconst t = assertDefined(ts.shift()).assertWord();\n\n\t\tif (!t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst kw = t.value;\n\n\t\t/**\n\t\t * @type {null | ConstStatement | FuncStatement}\n\t\t */\n\t\tlet s = null;\n\n\t\tif (kw == \"const\") {\n\t\t\ts = buildConstStatement(t.site, ts);\n\t\t} else if (kw == \"func\") {\n\t\t\ts = buildFuncStatement(t.site, ts, methodOf);\n\t\t} else {\n\t\t\tt.syntaxError(\"invalid impl syntax\");\n\t\t}\n\n\t\tif (s) {\n\t\t\tstatements.push(s);\n\t\t}\n\t}\n\n\treturn statements\n}\n\n/**\n * @package\n * @param {Site} site\n * @param {Token[]} ts \n * @returns {TypeExpr | null}\n */\nfunction buildTypeExpr(site, ts) {\n\tif (ts.length == 0) {\n\t\tsite.syntaxError(\"expected token\");\n\t\treturn null;\n\t}\n\n\tif (ts[0].isGroup(\"[\")) {\n\t\treturn buildListTypeExpr(ts);\n\t} else if (ts[0].isWord(\"Map\")) {\n\t\treturn buildMapTypeExpr(ts);\n\t} else if (ts[0].isWord(\"Option\")) {\n\t\treturn buildOptionTypeExpr(ts);\n\t} else if (ts.length > 1 && ts[0].isGroup(\"(\") && ts[1].isSymbol(\"->\")) {\n\t\treturn buildFuncTypeExpr(ts);\n\t} else if (ts.length > 1 && ts[0].isWord() && ts[1].isSymbol(\"::\")) {\n\t\treturn buildTypePathExpr(ts);\n\t} else if (ts[0].isWord()) {\n\t\treturn buildTypeRefExpr(ts);\n\t} else {\n\t\tts[0].syntaxError(\"invalid type syntax\");\n\t\treturn null;\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {ListTypeExpr | null}\n */\nfunction buildListTypeExpr(ts) {\n\tconst brackets = assertDefined(ts.shift()).assertGroup(\"[\", 0);\n\n\tif (!brackets) {\n\t\treturn null\n\t}\n\n\tconst itemTypeExpr = buildTypeExpr(brackets.site, ts);\n\n\tif (!itemTypeExpr) {\n\t\treturn null;\n\t}\n\n\treturn new ListTypeExpr(brackets.site, itemTypeExpr);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {MapTypeExpr | null}\n */\nfunction buildMapTypeExpr(ts) {\n\tconst kw = assertDefined(ts.shift()).assertWord(\"Map\");\n\n\tif (!kw) {\n\t\treturn null;\n\t}\n\n\tconst maybeKeyTypeExpr = assertToken(ts.shift(), kw.site, \"missing Map key-type\");\n\n\tif (!maybeKeyTypeExpr) {\n\t\treturn null;\n\t}\n\n\tconst keyTypeTs = maybeKeyTypeExpr.assertGroup(\"[\", 1)?.fields[0];\n\tif (keyTypeTs === null || keyTypeTs === undefined) {\n\t\treturn null;\n\t} else if (keyTypeTs.length == 0) {\n\t\tkw.syntaxError(\"missing Map key-type (brackets can't be empty)\");\n\t\treturn null;\n\t} \n\n\tconst keyTypeExpr = buildTypeExpr(kw.site, keyTypeTs);\n\tif (!keyTypeExpr) {\n\t\treturn null;\n\t}\n\n\tif (ts.length == 0) {\n\t\tkw.syntaxError(\"missing Map value-type\");\n\t\treturn null;\n\t} \n\n\tconst valueTypeExpr = buildTypeExpr(kw.site, ts);\n\n\tif (!valueTypeExpr) {\n\t\treturn null;\n\t}\n\n\treturn new MapTypeExpr(kw.site, keyTypeExpr, valueTypeExpr);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {TypeExpr | null}\n */\nfunction buildOptionTypeExpr(ts) {\n\tconst kw = assertDefined(ts.shift()).assertWord(\"Option\");\n\n\tif (!kw) {\n\t\treturn null;\n\t}\n\n\tconst typeTs = assertToken(ts.shift(), kw.site)?.assertGroup(\"[\", 1)?.fields[0];\n\n\tif (!typeTs) {\n\t\treturn null;\n\t}\n\n\tconst someTypeExpr = buildTypeExpr(kw.site, typeTs);\n\tif (!someTypeExpr) {\n\t\treturn null;\n\t}\n\n\tconst typeExpr = new OptionTypeExpr(kw.site, someTypeExpr);\n\tif (ts.length > 0) {\n\t\tif (ts[0].isSymbol(\"::\") && ts[1].isWord([\"Some\", \"None\"])) {\n\t\t\tif (ts.length > 2) {\n\t\t\t\tts[2].syntaxError(\"unexpected token\");\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst memberName = ts[1].assertWord()\n\n\t\t\t\tif (!memberName) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn new TypePathExpr(ts[0].site, typeExpr, memberName);\n\t\t\t}\n\t\t} else {\n\t\t\tts[0].syntaxError(\"invalid option type syntax\");\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\treturn typeExpr;\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {FuncTypeExpr | null}\n */\nfunction buildFuncTypeExpr(ts) {\n\tconst parens = assertDefined(ts.shift()).assertGroup(\"(\");\n\n\tif (!parens) {\n\t\treturn null;\n\t}\n\n\tlet hasOptArgs = false;\n\n\tconst argTypes = reduceNull(parens.fields.map(f => {\n\t\tconst fts = f.slice();\n\n\t\tif (fts.length == 0) {\n\t\t\tparens.syntaxError(\"expected func arg type\");\n\t\t\treturn null;\n\t\t}\n\n\t\tconst funcArgTypeExpr = buildFuncArgTypeExpr(fts);\n\n\t\tif (!funcArgTypeExpr) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (hasOptArgs) {\n\t\t\tif (!funcArgTypeExpr.isOptional()) {\n\t\t\t\tfuncArgTypeExpr.syntaxError(\"optional arguments must come last\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tif (funcArgTypeExpr.isOptional()) {\n\t\t\t\thasOptArgs = true;\n\t\t\t}\n\t\t}\n\n\t\treturn funcArgTypeExpr;\n\t}));\n\n\tif (!argTypes) {\n\t\treturn null;\n\t} else {\n\t\tif (argTypes.some(at => at.isNamed()) && argTypes.some(at => !at.isNamed())) {\n\t\t\targTypes[0].syntaxError(\"can't mix named and unnamed args in func type\");\n\t\t\treturn null;\n\t\t}\n\t\n\t\tconst arrow = assertToken(ts.shift(), parens.site)?.assertSymbol(\"->\");\n\n\t\tif (!arrow) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tconst retTypes = buildFuncRetTypeExprs(arrow.site, ts, false);\n\n\t\tif (!retTypes) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new FuncTypeExpr(parens.site, argTypes, retTypes.map(t => assertDefined(t)));\n\t}\n}\n\n/**\n * \n * @param {Token[]} ts \n * @returns {FuncArgTypeExpr | null}\n */\nfunction buildFuncArgTypeExpr(ts) {\n\tconst colonPos = SymbolToken.find(ts, \":\");\n\n\tif (colonPos != -1 && colonPos != 1) {\n\t\tts[0].syntaxError(\"invalid syntax\");\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {Word | null}\n\t */\n\tlet name = null;\n\n\tif (colonPos != -1) {\n\t\tname = assertDefined(ts.shift()).assertWord()?.assertNotKeyword() ?? null;\n\n\t\tif (!name) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst colon = assertDefined(ts.shift()).assertSymbol(\":\");\n\n\t\tif (!colon) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif (ts.length == 0) {\n\t\t\tcolon.syntaxError(\"expected type expression after ':'\");\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tconst next = assertDefined(ts[0]);\n\n\tconst hasDefault = next.isSymbol(\"?\");\n\tif (hasDefault) {\n\t\tconst opt = assertDefined(ts.shift());\n\n\t\tif (ts.length == 0) {\n\t\t\topt.syntaxError(\"invalid type expression after '?'\");\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tconst typeExpr = buildTypeExpr(next.site, ts);\n\tif (!typeExpr) {\n\t\treturn null;\n\t}\n\n\treturn new FuncArgTypeExpr(name !== null ? name.site : typeExpr.site, name, typeExpr, hasDefault);\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @param {boolean} allowInferredRetType\n * @returns {null | (null | TypeExpr)[]}\n */\nfunction buildFuncRetTypeExprs(site, ts, allowInferredRetType = false) {\n\tif (ts.length === 0) {\n\t\tif (allowInferredRetType) {\n\t\t\treturn [null];\n\t\t} else {\n\t\t\tsite.syntaxError(\"expected type expression after '->'\");\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\tif (ts[0].isGroup(\"(\") && (ts.length == 1 || !ts[1].isSymbol(\"->\"))) {\n\t\t\tconst group = assertToken(ts.shift(), site)?.assertGroup(\"(\");\n\n\t\t\tif (!group) {\n\t\t\t\treturn null;\n\t\t\t} else if (group.fields.length == 0) {\n\t\t\t\treturn [new VoidTypeExpr(group.site)];\n\t\t\t} else if (group.fields.length == 1) {\n\t\t\t\tgroup.syntaxError(\"expected 0 or 2 or more types in multi return type\");\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn group.fields.map(fts => {\n\t\t\t\t\tfts = fts.slice();\n\n\t\t\t\t\treturn buildTypeExpr(group.site, fts);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn [buildTypeExpr(site, ts)];\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {null | TypePathExpr}\n */\nfunction buildTypePathExpr(ts) {\n\tconst baseName = assertDefined(ts.shift()).assertWord()?.assertNotKeyword();\n\n\tif (!baseName) {\n\t\treturn null;\n\t}\n\n\tconst symbol = assertToken(ts.shift(), baseName.site)?.assertSymbol(\"::\");\n\n\tif (!symbol) {\n\t\treturn null;\n\t}\n\n\tconst memberName = assertToken(ts.shift(), symbol.site)?.assertWord();\n\n\tif (!memberName) {\n\t\treturn null;\n\t}\n\n\tif (ts.length > 0) {\n\t\tts[0].syntaxError(\"invalid type syntax\");\n\t\treturn null;\n\t}\n\t\n\treturn new TypePathExpr(symbol.site, new TypeRefExpr(baseName), memberName);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {TypeRefExpr | null}\n */\nfunction buildTypeRefExpr(ts) {\n\tconst name = assertDefined(ts.shift()).assertWord()?.assertNotKeyword();\n\n\tif (!name) {\n\t\treturn null;\n\t}\n\n\tif (ts.length > 0) {\n\t\tts[0].syntaxError(\"invalid type syntax\");\n\t\treturn null;\n\t}\n\n\treturn new TypeRefExpr(name);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @param {number} prec \n * @returns {ValueExpr | null}\n */\nfunction buildValueExpr(ts, prec = 0) {\n\tassert(ts.length > 0);\n\n\t// lower index in exprBuilders is lower precedence\n\t/** @type {((ts: Token[], prev: number) => (ValueExpr | null))[]} */\n\tconst exprBuilders = [\n\t\t/**\n\t\t * 0: lowest precedence is assignment\n\t\t * @param {Token[]} ts_ \n\t\t * @param {number} prec_ \n\t\t * @returns \n\t\t */\n\t\tfunction (ts_, prec_) {\n\t\t\treturn buildMaybeAssignOrPrintExpr(ts_, prec_);\n\t\t},\n\t\tmakeBinaryExprBuilder('||'), // 1: logical or operator\n\t\tmakeBinaryExprBuilder('&&'), // 2: logical and operator\n\t\tmakeBinaryExprBuilder(['==', '!=']), // 3: eq or neq\n\t\tmakeBinaryExprBuilder(['<', '<=', '>', '>=']), // 4: comparison\n\t\tmakeBinaryExprBuilder(['+', '-']), // 5: addition subtraction\n\t\tmakeBinaryExprBuilder(['*', '/', '%']), // 6: multiplication division remainder\n\t\tmakeUnaryExprBuilder(['!', '+', '-']), // 7: logical not, negate\n\t\t/**\n\t\t * 8: variables or literal values chained with: (enum)member access, indexing and calling\n\t\t * @param {Token[]} ts_ \n\t\t * @param {number} prec_ \n\t\t * @returns \n\t\t */\n\t\tfunction (ts_, prec_) {\n\t\t\treturn buildChainedValueExpr(ts_, prec_);\n\t\t}\n\t];\n\n\treturn exprBuilders[prec](ts, prec);\n}\n\n/**\n * @package\n * @param {Token[]} ts\n * @param {number} prec\n * @returns {ValueExpr | null}\n */\nfunction buildMaybeAssignOrPrintExpr(ts, prec) {\n\tlet semicolonPos = SymbolToken.find(ts, \";\");\n\tconst equalsPos = SymbolToken.find(ts, \"=\");\n\tconst printPos = Word.find(ts, \"print\");\n\n\tif (semicolonPos == -1) {\n\t\tif (equalsPos != -1) {\n\t\t\tts[equalsPos].syntaxError(\"invalid assignment syntax, expected ';' after '...=...'\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn buildValueExpr(ts, prec + 1);\n\t\t}\n\t} else {\n\t\tif ((equalsPos == -1 || equalsPos > semicolonPos) && (printPos == -1 || printPos > semicolonPos)) {\n\t\t\tconst upstreamExpr = buildValueExpr(ts.splice(0, semicolonPos), prec+1);\n\t\t\tconst site = assertDefined(ts.shift()).site;\n\n\t\t\tif (ts.length == 0) {\n\t\t\t\tsite.syntaxError(\"expected expression after ';'\");\n\t\t\t\treturn null;\n\t\t\t} else if (upstreamExpr === null) {\n\t\t\t\t// error will already have been created\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst downstreamExpr = buildValueExpr(ts, prec);\n\n\t\t\t\tif (downstreamExpr === null) {\n\t\t\t\t\t// error will already have been created\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn new ChainExpr(site, upstreamExpr, downstreamExpr);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (equalsPos != -1 && equalsPos < semicolonPos) {\n\t\t\tif (printPos != -1) {\n\t\t\t\tif (printPos <= semicolonPos) {\n\t\t\t\t\tts[printPos].syntaxError(\"expected ';' after 'print(...)'\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst equals = ts[equalsPos].assertSymbol(\"=\");\n\n\t\t\tif (!equals) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst equalsSite = equals.site;\n\n\t\t\tconst lts = ts.splice(0, equalsPos);\n\n\t\t\tconst lhs = buildAssignLhs(equalsSite, lts);\n\t\t\t\n\t\t\tassertDefined(ts.shift()).assertSymbol(\"=\");\n\n\t\t\tsemicolonPos = SymbolToken.find(ts, \";\");\n\t\t\tassert(semicolonPos != -1);\n\n\t\t\tlet upstreamTs = ts.splice(0, semicolonPos);\n\t\t\tif (upstreamTs.length == 0) {\n\t\t\t\tequalsSite.syntaxError(\"expected expression between '=' and ';'\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst upstreamExpr = buildValueExpr(upstreamTs, prec + 1);\n\n\t\t\tconst semicolon  = assertToken(ts.shift(), equalsSite)?.assertSymbol(\";\");\n\n\t\t\tif (!semicolon) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst semicolonSite = semicolon.site;\n\n\t\t\tif (ts.length == 0) {\n\t\t\t\tsemicolonSite.syntaxError(\"expected expression after ';'\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst downstreamExpr = buildValueExpr(ts, prec);\n\n\t\t\tif (downstreamExpr === null || upstreamExpr === null || lhs === null) {\n\t\t\t\t// error will already have been thrown internally\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn new AssignExpr(equalsSite, lhs, upstreamExpr, downstreamExpr);\n\t\t\t}\n\t\t} else if (printPos != -1 && printPos < semicolonPos) {\n\t\t\tif (equalsPos != -1) {\n\t\t\t\tif (equalsPos <= semicolonPos) {\n\t\t\t\t\tts[equalsPos].syntaxError(\"expected ';' after '...=...'\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst print = assertDefined(ts.shift()).assertWord(\"print\");\n\n\t\t\tif (!print) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst printSite = print.site;\n\n\t\t\tconst maybeParens = ts.shift();\n\n\t\t\tif (maybeParens === undefined) {\n\t\t\t\tts[printPos].syntaxError(\"expected '(...)' after 'print'\");\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst parens = maybeParens.assertGroup(\"(\", 1);\n\n\t\t\t\tif (!parens) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst msgExpr = buildValueExpr(parens.fields[0]);\n\n\t\t\t\tconst semicolon = assertToken(ts.shift(), parens.site)?.assertSymbol(\";\")\n\n\t\t\t\tif (!semicolon) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst semicolonSite = semicolon.site;\n\n\t\t\t\tif (ts.length == 0) {\n\t\t\t\t\tsemicolonSite.syntaxError(\"expected expression after ';'\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst downstreamExpr = buildValueExpr(ts, prec);\n\n\t\t\t\tif (!downstreamExpr || !msgExpr) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn new PrintExpr(printSite, msgExpr, downstreamExpr);\n\t\t\t}\n\t\t} else {\n\t\t\tts[0].syntaxError(\"unhandled\");\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Site} site\n * @param {Token[]} ts \n * @param {boolean} isSwitchCase\n * @returns {DestructExpr | null}\n */\nfunction buildDestructExpr(site, ts, isSwitchCase = false) {\n\tif (ts.length == 0) {\n\t\tsite.syntaxError(\"expected token inside destructuring braces\");\n\t\treturn null;\n\t}\n\n\tlet maybeName = assertToken(ts.shift(), site);\n\n\tif (!maybeName) {\n\t\treturn null;\n\t}\n\n\tif (maybeName.isWord(\"_\")) {\n\t\tif (ts.length != 0) {\n\t\t\tmaybeName.syntaxError(\"unexpected tokens after '_'\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new DestructExpr(new Word(maybeName.site, \"_\"), null);\n\t\t}\n\t} else {\n\t\tlet name = new Word(maybeName.site, \"_\");\n\n\t\tif (ts.length >= 1 && ts[0].isSymbol(\":\")) {\n\t\t\tlet name_ = maybeName.assertWord()?.assertNotKeyword();\n\n\t\t\tif (!name_) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tname = name_;\n\n\t\t\tconst colon = assertToken(ts.shift(), name.site)?.assertSymbol(\":\");\n\n\t\t\tif (!colon) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (ts.length == 0) {\n\t\t\t\tcolon.syntaxError(\"expected type expression after ':'\");\n\t\t\t\treturn null;\n\t\t\t} \n\n\t\t\tconst destructExprs = buildDestructExprs(ts);\n\n\t\t\tif (destructExprs === null || destructExprs === undefined) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\tconst typeExpr = buildTypeExpr(colon.site, ts);\n\n\t\t\tif (!typeExpr) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new DestructExpr(name, typeExpr, destructExprs);\n\t\t} else if (ts.length == 0) {\n\t\t\tif (isSwitchCase) {\n\t\t\t\tconst typeName = maybeName.assertWord()?.assertNotKeyword();\n\n\t\t\t\tif (!typeName) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst typeExpr = new TypeRefExpr(typeName);\n\n\t\t\t\tif (!typeExpr) {\n\t\t\t\t\treturn null;\n\t\t\t\t} \n\n\t\t\t\treturn new DestructExpr(name, typeExpr);\n\t\t\t} else {\n\t\t\t\tconst name = maybeName.assertWord()?.assertNotKeyword();\n\n\t\t\t\tif (!name) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn new DestructExpr(name, null);\n\t\t\t}\n\t\t} else {\n\t\t\tts.unshift(maybeName);\n\n\t\t\tconst destructExprs = buildDestructExprs(ts);\n\n\t\t\tif (destructExprs === null || destructExprs === undefined) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\n\t\t\tconst typeExpr = buildTypeExpr(site, ts);\n\n\t\t\tif (!typeExpr) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new DestructExpr(name, typeExpr, destructExprs);\n\t\t}\n\t}\n}\n\n/**\n * Pops the last element of ts if it is a braces group\n * @param {Token[]} ts\n * @returns {null | DestructExpr[]}\n */\nfunction buildDestructExprs(ts) {\n\tif (ts.length == 0) {\n\t\treturn [];\n\t} else if (ts[ts.length -1].isGroup(\"{\")) {\n\t\tconst group = assertDefined(ts.pop()).assertGroup(\"{\");\n\n\t\tif (!group) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst destructExprs = group.fields.map(fts => {\n\t\t\treturn buildDestructExpr(group.site, fts);\n\t\t});\n\t\n\t\tif (destructExprs.every(le => le !== null && le.isIgnored() && !le.hasDestructExprs())) {\n\t\t\tgroup.syntaxError(\"expected at least one used field while destructuring\")\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reduceNull(destructExprs);\n\t} else {\n\t\treturn [];\n\t}\t\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {null | DestructExpr[]}\n */\nfunction buildAssignLhs(site, ts) {\n\tconst maybeName = ts.shift();\n\tif (maybeName === undefined) {\n\t\tsite.syntaxError(\"expected a name before '='\");\n\t\treturn null;\n\t} else {\n\t\t/**\n\t\t * @type {DestructExpr[]}\n\t\t */\n\t\tconst pairs = [];\n\n\t\tif (maybeName.isWord()) {\n\t\t\tts.unshift(maybeName);\n\n\t\t\tconst lhs = buildDestructExpr(maybeName.site, ts);\n\n\t\t\tif (lhs === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (lhs.isIgnored() && !lhs.hasDestructExprs()) {\n\t\t\t\tmaybeName.syntaxError(`unused assignment ${maybeName.toString()}`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpairs.push(lhs);\n\t\t} else if (maybeName.isGroup(\"(\")) {\n\t\t\tconst group = maybeName.assertGroup(\"(\");\n\n\t\t\tif (!group) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (group.fields.length < 2) {\n\t\t\t\tgroup.syntaxError(\"expected at least 2 lhs' for multi-assign\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet someNoneUnderscore = false;\n\t\t\tfor (let fts of group.fields) {\n\t\t\t\tif (fts.length == 0) {\n\t\t\t\t\tgroup.syntaxError(\"unexpected empty field for multi-assign\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tfts = fts.slice();\n\n\t\t\t\tconst lhs = buildDestructExpr(group.site, fts);\n\n\t\t\t\tif (!lhs) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!lhs.isIgnored() || lhs.hasDestructExprs()) {\n\t\t\t\t\tsomeNoneUnderscore = true;\n\t\t\t\t}\n\n\t\t\t\t// check that name is unique\n\t\t\t\tpairs.forEach(p => {\n\t\t\t\t\tif (!lhs.isIgnored() && p.name.value === lhs.name.value) {\n\t\t\t\t\t\tlhs.name.syntaxError(`duplicate name '${lhs.name.value}' in lhs of multi-assign`);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tpairs.push(lhs);\n\t\t\t}\n\n\t\t\tif (!someNoneUnderscore) {\n\t\t\t\tgroup.syntaxError(\"expected at least one non-underscore in lhs of multi-assign\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tmaybeName.syntaxError(\"unexpected syntax for lhs of =\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn pairs;\n\t}\n}\n\n/**\n * @package\n * @param {string | string[]} symbol \n * @returns {(ts: Token[], prec: number) => (ValueExpr | null)}\n */\nfunction makeBinaryExprBuilder(symbol) {\n\t// default behaviour is left-to-right associative\n\treturn function (ts, prec) {\n\t\tconst iOp = SymbolToken.findLast(ts, symbol);\n\n\t\tif (iOp == ts.length - 1) {\n\t\t\t// post-unary operator, which is invalid\n\t\t\tts[iOp].syntaxError(`invalid syntax, '${ts[iOp].toString()}' can't be used as a post-unary operator`);\n\t\t\treturn null;\n\t\t} else if (iOp > 0) { // iOp == 0 means maybe a (pre)unary op, which is handled by a higher precedence\n\t\t\tconst a = buildValueExpr(ts.slice(0, iOp), prec);\n\t\t\tconst b = buildValueExpr(ts.slice(iOp + 1), prec + 1);\n\t\t\tconst op = ts[iOp].assertSymbol();\n\n\t\t\tif (!a || !b || !op) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new BinaryExpr(op, a, b);\n\t\t} else {\n\t\t\treturn buildValueExpr(ts, prec + 1);\n\t\t}\n\t};\n}\n\n/**\n * @package\n * @param {string | string[]} symbol \n * @returns {(ts: Token[], prec: number) => (ValueExpr | null)}\n */\nfunction makeUnaryExprBuilder(symbol) {\n\t// default behaviour is right-to-left associative\n\treturn function (ts, prec) {\n\t\tif (ts[0].isSymbol(symbol)) {\n\t\t\tconst rhs = buildValueExpr(ts.slice(1), prec);\n\t\t\tconst op = ts[0].assertSymbol();\n\n\t\t\tif (!rhs || !op) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new UnaryExpr(op, rhs);\n\t\t} else {\n\t\t\treturn buildValueExpr(ts, prec + 1);\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @param {number} prec \n * @returns {ValueExpr | null}\n */\nfunction buildChainedValueExpr(ts, prec) {\n\t/** @type {ValueExpr | null} */\n\tlet expr = buildChainStartValueExpr(ts);\n\n\t// now we can parse the rest of the chaining\n\twhile (ts.length > 0) {\n\t\tif (expr === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst t = assertDefined(ts.shift());\n\n\t\tif (t.isGroup(\"(\")) {\n\t\t\texpr = buildCallExpr(t.site, expr, assertDefined(t.assertGroup()));\n\t\t} else if (t.isGroup(\"[\")) {\n\t\t\tt.syntaxError(\"invalid expression '[...]'\");\n\t\t\treturn null;\n\t\t} else if (t.isSymbol(\".\") && ts.length > 0 && ts[0].isWord(\"switch\")) {\n\t\t\texpr = buildSwitchExpr(expr, ts);\n\t\t} else if (t.isSymbol(\".\")) {\n\t\t\tconst name = assertToken(ts.shift(), t.site)?.assertWord()?.assertNotKeyword();\n\n\t\t\tif (!name) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\texpr = new MemberExpr(t.site, expr, name);\n\t\t} else if (t.isGroup(\"{\")) {\n\t\t\tt.syntaxError(\"invalid syntax\");\n\t\t\treturn null;\n\t\t} else if (t.isSymbol(\"::\")) {\n\t\t\tt.syntaxError(\"invalid syntax\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tt.syntaxError(`invalid syntax '${t.toString()}'`);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn expr;\n}\n\n/**\n * @param {Site} site \n * @param {ValueExpr} fnExpr \n * @param {Group} parens\n * @returns {CallExpr | null}\n */\nfunction buildCallExpr(site, fnExpr, parens) {\n\tconst callArgs = buildCallArgs(parens);\n\n\tif (callArgs === null) {\n\t\treturn null;\n\t} else {\n\t\treturn new CallExpr(site, fnExpr, callArgs);\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {ValueExpr | null}\n */\nfunction buildChainStartValueExpr(ts) {\n\tif (ts.length > 1 && ts[0].isGroup(\"(\") && ts[1].isSymbol(\"->\")) {\n\t\treturn buildFuncLiteralExpr(ts, null, true);\n\t} else if (ts[0].isWord(\"if\")) {\n\t\treturn buildIfElseExpr(ts);\n\t} else if (ts[0].isWord(\"switch\")) {\n\t\tts[0].syntaxError(\"expected '... .switch' instead of 'switch'\");\n\t\treturn null;\n\t} else if (ts[0].isLiteral()) {\n\t\treturn new PrimitiveLiteralExpr(assertDefined(ts.shift())); // can simply be reused\n\t} else if (ts[0].isGroup(\"(\")) {\n\t\treturn buildParensExpr(ts);\n\t} else if (Group.find(ts, \"{\") != -1) {\n\t\tif (ts[0].isGroup(\"[\")) {\n\t\t\treturn buildListLiteralExpr(ts);\n\t\t} else if (ts[0].isWord(\"Map\") && ts[1].isGroup(\"[\")) {\n\t\t\treturn buildMapLiteralExpr(ts); \n\t\t} else {\n\t\t\t// could be switch or literal struct construction\n\t\t\tconst iBraces = Group.find(ts, \"{\");\n\t\t\tconst iSwitch = Word.find(ts, \"switch\");\n\t\t\tconst iPeriod = SymbolToken.find(ts, \".\");\n\n\t\t\tif (iSwitch != -1 && iPeriod != -1 && iSwitch < iBraces && iPeriod < iBraces && iSwitch > iPeriod) {\n\t\t\t\treturn buildValueExpr(ts.splice(0, iPeriod));\n\t\t\t} else {\n\t\t\t\treturn buildStructLiteralExpr(ts);\n\t\t\t}\n\t\t}\n\t} else if (SymbolToken.find(ts, \"::\") != -1) {\n\t\treturn buildValuePathExpr(ts);\n\t} else if (ts[0].isWord()) {\n\t\tif (ts[0].isWord(\"const\") || ts[0].isWord(\"struct\") || ts[0].isWord(\"enum\") || ts[0].isWord(\"func\") || ts[0].isWord(\"import\")) {\n\t\t\tts[0].syntaxError(`invalid use of '${assertDefined(ts[0].assertWord()).value}', can only be used as top-level statement`);\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst name = assertDefined(ts.shift()?.assertWord());\n\n\t\t\tif (name.value == \"self\") {\n\t\t\t\treturn new ValueRefExpr(name);\n\t\t\t} else {\n\t\t\t\tconst n = name.assertNotKeyword();\n\n\t\t\t\tif (!n) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn new ValueRefExpr(n);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tts[0].syntaxError(\"invalid syntax\");\n\t\treturn null;\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts\n * @returns {ValueExpr | null}\n */\nfunction buildParensExpr(ts) {\n\tconst group = assertDefined(ts.shift()).assertGroup(\"(\");\n\n\tif (!group) {\n\t\treturn null;\n\t}\n\n\tconst site = group.site;\n\n\tif (group.fields.length === 0) {\n\t\tgroup.syntaxError(\"expected at least one expr in parens\");\n\t\treturn null;\n\t} else {\n\t\tconst fields = group.fields.map(fts => buildValueExpr(fts));\n\n\t\t/**\n\t\t * @type {ValueExpr[]}\n\t\t */\n\t\tconst nonNullFields = [];\n\n\t\tfields.forEach(f => {\n\t\t\tif (f !== null) {\n\t\t\t\tnonNullFields.push(f);\n\t\t\t}\n\t\t});\n\n\t\tif (nonNullFields.length == 0) {\n\t\t\t// error will already have been thrown internally\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new ParensExpr(site, nonNullFields);\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Group} parens \n * @returns {CallArgExpr[] | null}\n */\nfunction buildCallArgs(parens) {\n\t/**\n\t * @type {Set<string>}\n\t */\n\tconst names = new Set();\n\n\tconst callArgs = reduceNull(parens.fields.map(fts => {\n\t\tconst callArg = buildCallArgExpr(parens.site, fts);\n\n\t\tif (callArg !== null && callArg.isNamed()) {\n\t\t\tif (names.has(callArg.name)) {\n\t\t\t\tcallArg.syntaxError(`duplicate named call arg ${callArg.name}`);\n\t\t\t}\n\n\t\t\tnames.add(callArg.name);\n\t\t}\n\n\t\treturn callArg;\n\t}));\n\n\tif (callArgs === null) {\n\t\treturn null;\n\t} else {\n\t\tif (callArgs.some(ca => ca.isNamed()) && callArgs.some(ca => !ca.isNamed())) {\n\t\t\tcallArgs[0].syntaxError(\"can't mix positional and named args\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn callArgs;\n\t}\n}\n\n/**\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {CallArgExpr | null}\n */\nfunction buildCallArgExpr(site, ts) {\n\tif (ts.length == 0) {\n\t\tsite.syntaxError(\"invalid syntax\");\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {null | undefined | Word}\n\t */\n\tlet name = null;\n\n\tif (ts.length >= 2 && ts[0].isWord() && ts[1].isSymbol(\":\")) {\n\t\tname = assertDefined(ts.shift()).assertWord()?.assertNotKeyword();\n\n\t\tif (!name) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst colon = assertDefined(ts.shift());\n\n\t\tif (ts.length == 0) {\n\t\t\tcolon.syntaxError(\"expected value expressions after ':'\");\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tconst value = buildValueExpr(ts);\n\n\tif (!value) {\n\t\treturn null;\n\t}\n\n\treturn new CallArgExpr(name != null ? name.site : value.site, name, value);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {IfElseExpr | null}\n */\nfunction buildIfElseExpr(ts) {\n\tconst ifWord = assertDefined(ts.shift()).assertWord(\"if\");\n\n\tif (!ifWord) {\n\t\treturn null;\n\t}\n\n\tconst site = ifWord.site;\n\n\t/** @type {ValueExpr[]} */\n\tconst conditions = [];\n\n\t/** @type {ValueExpr[]} */\n\tconst branches = [];\n\twhile (true) {\n\t\tconst parens = assertToken(ts.shift(), site)?.assertGroup(\"(\");\n\n\t\tif (!parens) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst braces = assertToken(ts.shift(), site)?.assertGroup(\"{\");\n\n\t\tif (!braces) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (parens.fields.length != 1) {\n\t\t\tparens.syntaxError(\"expected single if-else condition\");\n\t\t\treturn null;\n\t\t}\n\n\t\tif (braces.fields.length == 0) {\n\t\t\tbraces.syntaxError(\"branch body can't be empty\");\n\t\t\treturn null;\n\t\t} else if (braces.fields.length != 1) {\n\t\t\tbraces.syntaxError(\"expected single if-else branch expession\");\n\t\t\treturn null;\n\t\t}\n\n\t\tconst cond = buildValueExpr(parens.fields[0]);\n\t\tconst branch = buildValueExpr(braces.fields[0]);\n\n\t\tif (cond === null || branch === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconditions.push(cond);\n\t\tbranches.push(branch);\n\n\t\tconst maybeElse = ts.shift();\n\n\t\tif (maybeElse === undefined ) {\n\t\t\t// add a void else branch\n\t\t\tbranches.push(new VoidExpr(braces.site));\n\t\t\tbreak;\n\t\t} else {\n\t\t\tconst elseWord = maybeElse.assertWord(\"else\");\n\n\t\t\tif (!elseWord) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst next = assertToken(ts.shift(), elseWord.site);\n\n\t\t\tif (!next) {\n\t\t\t\treturn null;\n\t\t\t} else if (next.isGroup(\"{\")) {\n\t\t\t\t// last group\n\t\t\t\tconst braces = next.assertGroup();\n\n\t\t\t\tif (!braces) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (braces.fields.length != 1) {\n\t\t\t\t\tbraces.syntaxError(\"expected single expession for if-else branch\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst elseBranch = buildValueExpr(braces.fields[0]);\n\n\t\t\t\tif (!elseBranch) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tbranches.push(elseBranch);\n\t\t\t\tbreak;\n\t\t\t} else if (next.isWord(\"if\")) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tnext.syntaxError(\"unexpected token\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn new IfElseExpr(site, conditions, branches);\n}\n\n/**\n * @package\n * @param {ValueExpr} controlExpr\n * @param {Token[]} ts \n * @returns {ValueExpr | null} - EnumSwitchExpr or DataSwitchExpr\n */\nfunction buildSwitchExpr(controlExpr, ts) {\n\tconst switchWord = assertDefined(ts.shift()).assertWord(\"switch\");\n\n\tif (!switchWord) {\n\t\treturn null;\n\t}\n\n\tconst site = switchWord.site;\n\n\tconst braces = assertToken(ts.shift(), site)?.assertGroup(\"{\");\n\n\tif (!braces) {\n\t\treturn null;\n\t}\n\n\t/** @type {SwitchCase[]} */\n\tconst cases = [];\n\n\t/** @type {null | SwitchDefault} */\n\tlet def = null;\n\n\tfor (let tsInner of braces.fields) {\n\t\tif (tsInner[0].isWord(\"else\") || tsInner[0].isWord(\"_\")) {\n\t\t\tif (def !== null) {\n\t\t\t\tdef.syntaxError(\"duplicate default case in switch\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tdef = buildSwitchDefault(tsInner);\n\t\t} else {\n\t\t\tif (def !== null) {\n\t\t\t\tdef.syntaxError(\"switch default case must come last\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst c = buildSwitchCase(tsInner);\n\n\t\t\tif (c === null) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tcases.push(c);\n\t\t\t}\n\t\t}\n\t}\n\n\t// check the uniqueness of each case here\n\t/** @type {Set<string>} */\n\tconst set = new Set()\n\tfor (let c of cases) {\n\t\tlet t = c.memberName.toString();\n\t\tif (set.has(t)) {\n\t\t\tc.memberName.syntaxError(`duplicate switch case '${t}')`);\n\t\t\treturn null;\n\t\t}\n\n\t\tset.add(t);\n\t}\n\n\tif (cases.length < 1) {\n\t\tsite.syntaxError(\"expected at least one switch case\");\n\t\treturn null;\n\t}\n\n\tif (cases.some(c => c.isDataMember())) {\n\t\tif (cases.length + (def === null ? 0 : 1) > 5) {\n\t\t\tsite.syntaxError(`too many cases for data switch, expected 5 or less, got ${cases.length.toString()}`);\n\t\t\treturn null;\n\t\t} else {\n\t\t\tlet count = 0;\n\t\t\tcases.forEach(c => {if (!c.isDataMember()){count++}});\n\n\t\t\tif (count > 1) {\n\t\t\t\tsite.syntaxError(`expected at most 1 enum case in data switch, got ${count}`);\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tif (count === 1 && cases.some(c => c instanceof UnconstrDataSwitchCase)) {\n\t\t\t\t\tsite.syntaxError(`can't have both enum and (Int, []Data) in data switch`);\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn new DataSwitchExpr(site, controlExpr, cases, def);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn new EnumSwitchExpr(site, controlExpr, cases, def);\n\t}\n}\n\n/**\n * @package\n * @param {Site} site\n * @param {Token[]} ts\n * @param {boolean} isAfterColon\n * @returns {Word | null} \n */\nfunction buildSwitchCaseName(site, ts, isAfterColon) {\n\tconst first = ts.shift();\n\n\tif (first === undefined) {\n\t\tif (isAfterColon) {\n\t\t\tsite.syntaxError(\"invalid switch case syntax, expected member name after ':'\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tsite.syntaxError(\"invalid switch case syntax\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t\t\n\tif (first.isWord(\"Map\")) {\n\t\tconst second = ts.shift();\n\n\t\tif (!second) {\n\t\t\tsite.syntaxError(\"expected token after 'Map'\");\n\t\t\treturn null;\n\t\t}\n\n\t\tconst keyTs = second.assertGroup(\"[]\", 1)?.fields[0];\n\n\t\tif (keyTs === undefined || keyTs === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst key = keyTs.shift();\n\n\t\tif (key === undefined) {\n\t\t\tsecond.syntaxError(\"expected 'Map[Data]Data'\");\n\t\t\treturn null;\n\t\t}\n\n\t\tkey.assertWord(\"Data\");\n\n\t\tif (keyTs.length > 0) {\n\t\t\tkeyTs[0].syntaxError(\"unexpected token after 'Data'\");\n\t\t\treturn null;\n\t\t}\n\n\t\tconst third = ts.shift();\n\n\t\tif (third === undefined) {\n\t\t\tsite.syntaxError(\"expected token after 'Map[Data]\");\n\t\t\treturn null;\n\t\t}\n\n\t\tthird.assertWord(\"Data\");\n\n\t\tif (ts.length > 0) {\n\t\t\tts[0].syntaxError(\"unexpected token after 'Map[Data]Data'\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Word(first.site, \"Map[Data]Data\");\n\t} else if (first.isWord()) {\n\t\tif (ts.length > 0) {\n\t\t\tts[0].syntaxError(\"unexpected token\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn first?.assertWord()?.assertNotKeyword() ?? null;\n\t} else if (first.isGroup(\"[\")) {\n\t\t// list \n\t\tfirst.assertGroup(\"[\", 0);\n\n\t\tconst second = ts.shift();\n\n\t\tif (second === undefined) {\n\t\t\tsite.syntaxError(\"expected token after '[]'\");\n\t\t\treturn null;\n\t\t} else if (ts.length > 0) {\n\t\t\tts[0].syntaxError(\"unexpected token\");\n\t\t\treturn null;\n\t\t}\n\n\t\tsecond.assertWord(\"Data\");\n\n\t\treturn new Word(first.site, \"[]Data\");\n\t} else {\n\t\tfirst.syntaxError(\"invalid switch case name syntax\");\n\t\treturn null;\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {SwitchCase | null}\n */\nfunction buildSwitchCase(ts) {\n\tconst arrowPos = SymbolToken.find(ts, \"=>\");\n\n\tif (arrowPos == -1) {\n\t\tts[0].syntaxError(\"expected '=>' in switch case\");\n\t\treturn null;\n\t} else if (arrowPos == 0) {\n\t\tts[0].syntaxError(\"expected '<word>' or '<word>: <word>' to the left of '=>'\");\n\t\treturn null;\n\t}\n\n\tconst tsLeft = ts.splice(0, arrowPos);\n\n\tif (tsLeft.length === 1 && tsLeft[0].isGroup(\"(\")) {\n\t\treturn buildMultiArgSwitchCase(tsLeft, ts);\n\t} else {\n\t\treturn buildSingleArgSwitchCase(tsLeft, ts);\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {null | [?Word, Word]} - varName is optional\n */\nfunction buildSwitchCaseNameType(ts) {\n\tconst colonPos = SymbolToken.find(ts, \":\");\n\n\t/** @type {null | Word} */\n\tlet varName = null;\n\n\t/** @type {null | Word} */\n\tlet memberName = null;\n\n\tif (colonPos != -1) {\n\t\tconst maybeVarName = assertDefined(ts.shift()).assertWord()?.assertNotKeyword();\n\n\t\tif (!maybeVarName) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvarName = maybeVarName;\n\t\t\n\t\tconst maybeColon = ts.shift();\n\n\t\tif (maybeColon === undefined) {\n\t\t\tvarName.syntaxError(\"invalid switch case syntax, expected '(<name>: <enum-member>)', got '(<name>)'\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tvoid maybeColon.assertSymbol(\":\");\n\n\t\t\tmemberName = buildSwitchCaseName(maybeColon.site, ts, true);\n\t\t}\n\t} else {\n\t\tmemberName = buildSwitchCaseName(ts[0].site, ts, false);\n\t}\n\n\tif (ts.length !== 0) {\n\t\tts[0].syntaxError(\"unexpected token\");\n\t\treturn null;\n\t}\n\n\tif (memberName === null) {\n\t\t// error will already have been thrown internally\n\t\treturn null;\n\t} else {\n\t\treturn [varName, memberName];\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} tsLeft\n * @param {Token[]} ts\n * @returns {SwitchCase | null}\n */\nfunction buildMultiArgSwitchCase(tsLeft, ts) {\n\tconst parens = assertDefined(tsLeft.shift()).assertGroup(\"(\");\n\n\tif (!parens) {\n\t\treturn null;\n\t}\n\n\tconst pairs = reduceNull(parens.fields.map(fts => buildSwitchCaseNameType(fts)));\n\n\tif (pairs === null) {\n\t\treturn null;\n\t}\n\n\tassert(tsLeft.length === 0);\n\n\tif (pairs.length !== 2) {\n\t\tparens.syntaxError(`expected (Int, []Data) case, got (${pairs.map(p => p[1].value).join(\", \")}`);\n\t\treturn null;\n\t} else if (pairs[0][1].value != \"Int\" || pairs[1][1].value != \"[]Data\") {\n\t\tparens.syntaxError(`expected (Int, []Data) case, got (${pairs[0][1].value}, ${pairs[1][1].value})`);\n\t\treturn null;\n\t} else {\n\t\tconst maybeArrow = ts.shift();\n\n\t\tif (maybeArrow === undefined) {\n\t\t\tparens.syntaxError(\"expected '=>'\");\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst arrow = maybeArrow.assertSymbol(\"=>\");\n\n\t\t\tif (!arrow) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst bodyExpr = buildSwitchCaseBody(arrow.site, ts);\n\n\t\t\tif (bodyExpr === null) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn new UnconstrDataSwitchCase(arrow.site, pairs[0][0], pairs[1][0], bodyExpr);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} tsLeft \n * @param {Token[]} ts \n * @returns {SwitchCase | null}\n */\nfunction buildSingleArgSwitchCase(tsLeft, ts) {\n\tconst site = tsLeft[tsLeft.length-1].site;\n\n\tconst destructExpr = buildDestructExpr(site, tsLeft, true);\n\n\tif (destructExpr === null) {\n\t\treturn null;\n\t} else if (!destructExpr.hasType()) {\n\t\tdestructExpr.site.syntaxError(\"invalid switch case syntax\");\n\t\treturn null;\n\t}\n\t\n\tconst maybeArrow = ts.shift();\n\n\tif (maybeArrow === undefined) {\n\t\tsite.syntaxError(\"expected '=>'\");\n\t\treturn null;\n\t} else {\n\t\tconst arrow = maybeArrow.assertSymbol(\"=>\");\n\n\t\tif (!arrow) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst bodyExpr = buildSwitchCaseBody(arrow.site, ts);\n\n\t\tif (bodyExpr === null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new SwitchCase(arrow.site, destructExpr, bodyExpr);\n\t\t}\n\t}\n}\n\n/**\n * @package\n * @param {Site} site \n * @param {Token[]} ts \n * @returns {ValueExpr | null}\n */\nfunction buildSwitchCaseBody(site, ts) {\n\t/** @type {?ValueExpr} */\n\tlet bodyExpr = null;\n\n\tif (ts.length == 0) {\n\t\tsite.syntaxError(\"expected expression after '=>'\");\n\t\treturn null;\n\t} else if (ts[0].isGroup(\"{\")) {\n\t\tif (ts.length > 1) {\n\t\t\tts[1].syntaxError(\"unexpected token\");\n\t\t\treturn null;\n\t\t}\n\n\t\tconst tsBody = ts[0].assertGroup(\"{\", 1)?.fields[0];\n\n\t\tif (tsBody === undefined || tsBody === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tbodyExpr = buildValueExpr(tsBody);\n\t} else {\n\t\tbodyExpr = buildValueExpr(ts);\n\t}\n\n\treturn bodyExpr;\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {SwitchDefault | null}\n */\nfunction buildSwitchDefault(ts) {\n\tconst elseWord = assertDefined(ts.shift()).assertWord();\n\n\tif (!elseWord) {\n\t\treturn null;\n\t} else if (!(elseWord.isWord(\"else\") || elseWord.isWord(\"_\"))) {\n\t\telseWord.syntaxError(\"expected 'else' or '_'\");\n\t\treturn null;\n\t}\n\n\tconst site = elseWord.site;\n\n\tconst maybeArrow = ts.shift();\n\tif (maybeArrow === undefined) {\n\t\tsite.syntaxError(`expected '=>' after '${elseWord.value}'`);\n\t\treturn null;\n\t} else {\n\t\tconst arrow = maybeArrow.assertSymbol(\"=>\");\n\n\t\tif (!arrow) {\n\t\t\treturn null;\n\t\t}\n\n\t\t/** @type {null | ValueExpr} */\n\t\tlet bodyExpr = null;\n\n\t\tif (ts.length == 0) {\n\t\t\tarrow.syntaxError(\"expected expression after '=>'\");\n\t\t\treturn null;\n\t\t} else if (ts[0].isGroup(\"{\")) {\n\t\t\tif (ts.length > 1) {\n\t\t\t\tts[1].syntaxError(\"unexpected token\");\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst bodyTs = ts[0].assertGroup(\"{\", 1)?.fields[0];\n\n\t\t\t\tif (bodyTs === undefined || bodyTs === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tbodyExpr = buildValueExpr(bodyTs);\n\t\t\t}\n\t\t} else {\n\t\t\tbodyExpr = buildValueExpr(ts);\n\t\t}\n\n\t\tif (!bodyExpr) {\n\t\t\tarrow.syntaxError(\"empty switch default case body\");\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new SwitchDefault(arrow.site, bodyExpr);\n\t}\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {ListLiteralExpr | null}\n */\nfunction buildListLiteralExpr(ts) {\n\tconst group = assertDefined(ts.shift()).assertGroup(\"[\", 0);\n\n\tif (!group) {\n\t\treturn null;\n\t}\n\n\tconst site = group.site;\n\n\tconst bracesPos = Group.find(ts, \"{\");\n\n\tif (bracesPos == -1) {\n\t\tsite.syntaxError(\"invalid list literal expression syntax\");\n\t\treturn null;\n\t}\n\n\tconst itemTypeExpr = buildTypeExpr(site, ts.splice(0, bracesPos));\n\n\tif (!itemTypeExpr) {\n\t\treturn null;\n\t}\n\n\tconst braces = assertToken(ts.shift(), site)?.assertGroup(\"{\");\n\n\tif (!braces) {\n\t\treturn null;\n\t}\n\n\tconst itemExprs = reduceNull(braces.fields.map(fts => buildValueExpr(fts)));\n\n\tif (itemExprs === null) {\n\t\t// error will have already been thrown internally\n\t\treturn null;\n\t}\n\n\treturn new ListLiteralExpr(site, itemTypeExpr, itemExprs);\n}\n\n/**\n * @package\n * @param {Token[]} ts\n * @returns {MapLiteralExpr | null}\n */\nfunction buildMapLiteralExpr(ts) {\n\tconst mapWord = assertDefined(ts.shift()).assertWord(\"Map\");\n\n\tif (!mapWord) {\n\t\treturn null;\n\t}\n\n\tconst site = mapWord.site;\n\n\tconst bracket = assertDefined(ts.shift()).assertGroup(\"[\", 1);\n\n\tif (!bracket) {\n\t\treturn null;\n\t}\n\n\tconst keyTypeExpr = buildTypeExpr(site, bracket.fields[0]);\n\n\tif (!keyTypeExpr) {\n\t\treturn null;\n\t}\n\n\tconst bracesPos = Group.find(ts, \"{\");\n\n\tif (bracesPos == -1) {\n\t\tsite.syntaxError(\"invalid map literal expression syntax\");\n\t\treturn null;\n\t}\n\n\tconst valueTypeExpr = buildTypeExpr(site, ts.splice(0, bracesPos));\n\n\tif (!valueTypeExpr) {\n\t\treturn null;\n\t}\n\n\tconst braces = assertDefined(ts.shift()).assertGroup(\"{\");\n\n\tif (!braces) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * @type {null | [ValueExpr, ValueExpr][]}\n\t */\n\tconst pairs = reduceNullPairs(braces.fields.map(fts => {\n\t\tconst colonPos = SymbolToken.find(fts, \":\");\n\n\t\tif (colonPos == -1) {\n\t\t\tif (fts.length == 0) {\n\t\t\t\tbraces.syntaxError(\"unexpected empty field\");\n\t\t\t} else {\n\t\t\t\tfts[0].syntaxError(\"expected ':' in map literal field\");\n\t\t\t}\n\t\t} else if (colonPos == 0) {\n\t\t\tfts[colonPos].syntaxError(\"expected expression before ':' in map literal field\");\n\t\t} else if (colonPos == fts.length - 1) {\n\t\t\tfts[colonPos].syntaxError(\"expected expression after ':' in map literal field\");\n\t\t} else {\n\t\t\tconst keyExpr = buildValueExpr(fts.slice(0, colonPos));\n\n\t\t\tconst valueExpr = buildValueExpr(fts.slice(colonPos+1));\n\n\t\t\t/**\n\t\t\t * @type {[ValueExpr | null, ValueExpr | null]}\n\t\t\t */\n\t\t\treturn [keyExpr, valueExpr];\n\t\t}\n\n\t\treturn [null, null];\n\t}));\n\n\tif (pairs === null) {\n\t\treturn null;\n\t}\n\n\treturn new MapLiteralExpr(site, keyTypeExpr, valueTypeExpr, pairs);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {StructLiteralExpr | null}\n */\nfunction buildStructLiteralExpr(ts) {\n\tconst bracesPos = Group.find(ts, \"{\");\n\n\tassert(bracesPos != -1);\n\n\tconst site = ts[bracesPos].site;\n\n\tif (bracesPos == 0) {\n\t\tsite.syntaxError(\"expected struct type before braces\");\n\t\treturn null;\n\t}\n\t\n\tconst typeExpr = buildTypeExpr(site, ts.splice(0, bracesPos));\n\n\tif (!typeExpr) {\n\t\treturn null;\n\t}\n\n\tconst braces = assertDefined(ts.shift()).assertGroup(\"{\");\n\n\tif (!braces) {\n\t\treturn null;\n\t}\n\n\tconst fields = reduceNull(braces.fields.map(fts => buildStructLiteralField(braces.site, fts)));\n\n\tif (fields === null) {\n\t\treturn null;\n\t} \n\t\n\tif (fields.every(f => f.isNamed()) || fields.every(f => !f.isNamed())) {\n\t\treturn new StructLiteralExpr(typeExpr, fields);\n\t} else {\n\t\tbraces.site.syntaxError(\"mangled literal struct (hint: specify all fields positionally or all with keys)\");\n\t\treturn null;\n\t}\n}\n\n/**\n * @package\n * @param {Site} site - site of the braces\n * @param {Token[]} ts\n * @returns {StructLiteralField | null}\n */\nfunction buildStructLiteralField(site, ts) {\n\tif (ts.length > 2 && ts[0].isWord() && ts[1].isSymbol(\":\")) {\n\t\treturn buildStructLiteralNamedField(site, ts);\n\t} else {\n\t\treturn buildStructLiteralUnnamedField(site, ts);\n\t}\n}\n\n/**\n * @package\n * @param {Site} site\n * @param {Token[]} ts\n * @returns {StructLiteralField | null}\n */\nfunction buildStructLiteralNamedField(site, ts) {\n\tconst name = assertToken(ts.shift(), site, \"empty struct literal field\")?.assertWord()?.assertNotKeyword();\n\n\tif (!name) {\n\t\treturn null;\n\t}\n\n\tconst colon = assertToken(ts.shift(), name.site, \"expected ':' after struct field name\")?.assertSymbol(\":\");\n\n\tif (!colon) {\n\t\treturn null;\n\t}\n\n\tif (ts.length == 0) {\n\t\tcolon.syntaxError(\"expected expression after ':'\");\n\t\treturn null;\n\t}\n\tconst valueExpr = buildValueExpr(ts);\n\n\tif (!valueExpr) {\n\t\treturn null;\n\t}\n\n\treturn new StructLiteralField(name, valueExpr);\n}\n\n/**\n * @package\n * @param {Site} site\n * @param {Token[]} ts\n * @returns {StructLiteralField | null}\n */\nfunction buildStructLiteralUnnamedField(site, ts) {\n\tconst valueExpr = buildValueExpr(ts);\n\n\tif (!valueExpr) {\n\t\treturn null;\n\t}\n\n\treturn new StructLiteralField(null, valueExpr);\n}\n\n/**\n * @package\n * @param {Token[]} ts \n * @returns {ValueExpr | null}\n */\nfunction buildValuePathExpr(ts) {\n\tconst dcolonPos = SymbolToken.findLast(ts, \"::\");\n\n\tassert(dcolonPos != -1);\n\n\tconst typeExpr = buildTypeExpr(ts[dcolonPos].site, ts.splice(0, dcolonPos));\n\n\tif (!typeExpr) {\n\t\treturn null;\n\t}\n\n\tconst dcolon = assertDefined(ts.shift()?.assertSymbol(\"::\"));\n\n\tconst memberName = assertToken(ts.shift(), dcolon.site)?.assertWord()?.assertNotKeyword();\n\n\tif (!memberName) {\n\t\treturn null;\n\t}\n\t\n\treturn new ValuePathExpr(typeExpr, memberName);\n}\n\n\n/////////////////////////////\n// Section 19: IR definitions\n/////////////////////////////\n\n/**\n * For collecting test coverage statistics\n * @type {?((name: string, count: number) => void)}\n */\nvar onNotifyRawUsage = null;\n\n/**\n * Set the statistics collector (used by the test-suite)\n * @param {(name: string, count: number) => void} callback \n */\nfunction setRawUsageNotifier(callback) {\n\tonNotifyRawUsage = callback;\n}\n\n/**\n * Wrapper for a builtin function (written in IR)\n */\nclass RawFunc {\n\t#name;\n\t#definition;\n\n\t/** @type {Set<string>} */\n\t#dependencies;\n\n\t/**\n\t * Construct a RawFunc, and immediately scan the definition for dependencies\n\t * @param {string} name \n\t * @param {string} definition \n\t */\n\tconstructor(name, definition) {\n\t\tthis.#name = name;\n\t\tassert(definition != undefined);\n\t\tthis.#definition = definition;\n\t\tthis.#dependencies = new Set();\n\n\t\tlet re = new RegExp(\"__helios__[a-zA-Z_0-9]*\", \"g\");\n\n\t\tlet matches = this.#definition.match(re);\n\n\t\tif (matches !== null) {\n\t\t\tfor (let match of matches) {\n\t\t\t\tthis.#dependencies.add(match);\n\t\t\t}\n\t\t}\n\t}\n\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\t/**\n\t * Loads 'this.#dependecies' (if not already loaded), then load 'this'\n\t * @param {Map<string, RawFunc>} db \n\t * @param {Map<string, IR>} dst \n\t * @returns {void}\n\t */\n\tload(db, dst) {\n\t\tif (onNotifyRawUsage !== null) {\n\t\t\tonNotifyRawUsage(this.#name, 1);\n\t\t}\n\n\t\tif (dst.has(this.#name)) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tfor (let dep of this.#dependencies) {\n\t\t\t\tif (!db.has(dep)) {\n\t\t\t\t\tthrow new Error(`InternalError: dependency ${dep} is not a builtin`);\n\t\t\t\t} else {\n\t\t\t\t\tassertDefined(db.get(dep)).load(db, dst);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst.set(this.#name, new IR(replaceTabs(this.#definition)));\n\t\t}\n\t}\n}\n\n/**\n * Initializes the db containing all the builtin functions\n * @returns {Map<string, RawFunc>}\n */\n// only need to wrap these source in IR right at the very end\nfunction makeRawFunctions() {\n\t/** @type {Map<string, RawFunc>} */\n\tlet db = new Map();\n\n\t// local utility functions\n\n\t/**\n\t * @param {RawFunc} fn \n\t */\n\tfunction add(fn) {\n\t\tif (db.has(fn.name)) {\n\t\t\tthrow new Error(`builtin ${fn.name} duplicate`);\n\t\t}\n\t\tdb.set(fn.name, fn);\n\t}\n\n\t/**\n\t * Adds basic auto members to a fully named type\n\t * @param {string} ns \n\t */\n\tfunction addDataFuncs(ns) {\n\t\tadd(new RawFunc(`${ns}____eq`, \"__helios__common____eq\"));\n\t\tadd(new RawFunc(`${ns}____neq`, \"__helios__common____neq\"));\n\t\tadd(new RawFunc(`${ns}__serialize`, \"__helios__common__serialize\"));\n\t\tadd(new RawFunc(`${ns}__from_data`, \"__helios__common__identity\"));\n\t}\n\n\t/**\n\t * Adds basic auto members to a fully named enum type\n\t * @param {string} ns \n\t */\n\tfunction addEnumDataFuncs(ns) {\n\t\tadd(new RawFunc(`${ns}____eq`, \"__helios__common____eq\"));\n\t\tadd(new RawFunc(`${ns}____neq`, \"__helios__common____neq\"));\n\t\tadd(new RawFunc(`${ns}__serialize`, \"__helios__common__serialize\"));\n\t}\n\n\t/**\n\t * Generates the IR needed to unwrap a Plutus-core constrData\n\t * @param {string} dataExpr\n\t * @param {number} iConstr \n\t * @param {number} iField \n\t * @param {string} errorExpr \n\t * @returns {string}\n\t */\n\tfunction unData(dataExpr, iConstr, iField, errorExpr = \"error(\\\"unexpected constructor index\\\")\") {\n\t\tlet inner = \"__core__sndPair(pair)\";\n\t\tfor (let i = 0; i < iField; i++) {\n\t\t\tinner = `__core__tailList(${inner})`;\n\t\t}\n\n\t\t// deferred evaluation of ifThenElse branches\n\t\treturn `(pair) -> {__core__ifThenElse(__core__equalsInteger(__core__fstPair(pair), ${iConstr}), () -> {__core__headList(${inner})}, () -> {${errorExpr}})()}(__core__unConstrData(${dataExpr}))`;\n\t}\n\n\t/**\n\t * Generates verbose IR for unwrapping a Plutus-core constrData.\n\t * If config.DEBUG === false then returns IR without print statement\n\t * @param {string} dataExpr\n\t * @param {string} constrName\n\t * @param {number} iConstr\n\t * @param {number} iField\n\t * @returns {string}\n\t */\n\tfunction unDataVerbose(dataExpr, constrName, iConstr, iField) {\n\t\tif (!config.DEBUG) {\n\t\t\treturn unData(dataExpr, iConstr, iField);\n\t\t} else {\n\t\t\treturn unData(dataExpr, iConstr, iField, `__helios__common__verbose_error(__core__appendString(\"bad constr for ${constrName}, want ${iConstr.toString()} but got \", __helios__int__show(__core__fstPair(pair))()))`)\n\t\t}\n\t}\n\n\t/**\n\t * Generates IR for constructing a list.\n\t * By default the result is kept as list, and not converted to data\n\t * @param {string[]} args \n\t * @param {boolean} toData \n\t * @returns \n\t */\n\tfunction makeList(args, toData = false) {\n\t\tlet n = args.length;\n\t\tlet inner = \"__core__mkNilData(())\";\n\n\t\tfor (let i = n - 1; i >= 0; i--) {\n\t\t\tinner = `__core__mkCons(${args[i]}, ${inner})`;\n\t\t}\n\n\t\tif (toData) {\n\t\t\tinner = `__core__listData(${inner})`\n\t\t}\n\n\t\treturn inner;\n\t}\n\n\n\t// Common builtins\n\tadd(new RawFunc(\"__helios__common__verbose_error\",\n\t`(msg) -> {\n\t\t__core__trace(msg, () -> {error(\"\")})()\n\t}`));\n\tadd(new RawFunc(\"__helios__common__assert_constr_index\",\n\t`(data, i) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__equalsInteger(__core__fstPair(__core__unConstrData(data)), i),\n\t\t\t() -> {data},\n\t\t\t() -> {error(\"unexpected constructor index\")}\n\t\t)()\n\t}`));\n\tadd(new RawFunc(\"__helios__common__identity\",\n\t`(self) -> {self}`));\n\tadd(new RawFunc(\"__helios__common__not\",\n\t`(b) -> {\n\t\t__core__ifThenElse(b, false, true)\n\t}`));\n\tadd(new RawFunc(\"__helios__common____eq\", \"__core__equalsData\"));\n\tadd(new RawFunc(\"__helios__common____neq\",\n\t`(a, b) -> {\n\t\t__helios__common__not(__core__equalsData(a, b))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__serialize\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__core__bData(__core__serialiseData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__common__any\",\n\t`(self, fn) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn)\n\t\t}(\n\t\t\t(recurse, self, fn) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself, \n\t\t\t\t\t() -> {false}, \n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\tfn(__core__headList(self)),\n\t\t\t\t\t\t\t() -> {true}, \n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__all\", \n\t`(self, fn) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn)\n\t\t}(\n\t\t\t(recurse, self, fn) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself,\n\t\t\t\t\t() -> {true},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\tfn(__core__headList(self)),\n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)},\n\t\t\t\t\t\t\t() -> {false}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__map\",\n\t`(self, fn, init) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, init)\n\t\t}(\n\t\t\t(recurse, rem, lst) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\trem,\n\t\t\t\t\t() -> {lst},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__mkCons(\n\t\t\t\t\t\t\tfn(__core__headList(rem)), \n\t\t\t\t\t\t\trecurse(recurse, __core__tailList(rem), lst)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__filter\", \n\t`(self, fn, nil) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn)\n\t\t}(\n\t\t\t(recurse, self, fn) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself, \n\t\t\t\t\t() -> {nil}, \n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\tfn(__core__headList(self)),\n\t\t\t\t\t\t\t() -> {__core__mkCons(__core__headList(self), recurse(recurse, __core__tailList(self), fn))}, \n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__filter_list\", \n\t`(self, fn) -> {\n\t\t__helios__common__filter(self, fn, __helios__common__list_0)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__filter_map\",\n\t`(self, fn) -> {\n\t\t__helios__common__filter(self, fn, __core__mkNilPairData(()))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__find\",\n\t`(self, fn, callback) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn)\n\t\t}(\n\t\t\t(recurse, self, fn) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself, \n\t\t\t\t\t() -> {error(\"not found\")}, \n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\tfn(__core__headList(self)), \n\t\t\t\t\t\t\t() -> {callback(__core__headList(self))}, \n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__find_safe\",\n\t`(self, fn, callback) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn)\n\t\t}(\n\t\t\t(recurse, self, fn) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself, \n\t\t\t\t\t() -> {__core__constrData(1, __helios__common__list_0)}, \n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\tfn(__core__headList(self)), \n\t\t\t\t\t\t\t() -> {__core__constrData(0, __helios__common__list_1(callback(__core__headList(self))))}, \n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__fold\",\n\t`(self, fn, z) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn, z)\n\t\t}(\n\t\t\t(recurse, self, fn, z) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself, \n\t\t\t\t\t() -> {z}, \n\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn, fn(z, __core__headList(self)))}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__fold_lazy\",\n\t`(self, fn, z) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, self, fn, z)\n\t\t}(\n\t\t\t(recurse, self, fn, z) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tself, \n\t\t\t\t\t() -> {z}, \n\t\t\t\t\t() -> {fn(__core__headList(self), () -> {recurse(recurse, __core__tailList(self), fn, z)})}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__insert_in_sorted\",\n\t`(x, lst, comp) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, lst)\n\t\t}(\n\t\t\t(recurse, lst) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tlst,\n\t\t\t\t\t() -> {__core__mkCons(x, lst)},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t(head) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\tcomp(x, head),\n\t\t\t\t\t\t\t\t() -> {__core__mkCons(x, lst)},\n\t\t\t\t\t\t\t\t() -> {__core__mkCons(head, recurse(recurse, __core__tailList(lst)))}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}(__core__headList(lst))\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__sort\", \n\t`(lst, comp) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, lst)\n\t\t}(\n\t\t\t(recurse, lst) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tlst,\n\t\t\t\t\t() -> {lst},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t(head, tail) -> {\n\t\t\t\t\t\t\t__helios__common__insert_in_sorted(head, tail, comp)\n\t\t\t\t\t\t}(__core__headList(lst), recurse(recurse, __core__tailList(lst)))\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__map_get\",\n\t`(self, key, fnFound, fnNotFound) -> {\n\t\t(self) -> {\n\t\t\t(recurse) -> {\n\t\t\t\trecurse(recurse, self, key)\n\t\t\t}(\n\t\t\t\t(recurse, self, key) -> {\n\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\tself, \n\t\t\t\t\t\tfnNotFound, \n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsData(key, __core__fstPair(__core__headList(self))), \n\t\t\t\t\t\t\t\t() -> {fnFound(__core__sndPair(__core__headList(self)))}, \n\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), key)}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__is_in_bytearray_list\",\n\t`(lst, key) -> {\n\t\t__helios__common__any(lst, (item) -> {__core__equalsData(item, key)})\n\t}`));\n\tadd(new RawFunc(\"__helios__common__unBoolData\",\n\t`(d) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__equalsInteger(__core__fstPair(__core__unConstrData(d)), 0), \n\t\t\tfalse, \n\t\t\ttrue\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__boolData\",\n\t`(b) -> {\n\t\t__core__constrData(__core__ifThenElse(b, 1, 0), __helios__common__list_0)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__unStringData\",\n\t`(d) -> {\n\t\t__core__decodeUtf8(__core__unBData(d))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__stringData\",\n\t`(s) -> {\n\t\t__core__bData(__core__encodeUtf8(s))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__length\", \n\t`(lst) -> {\n\t\t(recurse) -> {\n\t\t\t__core__iData(recurse(recurse, lst))\n\t\t}(\n\t\t\t(recurse, lst) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tlst, \n\t\t\t\t\t() -> {0}, \n\t\t\t\t\t() -> {__core__addInteger(recurse(recurse, __core__tailList(lst)), 1)}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__max\",\n\t`(a, b) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__lessThanInteger(a, b),\n\t\t\tb,\n\t\t\ta\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__min\", \n\t`(a, b) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__lessThanEqualsInteger(a, b),\n\t\t\ta,\n\t\t\tb\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__concat\", \n\t`(a, b) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, b, a)\n\t\t}(\n\t\t\t(recurse, lst, rem) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\trem,\n\t\t\t\t\t() -> {lst},\n\t\t\t\t\t() -> {__core__mkCons(__core__headList(rem), recurse(recurse, lst, __core__tailList(rem)))}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__common__slice_bytearray\",\n\t`(self, selfLengthFn) -> {\n\t\t(start, end) -> {\n\t\t\t(self) -> {\n\t\t\t\t(start, end) -> {\n\t\t\t\t\t(normalize) -> {\n\t\t\t\t\t\t__core__bData(\n\t\t\t\t\t\t\t(fn) -> {\n\t\t\t\t\t\t\t\tfn(normalize(start))\n\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t(start) -> {\n\t\t\t\t\t\t\t\t\t(fn) -> {\n\t\t\t\t\t\t\t\t\t\tfn(normalize(end))\n\t\t\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t\t\t(end) -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__sliceByteString(start, __core__subtractInteger(end, __helios__common__max(start, 0)), self)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}(\n\t\t\t\t\t\t(pos) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__lessThanInteger(pos, 0),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t__core__addInteger(__core__addInteger(selfLengthFn(self), 1), pos)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\tpos\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}(__core__unIData(start), __core__unIData(end))\n\t\t\t}(__core__unBData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__common__starts_with\", \n\t`(self, selfLengthFn) -> {\n\t\t(self) -> {\n\t\t\t(prefix) -> {\n\t\t\t\t(prefix) -> {\n\t\t\t\t\t(n, m) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__lessThanInteger(n, m),\n\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__equalsByteString(prefix, __core__sliceByteString(0, m, self))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(selfLengthFn(self), __core__lengthOfByteString(prefix))\n\t\t\t\t}(__core__unBData(prefix))\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__ends_with\",\n\t`(self, selfLengthFn) -> {\n\t\t(self) -> {\n\t\t\t(suffix) -> {\n\t\t\t\t(suffix) -> {\n\t\t\t\t\t(n, m) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__lessThanInteger(n, m),\n\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__equalsByteString(suffix, __core__sliceByteString(__core__subtractInteger(n, m), m, self))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(selfLengthFn(self), __core__lengthOfByteString(suffix))\n\t\t\t\t}(__core__unBData(suffix))\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__fields\", \n\t`(self) -> {\n\t\t__core__sndPair(__core__unConstrData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__field_0\", \n\t`(self) -> {\n\t\t__core__headList(__helios__common__fields(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__fields_after_0\",\n\t`(self) -> {\n\t\t__core__tailList(__helios__common__fields(self))\n\t}`));\n\tfor (let i = 1; i < 20; i++) {\n\t\tadd(new RawFunc(`__helios__common__field_${i.toString()}`,\n\t`(self) -> {\n\t\t__core__headList(__helios__common__fields_after_${(i-1).toString()}(self))\n\t}`));\n\t\tadd(new RawFunc(`__helios__common__fields_after_${i.toString()}`,\n\t`(self) -> {\n\t\t__core__tailList(__helios__common__fields_after_${(i-1).toString()}(self))\n\t}`));\n\t}\n\tadd(new RawFunc(\"__helios__common__tuple_field_0\",\n\t`(self) -> {\n\t\t__core__headList(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__tuple_fields_after_0\", \n\t`(self) -> {\n\t\t__core__tailList(__core__unListData(self))\n\t}`));\n\tfor (let i = 1; i < 20; i++) {\n\t\tadd(new RawFunc(`__helios__common__tuple_field_${i.toString()}`,\n\t`(self) -> {\n\t\t__core__headList(__helios__common__tuple_fields_after_${(i-1).toString()}(self))\n\t}`));\n\t\tadd(new RawFunc(`__helios__common__tuple_fields_after_${i.toString()}`,\n\t`(self) -> {\n\t\t__core__tailList(__helios__common__tuple_fields_after_${(i-1).toString()}(self))\n\t}`));\n\t}\n\tadd(new RawFunc(\"__helios__common__list_0\", \"__core__mkNilData(())\"));\n\tadd(new RawFunc(\"__helios__common__list_1\", \n\t`(a) -> {\n\t\t__core__mkCons(a, __helios__common__list_0)\n\t}`));\n\tfor (let i = 2; i < 20; i++) {\n\t\t/**\n\t\t * @type {string[]}\n\t\t */\n\t\tlet args = [];\n\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\targs.push(`arg${j.toString()}`);\n\t\t}\n\n\t\tlet woFirst = args.slice()\n\t\tlet first = assertDefined(woFirst.shift());\n\n\t\tadd(new RawFunc(`__helios__common__list_${i.toString()}`,\n\t`(${args.join(\", \")}) -> {\n\t\t__core__mkCons(${first}, __helios__common__list_${(i-1).toString()}(${woFirst.join(\", \")}))\n\t}`));\n\t}\n\tadd(new RawFunc(\"__helios__common__hash_datum_data\", \n\t`(data) -> {\n\t\t__core__bData(__core__blake2b_256(__core__serialiseData(data)))\n\t}`));\n\n\n\t// Global builtin functions\n\tadd(new RawFunc(\"__helios__print\", \n\t`(msg) -> {\n\t\t__core__trace(__helios__common__unStringData(msg), ())\n\t}`));\n\tadd(new RawFunc(\"__helios__error\",\n\t`(msg) -> {\n\t\t__core__trace(\n\t\t\t__helios__common__unStringData(msg), \n\t\t\t() -> {\n\t\t\t\terror(\"error thrown by user-code\")\n\t\t\t}\n\t\t)()\n\t}`));\n\tadd(new RawFunc(\"__helios__assert\",\n\t`(cond, msg) -> {\n\t\t__core__ifThenElse(\n\t\t\tcond,\n\t\t\t() -> {\n\t\t\t\t()\n\t\t\t},\n\t\t\t() -> {\n\t\t\t\t__core__trace(\n\t\t\t\t\t__helios__common__unStringData(msg),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\terror(\"assert failed\")\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)()\n\t}`));\n\n\n\t// Int builtins\n\taddDataFuncs(\"__helios__int\");\n\tadd(new RawFunc(\"__helios__int____neg\",\n\t`(self) -> {\n\t\t__core__iData(__core__multiplyInteger(__core__unIData(self), -1))\t\n\t}`));\n\tadd(new RawFunc(\"__helios__int____pos\", \"__helios__common__identity\"));\n\tadd(new RawFunc(\"__helios__int____add\",\n\t`(a, b) -> {\n\t\t__core__iData(__core__addInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____sub\",\n\t`(a, b) -> {\n\t\t__core__iData(__core__subtractInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____mul\",\n\t`(a, b) -> {\n\t\t__core__iData(__core__multiplyInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____div\",\n\t`(a, b) -> {\n\t\t__core__iData(__core__divideInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____mod\",\n\t`(a, b) -> {\n\t\t__core__iData(__core__modInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____geq\",\n\t`(a, b) -> {\n\t\t__helios__common__not(__core__lessThanInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____gt\",\n\t`(a, b) -> {\n\t\t__helios__common__not(__core__lessThanEqualsInteger(__core__unIData(a), __core__unIData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____leq\",\n\t`(a, b) -> {\n\t\t__core__lessThanEqualsInteger(__core__unIData(a), __core__unIData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__int____lt\",\n\t`(a, b) -> {\n\t\t__core__lessThanInteger(__core__unIData(a), __core__unIData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__min\",\n\t`(a, b) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__lessThanInteger(__core__unIData(a), __core__unIData(b)),\n\t\t\ta,\n\t\t\tb\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__int__max\",\n\t`(a, b) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__lessThanInteger(__core__unIData(a), __core__unIData(b)),\n\t\t\tb,\n\t\t\ta\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__int__bound_min\",\n\t`(self) -> {\n\t\t(other) -> {\n\t\t\t__helios__int__max(self, other)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__bound_max\",\n\t`(self) -> {\n\t\t(other) -> {\n\t\t\t__helios__int__min(self, other)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__bound\",\n\t`(self) -> {\n\t\t(min, max) -> {\n\t\t\t__helios__int__max(__helios__int__min(self, max), min)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__abs\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(i) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__lessThanInteger(i, 0),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__iData(__core__multiplyInteger(i, -1))\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\tself\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}(__core__unIData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__encode_zigzag\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(i) -> {\n\t\t\t\t__core__iData(\n\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t__core__lessThanInteger(i, 0),\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__core__subtractInteger(__core__multiplyInteger(i, -2), 1)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__core__multiplyInteger(i, 2)\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t)\n\t\t\t}(__core__unIData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__decode_zigzag\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(i) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__lessThanInteger(i, 0),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\terror(\"expected positive int\")\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__iData(\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsInteger(__core__modInteger(i, 2), 0),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t__core__divideInteger(i, 2)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t__core__divideInteger(__core__addInteger(i, 1), -2)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}(__core__unIData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__to_bool\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__core__ifThenElse(__core__equalsInteger(__core__unIData(self), 0), false, true)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__int__to_hex\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\t__core__bData(\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__lessThanInteger(self, 0),\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__consByteString(\n\t\t\t\t\t\t\t\t\t45,\n\t\t\t\t\t\t\t\t\trecurse(recurse, __core__multiplyInteger(self, -1), #)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\trecurse(recurse, self, #)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self, bytes) -> {\n\t\t\t\t\t\t(digit) -> {\n\t\t\t\t\t\t\t(bytes) -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__lessThanInteger(self, 16),\n\t\t\t\t\t\t\t\t\t() -> {bytes},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, __core__divideInteger(self, 16), bytes)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t__core__consByteString(\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__lessThanInteger(digit, 10), \n\t\t\t\t\t\t\t\t\t\t__core__addInteger(digit, 48), \n\t\t\t\t\t\t\t\t\t\t__core__addInteger(digit, 87)\n\t\t\t\t\t\t\t\t\t), \n\t\t\t\t\t\t\t\t\tbytes\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}(__core__modInteger(self, 16))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unIData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__common__BASE58_ALPHABET\", \"#31323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797a\"))\n\tadd(new RawFunc(\"__helios__int__to_base58\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__bData(\n\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t__core__lessThanInteger(self, 0),\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\terror(\"expected positive number\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\t\t\trecurse(recurse, self, #)\n\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t(recurse, self, bytes) -> {\n\t\t\t\t\t\t\t\t\t(digit) -> {\n\t\t\t\t\t\t\t\t\t\t(bytes) -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t\t__core__lessThanInteger(self, 58),\n\t\t\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbytes\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\trecurse(recurse, __core__divideInteger(self, 58), bytes)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t\t\t\t__core__consByteString(\n\t\t\t\t\t\t\t\t\t\t\t\t__core__indexByteString(__helios__common__BASE58_ALPHABET, digit),\n\t\t\t\t\t\t\t\t\t\t\t\tbytes\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}(__core__modInteger(self, 58))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unIData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__BASE58_INVERSE_ALPHABET_1\", \"#ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000102030405060708ffffffffffff\"));\n\tadd(new RawFunc(\"__helios__int__BASE58_INVERSE_ALPHABET_2\", \"#ff090a0b0c0d0e0f10ff1112131415ff161718191a1b1c1d1e1f20ffffffffffff2122232425262728292a2bff2c2d2e2f30313233343536373839ffffffffff\"));\n\tadd(new RawFunc(\"__helios__int__invert_base58_char\", \n\t`(char) -> {\n\t\t(digit) -> {\n\t\t\t__core__ifThenElse(\n\t\t\t\t__core__equalsInteger(digit, 0xff),\n\t\t\t\t() -> {\n\t\t\t\t\terror(\"invalid base58 character\")\n\t\t\t\t},\n\t\t\t\t() -> {\n\t\t\t\t\tdigit\n\t\t\t\t}\n\t\t\t)()\n\t\t}(\n\t\t\t__core__ifThenElse(\n\t\t\t\t__core__lessThanInteger(char, 64),\n\t\t\t\t() -> {\n\t\t\t\t\t__core__indexByteString(__helios__int__BASE58_INVERSE_ALPHABET_1, char)\n\t\t\t\t},\n\t\t\t\t() -> {\n\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t__core__lessThanInteger(char, 128),\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__core__indexByteString(\n\t\t\t\t\t\t\t\t__helios__int__BASE58_INVERSE_ALPHABET_2,\n\t\t\t\t\t\t\t\t__core__subtractInteger(char, 64)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t0xff\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)()\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__int__from_base58\",\n\t`(str) -> {\n\t\t(bytes) -> {\n\t\t\t__core__iData(\n\t\t\t\t(n) -> {\n\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\trecurse(recurse, 0, 1, __core__subtractInteger(n, 1))\n\t\t\t\t\t}(\n\t\t\t\t\t\t(recurse, acc, pow, i) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsInteger(i, -1),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\tacc\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t(new_acc) -> {\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, new_acc, __core__multiplyInteger(pow, 58), __core__subtractInteger(i, 1))\n\t\t\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t\t\t__core__addInteger(\n\t\t\t\t\t\t\t\t\t\t\tacc,\n\t\t\t\t\t\t\t\t\t\t\t__core__multiplyInteger(\n\t\t\t\t\t\t\t\t\t\t\t\t__helios__int__invert_base58_char(\n\t\t\t\t\t\t\t\t\t\t\t\t\t__core__indexByteString(bytes, i)\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tpow\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}(__core__lengthOfByteString(bytes))\n\t\t\t)\n\t\t}(__core__unBData(str))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__show\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__helios__common__stringData(__core__decodeUtf8(\n\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__lessThanInteger(self, 0),\n\t\t\t\t\t\t\t() -> {__core__consByteString(45, recurse(recurse, __core__multiplyInteger(self, -1)))},\n\t\t\t\t\t\t\t() -> {recurse(recurse, self)}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(\n\t\t\t\t\t\t(recurse, i) -> {\n\t\t\t\t\t\t\t(bytes) -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__lessThanInteger(i, 10),\n\t\t\t\t\t\t\t\t\t() -> {bytes},\n\t\t\t\t\t\t\t\t\t() -> {__core__appendByteString(recurse(recurse, __core__divideInteger(i, 10)), bytes)}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}(__core__consByteString(__core__addInteger(__core__modInteger(i, 10), 48), #))\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t))\n\t\t\t}\n\t\t}(__core__unIData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__parse_digit\",\n\t`(digit) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__lessThanEqualsInteger(digit, 57),\n\t\t\t() -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__lessThanEqualsInteger(48, digit),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__subtractInteger(digit, 48)\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\terror(\"not a digit\")\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t},\n\t\t\t() -> {\n\t\t\t\terror(\"not a digit\")\n\t\t\t}\n\t\t)()\n\t}`));\n\tadd(new RawFunc(\"__helios__int__parse\",\n\t`(string) -> {\n\t\t(bytes) -> {\n\t\t\t__core__iData(\n\t\t\t\t(n, b0) -> {\n\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsInteger(b0, 48),\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsInteger(n, 1),\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\terror(\"zero padded integer can't be parsed\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsInteger(b0, 45),\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(__core__indexByteString(bytes, 1), 48),\n\t\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t\terror(\"-0 not allowed\")\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t__core__multiplyInteger(\n\t\t\t\t\t\t\t\t\t\t\t\t\trecurse(recurse, 0, 1),\n\t\t\t\t\t\t\t\t\t\t\t\t\t-1\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, 0, 0)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(\n\t\t\t\t\t\t(recurse, acc, i) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsInteger(i, n),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\tacc\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t(new_acc) -> {\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, new_acc, __core__addInteger(i, 1))\n\t\t\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t\t\t__core__addInteger(\n\t\t\t\t\t\t\t\t\t\t\t__core__multiplyInteger(acc, 10), \n\t\t\t\t\t\t\t\t\t\t\t__helios__int__parse_digit(__core__indexByteString(bytes, i))\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}(__core__lengthOfByteString(bytes), __core__indexByteString(bytes, 0))\n\t\t\t)\n\t\t}(__core__unBData(string))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__from_big_endian\",\n\t`(bytes) -> {\n\t\t(bytes) -> {\n\t\t\t__core__iData(\n\t\t\t\t(n) -> {\n\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\trecurse(recurse, 0, 1, __core__subtractInteger(n, 1))\n\t\t\t\t\t}(\n\t\t\t\t\t\t(recurse, acc, pow, i) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsInteger(i, -1),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\tacc\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t(new_acc) -> {\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, new_acc, __core__multiplyInteger(pow, 256), __core__subtractInteger(i, 1))\n\t\t\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t\t\t__core__addInteger(\n\t\t\t\t\t\t\t\t\t\t\tacc,\n\t\t\t\t\t\t\t\t\t\t\t__core__multiplyInteger(__core__indexByteString(bytes, i), pow)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}(__core__lengthOfByteString(bytes))\n\t\t\t)\n\t\t}(__core__unBData(bytes))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__from_little_endian\", \n\t`(bytes) -> {\n\t\t(bytes) -> {\n\t\t\t__core__iData(\n\t\t\t\t(n) -> {\n\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\trecurse(recurse, 0, 1, 0)\n\t\t\t\t\t}(\n\t\t\t\t\t\t(recurse, acc, pow, i) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsInteger(i, n),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\tacc\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t(new_acc) -> {\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, new_acc, __core__multiplyInteger(pow, 256), __core__addInteger(i, 1))\n\t\t\t\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t\t\t\t__core__addInteger(\n\t\t\t\t\t\t\t\t\t\t\tacc,\n\t\t\t\t\t\t\t\t\t\t\t__core__multiplyInteger(__core__indexByteString(bytes, i), pow)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}(__core__lengthOfByteString(bytes))\n\t\t\t)\n\t\t}(__core__unBData(bytes))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__to_big_endian\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__lessThanInteger(self, 0),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\terror(\"can't convert negative number to big endian bytearray\")\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\t\t__core__bData(recurse(recurse, self, #))\n\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t(recurse, self, bytes) -> {\n\t\t\t\t\t\t\t\t(bytes) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__lessThanInteger(self, 256),\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\tbytes\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\trecurse(\n\t\t\t\t\t\t\t\t\t\t\t\trecurse,\n\t\t\t\t\t\t\t\t\t\t\t\t__core__divideInteger(self, 256),\n\t\t\t\t\t\t\t\t\t\t\t\tbytes\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__consByteString(self, bytes))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t}(__core__unIData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__int__to_little_endian\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__lessThanInteger(self, 0),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\terror(\"can't convert negative number to big endian bytearray\")\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t(recurse) -> {\n\t\t\t\t\t\t\t__core__bData(recurse(recurse, self))\n\t\t\t\t\t\t}(\n\t\t\t\t\t\t\t(recurse, self) -> {\n\t\t\t\t\t\t\t\t__core__consByteString(self,\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__lessThanInteger(self, 256),\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t#\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\trecurse(recurse, __core__divideInteger(self, 256))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t}(__core__unIData(self))\n\t}`))\n\n\n\t// Bool builtins\n\tadd(new RawFunc(`__helios__bool____eq`, \n\t`(a, b) -> {\n\t\t__core__ifThenElse(a, b, __helios__common__not(b))\n\t}`));\n\tadd(new RawFunc(`__helios__bool____neq`,\n\t`(a, b) -> {\n\t\t__core__ifThenElse(a, __helios__common__not(b), b)\n\t}`));\n\tadd(new RawFunc(`__helios__bool__serialize`, \n\t`(self) -> {\n\t\t__helios__common__serialize(__helios__common__boolData(self))\n\t}`));\n\tadd(new RawFunc(`__helios__bool__from_data`,\n\t`(data) -> {\n\t\t__helios__common__unBoolData(data)\n\t}`));\n\tadd(new RawFunc(\"__helios__bool__and\",\n\t`(a, b) -> {\n\t\t__core__ifThenElse(\n\t\t\ta(), \n\t\t\t() -> {b()}, \n\t\t\t() -> {false}\n\t\t)()\n\t}`));\n\tadd(new RawFunc(\"__helios__bool__or\",\n\t`(a, b) -> {\n\t\t__core__ifThenElse(\n\t\t\ta(), \n\t\t\t() -> {true},\n\t\t\t() -> {b()}\n\t\t)()\n\t}`));\n\tadd(new RawFunc(\"__helios__bool____not\", \"__helios__common__not\"));\n\tadd(new RawFunc(\"__helios__bool__to_int\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__core__iData(__core__ifThenElse(self, 1, 0))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__bool__show\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__common__stringData(__core__ifThenElse(self, \"true\", \"false\"))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__bool__trace\",\n\t`(self) -> {\n\t\t(prefix) -> {\n\t\t\t__core__trace(\n\t\t\t\t__helios__common__unStringData(\n\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\tprefix,\n\t\t\t\t\t\t__helios__bool__show(self)()\n\t\t\t\t\t)\n\t\t\t\t), \n\t\t\t\tself\n\t\t\t)\n\t\t}\n\t}`));\n\n\n\t// String builtins\n\taddDataFuncs(\"__helios__string\");\n\tadd(new RawFunc(\"__helios__string____add\",\n\t`(a, b) -> {\n\t\t__helios__common__stringData(__core__appendString(__helios__common__unStringData(a), __helios__common__unStringData(b)))\t\n\t}`));\n\tadd(new RawFunc(\"__helios__string__starts_with\", \"__helios__bytearray__starts_with\"));\n\tadd(new RawFunc(\"__helios__string__ends_with\", \"__helios__bytearray__ends_with\"));\n\tadd(new RawFunc(\"__helios__string__encode_utf8\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__bData(__core__encodeUtf8(self))\n\t\t\t}\n\t\t}(__helios__common__unStringData(self))\n\t}`));\n\n\n\t// ByteArray builtins\n\taddDataFuncs(\"__helios__bytearray\");\n\tadd(new RawFunc(\"__helios__bytearray____add\",\n\t`(a, b) -> {\n\t\t__core__bData(__core__appendByteString(__core__unBData(a), __core__unBData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray____geq\",\n\t`(a, b) -> {\n\t\t__helios__common__not(__core__lessThanByteString(__core__unBData(a), __core__unBData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray____gt\",\n\t`(a, b) -> {\n\t\t__helios__common__not(__core__lessThanEqualsByteString(__core__unBData(a), __core__unBData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray____leq\",\n\t`(a, b) -> {\n\t\t__core__lessThanEqualsByteString(__core__unBData(a), __core__unBData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray____lt\",\n\t`(a, b) -> {\n\t\t__core__lessThanByteString(__core__unBData(a), __core__unBData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__length\",\n\t`(self) -> {\n\t\t__core__iData(__core__lengthOfByteString(__core__unBData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__slice\",\n\t`(self) -> {\n\t\t__helios__common__slice_bytearray(self, __core__lengthOfByteString)\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__starts_with\", \n\t`(self) -> {\n\t\t__helios__common__starts_with(self, __core__lengthOfByteString)\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__ends_with\",\n\t`(self) -> {\n\t\t__helios__common__ends_with(self, __core__lengthOfByteString)\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__prepend\", \n\t`(self) -> {\n\t\t(byte) -> {\n\t\t\t__core__bData(\n\t\t\t\t__core__consByteString(\n\t\t\t\t\t__core__unIData(byte),\n\t\t\t\t\t__core__unBData(self)\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__sha2\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__bData(__core__sha2_256(self))\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__sha3\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__bData(__core__sha3_256(self))\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__blake2b\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__bData(__core__blake2b_256(self))\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__decode_utf8\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__helios__common__stringData(__core__decodeUtf8(self))\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray__show\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\t__helios__common__stringData(recurse(recurse, self))\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self) -> {\n\t\t\t\t\t\t(n) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__lessThanInteger(0, n),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t__core__appendString(\n\t\t\t\t\t\t\t\t\t\t__core__decodeUtf8((hexBytes) -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(__core__lengthOfByteString(hexBytes), 1),\n\t\t\t\t\t\t\t\t\t\t\t\t__core__consByteString(48, hexBytes),\n\t\t\t\t\t\t\t\t\t\t\t\thexBytes\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}(__core__unBData(__helios__int__to_hex(__core__iData(__core__indexByteString(self, 0)))()))), \n\t\t\t\t\t\t\t\t\t\trecurse(recurse, __core__sliceByteString(1, n, self))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}(__core__lengthOfByteString(self))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unBData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray32____eq\", \"__helios__bytearray____eq\"));\n\tadd(new RawFunc(\"__helios__bytearray32____neq\", \"__helios__bytearray____neq\"));\n\tadd(new RawFunc(\"__helios__bytearray32__serialize\", \"__helios__bytearray__serialize\"));\n\tadd(new RawFunc(\"__helios__bytearray32____add\", \"__helios__bytearray____add\"));\n\tadd(new RawFunc(\"__helios__bytearray32__length\", \"(_) -> {__core__iData(32)}\"));\n\tadd(new RawFunc(\"__helios__bytearray32__slice\", \n\t`(self) -> {\n\t\t__helios__common__slice_bytearray(self, (self) -> {32})\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray32__starts_with\", \n\t`(self) -> {\n\t\t__helios__common__starts_with(self, (self) -> {32})\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray32__ends_with\", \n\t`(self) -> {\n\t\t__helios__common__ends_with(self, (self) -> {32})\n\t}`));\n\tadd(new RawFunc(\"__helios__bytearray32__sha2\", \"__helios__bytearray__sha2\"));\n\tadd(new RawFunc(\"__helios__bytearray32__sha3\", \"__helios__bytearray__sha3\"));\n\tadd(new RawFunc(\"__helios__bytearray32__blake2b\", \"__helios__bytearray__blake2b\"));\n\tadd(new RawFunc(\"__helios__bytearray32__decode_utf8\", \"__helios__bytearray__decode_utf8\"));\n\tadd(new RawFunc(\"__helios__bytearray32__show\", \"__helios__bytearray__show\"));\n\n\n\t// List builtins\n\taddDataFuncs(\"__helios__list\");\n\tadd(new RawFunc(\"__helios__list__new\",\n\t`(n, fn) -> {\n\t\t(n) -> {\n\t\t\t(recurse) -> {\n\t\t\t\t__core__listData(recurse(recurse, 0))\n\t\t\t}(\n\t\t\t\t(recurse, i) -> {\n\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t__core__lessThanInteger(i, n),\n\t\t\t\t\t\t() -> {__core__mkCons(fn(__core__iData(i)), recurse(recurse, __core__addInteger(i, 1)))},\n\t\t\t\t\t\t() -> {__core__mkNilData(())}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}(__core__unIData(n))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__new_const\",\n\t`(n, item) -> {\n\t\t__helios__list__new(n, (i) -> {item})\n\t}`));\n\tadd(new RawFunc(\"__helios__list____add\",\n\t`(a, b) -> {\n\t\t__core__listData(__helios__common__concat(__core__unListData(a), __core__unListData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__length\",\n\t`(self) -> {\n\t\t__helios__common__length(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__head\",\n\t`(self) -> {\n\t\t__core__headList(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__tail\",\n\t`(self) -> {\n\t\t__core__listData(__core__tailList(__core__unListData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__is_empty\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__nullList(self)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__get\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(index) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, self, __core__unIData(index))\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self, index) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tself, \n\t\t\t\t\t\t\t() -> {error(\"index out of range\")}, \n\t\t\t\t\t\t\t() -> {__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__lessThanInteger(index, 0), \n\t\t\t\t\t\t\t\t() -> {error(\"index out of range\")}, \n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(index, 0), \n\t\t\t\t\t\t\t\t\t\t() -> {__core__headList(self)}, \n\t\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), __core__subtractInteger(index, 1))}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)()}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__get_singleton\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__chooseUnit(\n\t\t\t\t\t__helios__assert(\n\t\t\t\t\t\t__core__nullList(__core__tailList(self)),\n\t\t\t\t\t\t__helios__common__stringData(\"not a singleton list\")\n\t\t\t\t\t),\n\t\t\t\t\t__core__headList(self)\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__any\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__common__any(self, fn)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__all\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__common__all(self, fn)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__prepend\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(item) -> {\n\t\t\t\t__core__listData(__core__mkCons(item, self))\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__find\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__common__find(self, fn, __helios__common__identity)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__find_safe\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__common__find_safe(self, fn, __helios__common__identity)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__filter\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__core__listData(__helios__common__filter_list(self, fn))\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__for_each\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, self)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, lst) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tlst,\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__chooseUnit(\n\t\t\t\t\t\t\t\t\tfn(__core__headList(lst)),\n\t\t\t\t\t\t\t\t\trecurse(recurse, __core__tailList(lst))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__fold\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn, z) -> {\n\t\t\t\t__helios__common__fold(self, fn, z)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__fold_lazy\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn, z) -> {\n\t\t\t\t__helios__common__fold_lazy(self, fn, z)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__map\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__core__listData(__helios__common__map(self, fn, __core__mkNilData(())))\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__list__map_to_bool\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__map(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\t__helios__common__boolData(fn(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__list__sort\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(comp) -> {\n\t\t\t\t__core__listData(__helios__common__sort(self, comp))\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__new\", \n\t`(n, fn) -> {\n\t\t__helios__list__new(\n\t\t\tn, \n\t\t\t(i) -> {\n\t\t\t\t__helios__common__boolData(fn(i))\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__new_const\", \n\t`(n, item) -> {\n\t\t__helios__list__new_const(n, __helios__common__boolData(item))\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist____eq\", \"__helios__list____eq\"));\n\tadd(new RawFunc(\"__helios__boollist____neq\", \"__helios__list____neq\"));\n\tadd(new RawFunc(\"__helios__boollist__serialize\", \"__helios__list__serialize\"));\n\tadd(new RawFunc(\"__helios__boollist__from_data\", \"__helios__list__from_data\"));\n\tadd(new RawFunc(\"__helios__boollist____add\", \"__helios__list____add\"));\n\tadd(new RawFunc(\"__helios__boollist__length\", \"__helios__list__length\"));\n\tadd(new RawFunc(\"__helios__boollist__head\", \n\t`(self) -> {\n\t\t__helios__common__unBoolData(__helios__list__head(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__tail\", \"__helios__list__tail\"));\n\tadd(new RawFunc(\"__helios__boollist__is_empty\", \"__helios__list__is_empty\"));\n\tadd(new RawFunc(\"__helios__boollist__get\", \n\t`(self) -> {\n\t\t(index) -> {\n\t\t\t__helios__common__unBoolData(__helios__list__get(self)(index))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__get_singleton\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__common__unBoolData(__helios__list__get_singleton(self)())\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__any\", \n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__any(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__all\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__all(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__prepend\",\n\t`(self) -> {\n\t\t(item) -> {\n\t\t\t__helios__list__prepend(self)(__helios__common__boolData(item))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__find\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__common__unBoolData(\n\t\t\t\t__helios__list__find(self)(\n\t\t\t\t\t(item) -> {\n\t\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__find_safe\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__find_safe(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__filter\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__filter(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__for_each\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__for_each(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__fold\",\n\t`(self) -> {\n\t\t(fn, z) -> {\n\t\t\t__helios__list__fold(self)(\n\t\t\t\t(prev, item) -> {\n\t\t\t\t\tfn(prev, __helios__common__unBoolData(item))\n\t\t\t\t},\n\t\t\t\tz\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__fold_lazy\",\n\t`(self) -> {\n\t\t(fn, z) -> {\n\t\t\t__helios__list__fold_lazy(self)(\n\t\t\t\t(item, next) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item), next)\n\t\t\t\t},\n\t\t\t\tz\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__map\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__map(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(item))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__map_to_bool\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__list__map(self)(\n\t\t\t\t(item) -> {\n\t\t\t\t\t__helios__common__boolData(fn(__helios__common__unBoolData(item)))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boollist__sort\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(comp) -> {\n\t\t\t\t(comp) -> {\n\t\t\t\t\t__core__listData(__helios__common__sort(self, comp))\n\t\t\t\t}(\n\t\t\t\t\t(a, b) -> {\n\t\t\t\t\t\tcomp(__helios__common__unBoolData(a), __helios__common__unBoolData(b))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unListData(self))\n\t}`));\n\n\n\t// Map builtins\n\taddDataFuncs(\"__helios__map\");\n\tadd(new RawFunc(\"__helios__map____add\",\n\t`(a, b) -> {\n\t\t__core__mapData(__helios__common__concat(__core__unMapData(a), __core__unMapData(b)))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__prepend\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(key, value) -> {\n\t\t\t\t__core__mapData(__core__mkCons(__core__mkPairData(key, value), self))\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__head\",\n\t`(self) -> {\n\t\t(head) -> {\n\t\t\t() -> {\n\t\t\t\t(callback) -> {\n\t\t\t\t\tcallback(__core__fstPair(head), __core__sndPair(head))\n\t\t\t\t}\n\t\t\t}\n\t\t}(__core__headList(__core__unMapData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__head_key\",\n\t`(self) -> {\n\t\t__core__fstPair(__core__headList(__core__unMapData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__head_value\",\n\t`(self) -> {\n\t\t__core__sndPair(__core__headList(__core__unMapData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__length\",\n\t`(self) -> {\n\t\t__helios__common__length(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__tail\",\n\t`(self) -> {\n\t\t__core__mapData(__core__tailList(__core__unMapData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__is_empty\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t() -> {\n\t\t\t\t__core__nullList(self)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__get\",\n\t`(self) -> {\n\t\t(key) -> {\n\t\t\t__helios__common__map_get(self, key, (x) -> {x}, () -> {error(\"key not found\")})\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__map__get_safe\",\n\t`(self) -> {\n\t\t(key) -> {\n\t\t\t__helios__common__map_get(\n\t\t\t\tself, \n\t\t\t\tkey, \n\t\t\t\t(x) -> {\n\t\t\t\t\t__core__constrData(0, __helios__common__list_1(x))\n\t\t\t\t}, \n\t\t\t\t() -> {\n\t\t\t\t\t__core__constrData(1, __helios__common__list_0)\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__map__all\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__all(self, fn)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__fstPair(pair), __core__sndPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__any\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__any(self, fn)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__fstPair(pair), __core__sndPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__delete\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(key) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\t__core__mapData(recurse(recurse, self))\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tself,\n\t\t\t\t\t\t\t() -> {self},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(head, tail) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__equalsData(key, __core__fstPair(head)),\n\t\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, tail)},\n\t\t\t\t\t\t\t\t\t\t() -> {__core__mkCons(head, recurse(recurse, tail))}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__headList(self), __core__tailList(self))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__filter\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__core__mapData(__helios__common__filter_map(self, fn))\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__fstPair(pair), __core__sndPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__find\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, self, fn)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self, fn) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tself, \n\t\t\t\t\t\t\t() -> {error(\"not found\")}, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(head) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\tfn(__core__fstPair(head), __core__sndPair(head)), \n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t(callback) -> {\n\t\t\t\t\t\t\t\t\t\t\t\tcallback(__core__fstPair(head), __core__sndPair(head))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__headList(self))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__find_safe\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, self, fn)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self, fn) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tself, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(callback) -> {\n\t\t\t\t\t\t\t\t\tcallback(() -> {error(\"not found\")}, false)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(head) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\tfn(__core__fstPair(head), __core__sndPair(head)), \n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t(callback) -> {\n\t\t\t\t\t\t\t\t\t\t\t\tcallback(\n\t\t\t\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(callback) -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback(__core__fstPair(head), __core__sndPair(head))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(self), fn)}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__headList(self))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__find_key\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__find(\n\t\t\t\t\t\tself, \n\t\t\t\t\t\tfn,\n\t\t\t\t\t\t__core__fstPair\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__fstPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__find_key_safe\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__find_safe(\n\t\t\t\t\t\tself,\n\t\t\t\t\t\tfn,\n\t\t\t\t\t\t__core__fstPair\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__fstPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__find_value\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__find(\n\t\t\t\t\t\tself, \n\t\t\t\t\t\tfn,\n\t\t\t\t\t\t__core__sndPair\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__sndPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__find_value_safe\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__find_safe(\n\t\t\t\t\t\tself,\n\t\t\t\t\t\tfn,\n\t\t\t\t\t\t__core__sndPair\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__core__sndPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__map\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__core__mapData(__helios__common__map(self, fn, __core__mkNilPairData(())))\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\t(mapped_pair) -> {\n\t\t\t\t\t\t\tmapped_pair(\n\t\t\t\t\t\t\t\t(key, value) -> {\n\t\t\t\t\t\t\t\t\t__core__mkPairData(key, value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}(fn(__core__fstPair(pair), __core__sndPair(pair)))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__map_to_bool\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__core__mapData(__helios__common__map(self, fn, __core__mkNilPairData(())))\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\t(mapped_pair) -> {\n\t\t\t\t\t\t\tmapped_pair(\n\t\t\t\t\t\t\t\t(key, value) -> {\n\t\t\t\t\t\t\t\t\t__core__mkPairData(key, __helios__common__boolData(value))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}(fn(__core__fstPair(pair), __core__sndPair(pair)))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__fold\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn, z) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__fold(self, fn, z)\n\t\t\t\t}(\n\t\t\t\t\t(z, pair) -> {\n\t\t\t\t\t\tfn(z, __core__fstPair(pair), __core__sndPair(pair))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__fold_lazy\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn, z) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__fold_lazy(self, fn, z)\n\t\t\t\t}(\n\t\t\t\t\t(pair, next) -> {\n\t\t\t\t\t\tfn(__core__fstPair(pair), __core__sndPair(pair), next)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__for_each\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, self)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap,\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(head) -> {\n\t\t\t\t\t\t\t\t\t__core__chooseUnit(\n\t\t\t\t\t\t\t\t\t\tfn(__core__fstPair(head), __core__sndPair(head)),\n\t\t\t\t\t\t\t\t\t\trecurse(recurse, __core__tailList(map))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}(__core__headList(map))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__set\", \n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(key, value) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\t__core__mapData(recurse(recurse, self))\n\t\t\t\t}(\n\t\t\t\t\t(recurse, self) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tself,\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__mkCons(__core__mkPairData(key, value), __core__mkNilPairData(()))\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(head, tail) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__equalsData(key, __core__fstPair(head)),\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__mkCons(__core__mkPairData(key, value), tail)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__mkCons(head, recurse(recurse, tail))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__headList(self), __core__tailList(self))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__map__sort\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(comp) -> {\n\t\t\t\t(comp) -> {\n\t\t\t\t\t__core__mapData(__helios__common__sort(self, comp))\n\t\t\t\t}(\n\t\t\t\t\t(a, b) -> {\n\t\t\t\t\t\tcomp(__core__fstPair(a), __core__sndPair(a), __core__fstPair(b), __core__sndPair(b))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap____eq\", \"__helios__map____eq\"));\n\tadd(new RawFunc(\"__helios__boolmap____neq\", \"__helios__map____neq\"));\n\tadd(new RawFunc(\"__helios__boolmap__serialize\", \"__helios__map__serialize\"));\n\tadd(new RawFunc(\"__helios__boolmap__from_data\", \"__helios__map__from_data\"));\n\tadd(new RawFunc(\"__helios__boolmap____add\", \"__helios__map____add\"));\n\tadd(new RawFunc(\"__helios__boolmap__prepend\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(key, value) -> {\n\t\t\t\t__core__mapData(\n\t\t\t\t\t__core__mkCons(\n\t\t\t\t\t\t__core__mkPairData(key, __helios__common__boolData(value)),\n\t\t\t\t\t\tself\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__head\",\n\t`(self) -> {\n\t\t(head) -> {\n\t\t\t() -> {\n\t\t\t\t(callback) -> {\n\t\t\t\t\tcallback(__core__fstPair(head), __helios__common__unBoolData(__core__sndPair(head)))\n\t\t\t\t}\n\t\t\t}\n\t\t}(__core__headList(__core__unMapData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__head_key\", \"__helios__map__head_key\"));\n\tadd(new RawFunc(\"__helios__boolmap__head_value\",\n\t`(self) -> {\n\t\t__helios__common__unBoolData(__helios__map__head_value(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__length\", \"__helios__map__length\"));\n\tadd(new RawFunc(\"__helios__boolmap__tail\", \"__helios__map__tail\"));\n\tadd(new RawFunc(\"__helios__boolmap__is_empty\", \"__helios__map__is_empty\"));\n\tadd(new RawFunc(\"__helios__boolmap__get\", \n\t`(self) -> {\n\t\t(key) -> {\n\t\t\t__helios__common__unBoolData(__helios__map__get(self)(key))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__all\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__map__all(self)(\n\t\t\t\t(key, value) -> {\n\t\t\t\t\tfn(key, __helios__common__unBoolData(value))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__any\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__map__any(self)(\n\t\t\t\t(key, value) -> {\n\t\t\t\t\tfn(key, __helios__common__unBoolData(value))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__delete\", \"__helios__map__delete\"));\n\tadd(new RawFunc(\"__helios__boolmap__filter\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__map__filter(self)(\n\t\t\t\t(key, value) -> {\n\t\t\t\t\tfn(key, __helios__common__unBoolData(value))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__find\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(result) -> {\n\t\t\t\t\t(callback) -> {\n\t\t\t\t\t\tresult((key, value) -> {\n\t\t\t\t\t\t\tcallback(key, __helios__common__unBoolData(value))\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}(__helios__map__find(self)(fn))\n\t\t\t}(\n\t\t\t\t(fst, snd) -> {\n\t\t\t\t\tfn(fst, __helios__common__unBoolData(snd))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__find_safe\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(resultok) -> {\n\t\t\t\t\t(callback) -> {\n\t\t\t\t\t\tresultok((result, ok) -> {\n\t\t\t\t\t\t\tcallback(\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t(inner_callback) -> {\n\t\t\t\t\t\t\t\t\t\tresult()(\n\t\t\t\t\t\t\t\t\t\t\t(key, value) -> {\n\t\t\t\t\t\t\t\t\t\t\t\tinner_callback(key, __helios__common__unBoolData(value))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\tok\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}(__helios__map__find_safe(self)(fn))\n\t\t\t}(\n\t\t\t\t(fst, snd) -> {\n\t\t\t\t\tfn(fst, __helios__common__unBoolData(snd))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__find_key\", \"__helios__map__find_key\"));\n\tadd(new RawFunc(\"__helios__boolmap__find_key_safe\", \"__helios__map__find_key_safe\"));\n\tadd(new RawFunc(\"__helios__boolmap__find_value\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__find(\n\t\t\t\t\t\tself, \n\t\t\t\t\t\tfn,\n\t\t\t\t\t\t(result) -> {\n\t\t\t\t\t\t\t__helios__common__unBoolData(__core__sndPair(result))\n\t\t\t\t\t\t}\t\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__helios__common__unBoolData(__core__sndPair(pair)))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__find_value_safe\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__helios__common__find_safe(\n\t\t\t\t\t\tself, \n\t\t\t\t\t\tfn,\n\t\t\t\t\t\t(result) -> {\n\t\t\t\t\t\t\t__core__sndPair(result)\n\t\t\t\t\t\t}\t\n\t\t\t\t\t)\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\tfn(__helios__common__unBoolData(__core__sndPair(pair)))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__map\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__core__mapData(__helios__common__map(self, fn, __core__mkNilPairData(())))\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\t(mapped_pair) -> {\n\t\t\t\t\t\t\tmapped_pair(\n\t\t\t\t\t\t\t\t(key, value) -> {\n\t\t\t\t\t\t\t\t\t__core__mkPairData(key, value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}(fn(__core__fstPair(pair), __helios__common__unBoolData(__core__sndPair(pair))))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__map_to_bool\",\n\t`(self) -> {\n\t\t(self) -> {\n\t\t\t(fn) -> {\n\t\t\t\t(fn) -> {\n\t\t\t\t\t__core__mapData(__helios__common__map(self, fn, __core__mkNilPairData(())))\n\t\t\t\t}(\n\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\t(mapped_pair) -> {\n\t\t\t\t\t\t\tmapped_pair(\n\t\t\t\t\t\t\t\t(key, value) -> {\n\t\t\t\t\t\t\t\t\t__core__mkPairData(key, __helios__common__boolData(value))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}(fn(__core__fstPair(pair), __helios__common__unBoolData(__core__sndPair(pair))))\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__fold\",\n\t`(self) -> {\n\t\t(fn, z) -> {\n\t\t\t__helios__map__fold(self)(\n\t\t\t\t(prev, key, value) -> {\n\t\t\t\t\tfn(prev, key, __helios__common__unBoolData(value))\n\t\t\t\t},\n\t\t\t\tz\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__fold_lazy\",\n\t`(self) -> {\n\t\t(fn, z) -> {\n\t\t\t__helios__map__fold_lazy(self)(\n\t\t\t\t(key, value, next) -> {\n\t\t\t\t\tfn(key, __helios__common__unBoolData(value), next)\n\t\t\t\t},\n\t\t\t\tz\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__for_each\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t__helios__map__for_each(self)(\n\t\t\t\t(key, value) -> {\n\t\t\t\t\tfn(key, __helios__common__unBoolData(value))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__set\", \n\t`(self) -> {\n\t\t(key, value) -> {\n\t\t\t__helios__map__set(self)(key, __helios__common__boolData(value))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__boolmap__sort\",\n\t`(self) -> {\n\t\t(comp) -> {\n\t\t\t(comp) -> {\n\t\t\t\t__helios__map__sort(self)(comp)\n\t\t\t}(\n\t\t\t\t(ak, av, bk, bv) -> {\n\t\t\t\t\tcomp(ak, __helios__common__unBoolData(av), bk, __helios__common__unBoolData(bv))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\n\n\t// Option[T] builtins\n\taddDataFuncs(\"__helios__option\");\n\tadd(new RawFunc(\"__helios__option__map\", \n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t(pair) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__equalsInteger(__core__fstPair(pair), 0),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__helios__option__some__new(fn(__core__headList(__core__sndPair(pair))))\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__helios__option__none__new()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}(__core__unConstrData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__option__map_to_bool\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__option__map(self)(fn)\n\t\t\t}(\n\t\t\t\t(data) -> {\n\t\t\t\t\t__helios__common__boolData(fn(data))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__option__unwrap\", \n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__common__field_0(self)\n\t\t}\n\t}`));\n\n\n\t// Option[T]::Some\n\taddEnumDataFuncs(\"__helios__option__some\");\n\tadd(new RawFunc(\"__helios__option__some__new\",\n\t`(data) -> {\n\t\t__core__constrData(0, __helios__common__list_1(data))\n\t}`));\n\tadd(new RawFunc(\"__helios__option__some__cast\",\n\t`(data) -> {\n\t\t__helios__common__assert_constr_index(data, 0)\n\t}`));\n\tadd(new RawFunc(\"__helios__option__some__some\", \"__helios__common__field_0\"));\n\t\n\n\t// Option[T]::None\n\taddEnumDataFuncs(\"__helios__option__none\");\n\tadd(new RawFunc(\"__helios__option__none__new\",\n\t`() -> {\n\t\t__core__constrData(1, __helios__common__list_0)\n\t}`));\n\tadd(new RawFunc(\"__helios__option__none__cast\",\n\t`(data) -> {\n\t\t__helios__common__assert_constr_index(data, 1)\n\t}`));\n\n\n\t// Option[Bool]\n\tadd(new RawFunc(\"__helios__booloption____eq\", \"__helios__option____eq\"));\n\tadd(new RawFunc(\"__helios__booloption____neq\", \"__helios__option____neq\"));\n\tadd(new RawFunc(\"__helios__booloption__serialize\", \"__helios__option__serialize\"));\n\tadd(new RawFunc(\"__helios__booloption__from_data\", \"__helios__option__from_data\"));\n\tadd(new RawFunc(\"__helios__booloption__unwrap\", `\n\t(self) -> {\n\t\t() -> {\n\t\t\t__helios__common__unBoolData(__helios__common__field_0(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__booloption__map\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__option__map(self)(fn)\n\t\t\t}(\n\t\t\t\t(data) -> {\n\t\t\t\t\tfn(__helios__common__unBoolData(data))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__booloption__map_to_bool\",\n\t`(self) -> {\n\t\t(fn) -> {\n\t\t\t(fn) -> {\n\t\t\t\t__helios__option__map(self)(fn)\n\t\t\t}(\n\t\t\t\t(data) -> {\n\t\t\t\t\t__helios__common__boolData(fn(__helios__common__unBoolData(data)))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\n\t\n\t// Option[Bool]::Some\n\tadd(new RawFunc(\"__helios__booloption__some____eq\", \"__helios__option__some____eq\"));\n\tadd(new RawFunc(\"__helios__booloption__some____neq\", \"__helios__option__some____neq\"));\n\tadd(new RawFunc(\"__helios__booloption__some__serialize\", \"__helios__option__some__serialize\"));\n\tadd(new RawFunc(\"__helios__booloption__some__new\", \n\t`(b) -> {\n\t\t__helios__option__some__new(__helios__common__boolData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__booloption__some__cast\", \"__helios__option__some__cast\"));\n\tadd(new RawFunc(\"__helios__booloption__some__some\", \n\t`(self) -> {\n\t\t__helios__common__unBoolData(__helios__option__some__some(self))\n\t}`));\n\n\t\n\t// Option[Bool]::None\n\tadd(new RawFunc(\"__helios__booloption__none____eq\",      \"__helios__option__none____eq\"));\n\tadd(new RawFunc(\"__helios__booloption__none____neq\",     \"__helios__option__none____neq\"));\n\tadd(new RawFunc(\"__helios__booloption__none__serialize\", \"__helios__option__none__serialize\"));\n\tadd(new RawFunc(\"__helios__booloption__none__new\",       \"__helios__option__none__new\"));\n\tadd(new RawFunc(\"__helios__booloption__none__cast\",      \"__helios__option__none__cast\"));\n\n\t\n\t// Hash builtins\n\taddDataFuncs(\"__helios__hash\");\n\tadd(new RawFunc(\"__helios__hash____lt\", \"__helios__bytearray____lt\"));\n\tadd(new RawFunc(\"__helios__hash____leq\", \"__helios__bytearray____leq\"));\n\tadd(new RawFunc(\"__helios__hash____gt\", \"__helios__bytearray____gt\"));\n\tadd(new RawFunc(\"__helios__hash____geq\", \"__helios__bytearray____geq\"));\n\tadd(new RawFunc(\"__helios__hash__new\", `__helios__common__identity`));\n\tadd(new RawFunc(\"__helios__hash__show\", \"__helios__bytearray__show\"));\n\tadd(new RawFunc(\"__helios__hash__CURRENT\", \"__core__bData(#0000000000000000000000000000000000000000000000000000000000000000)\"));\n\tadd(new RawFunc(\"__helios__hash__from_script_hash\", \"__helios__common__identity\"));\n\n\t\n\t// ScriptHash builtin\n\taddDataFuncs(\"__helios__scripthash\");\n\n\n\t// PubKey builtin\n\taddDataFuncs(\"__helios__pubkey\");\n\tadd(new RawFunc(\"__helios__pubkey__new\", \"__helios__common__identity\"));\n\tadd(new RawFunc(\"__helios__pubkey__show\", \"__helios__bytearray__show\"));\n\tadd(new RawFunc(\"__helios__pubkey__verify\", \n\t`(self) -> {\n\t\t(message, signature) -> {\n\t\t\t__core__verifyEd25519Signature(__core__unBData(self), __core__unBData(message), __core__unBData(signature))\n\t\t}\n\t}`));\n\n\n\t// ScriptContext builtins\n\taddDataFuncs(\"__helios__scriptcontext\");\n\tadd(new RawFunc(\"__helios__scriptcontext__new_spending\",\n\t`(tx, output_id) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\ttx,\n\t\t\t__core__constrData(1, __helios__common__list_1(output_id))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__new_minting\",\n\t`(tx, mph) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\ttx,\n\t\t\t__core__constrData(0, __helios__common__list_1(mph))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__new_rewarding\",\n\t`(tx, cred) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\ttx,\n\t\t\t__core__constrData(2, __helios__common__list_1(cred))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__new_certifying\",\n\t`(tx, dcert) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\ttx,\n\t\t\t__core__constrData(3, __helios__common__list_1(dcert))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__tx\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__scriptcontext__purpose\", \"__helios__common__field_1\"));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_current_input\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(id) -> {\n\t\t\t\t__helios__list__find(__helios__tx__inputs(__helios__scriptcontext__tx(self)))(\n\t\t\t\t\t(input) -> {\n\t\t\t\t\t\t__core__equalsData(__helios__txinput__output_id(input), id)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}(__helios__scriptcontext__get_spending_purpose_output_id(self)())\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_cont_outputs\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(vh) -> {\n\t\t\t\t(outputs) -> {\n\t\t\t\t\t__helios__list__filter(outputs)(\n\t\t\t\t\t\t(output) -> {\n\t\t\t\t\t\t\t(credential) -> {\n\t\t\t\t\t\t\t\t(pair) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(__core__fstPair(pair), 0),\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__equalsData(__core__headList(__core__sndPair(pair)), vh)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__unConstrData(credential))\n\t\t\t\t\t\t\t}(__helios__address__credential(__helios__txoutput__address(output)))\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}(__helios__tx__outputs(__helios__scriptcontext__tx(self)))\n\t\t\t}(__helios__scriptcontext__get_current_validator_hash(self)())\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_spending_purpose_output_id\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__common__field_0(__helios__common__field_1(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_current_validator_hash\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__credential__validator__hash(\n\t\t\t\t__helios__credential__validator__cast(\n\t\t\t\t\t__helios__address__credential(\n\t\t\t\t\t\t__helios__txoutput__address(\n\t\t\t\t\t\t\t__helios__txinput__output(\n\t\t\t\t\t\t\t\t__helios__scriptcontext__get_current_input(self)()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_current_minting_policy_hash\", \"__helios__scriptcontext__get_spending_purpose_output_id\"));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_staking_purpose\", \n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__scriptcontext__purpose(self)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptcontext__get_script_purpose\", \n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__scriptcontext__purpose(self)\n\t\t}\n\t}`));\n\n\n\t// StakingPurpose builtins\n\taddDataFuncs(\"__helios__stakingpurpose\");\n\n\n\t// StakingPurpose::Rewarding builtins\n\taddEnumDataFuncs(\"__helios__stakingpurpose__rewarding\");\n\tadd(new RawFunc(\"__helios__stakingpurpose__rewarding__credential\", \"__helios__common__field_0\"));\n\n\t\n\t// StakingPurpose::Certifying builtins\n\taddEnumDataFuncs(\"__helios__stakingpurpose__certifying\");\n\tadd(new RawFunc(\"__helios__stakingpurpose__certifying__dcert\", \"__helios__common__field_0\"));\n\n\n\t// ScriptPurpose builtins\n\taddDataFuncs(\"__helios__scriptpurpose\");\n\tadd(new RawFunc(\"__helios__scriptpurpose__new_minting\",\n\t`(mintingPolicyHash) -> {\n\t\t__core__constrData(0, __helios__common__list_1(mintingPolicyHash))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptpurpose__new_spending\",\n\t`(output_id) -> {\n\t\t__core__constrData(1, __helios__common__list_1(output_id))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptpurpose__new_rewarding\",\n\t`(cred) -> {\n\t\t__core__constrData(2, __helios__common__list_1(cred))\n\t}`));\n\tadd(new RawFunc(\"__helios__scriptpurpose__new_certifying\",\n\t`(dcert) -> {\n\t\t__core__constrData(3, __helios__common__list_1(dcert))\n\t}`));\n\n\n\t// ScriptPurpose::Minting builtins\n\taddEnumDataFuncs(\"__helios__scriptpurpose__minting\");\n\tadd(new RawFunc(\"__helios__scriptpurpose__minting__policy_hash\", \"__helios__common__field_0\"));\n\n\t\n\t// ScriptPurpose::Spending builtins\n\taddEnumDataFuncs(\"__helios__scriptpurpose__spending\");\n\tadd(new RawFunc(\"__helios__scriptpurpose__spending__output_id\", \"__helios__common__field_0\"));\n\n\t\n\t// ScriptPurpose::Rewarding builtins\n\taddEnumDataFuncs(\"__helios__scriptpurpose__rewarding\");\n\tadd(new RawFunc(\"__helios__scriptpurpose__rewarding__credential\", \"__helios__common__field_0\"));\n\n\t\n\t// ScriptPurpose::Certifying builtins\n\taddEnumDataFuncs(\"__helios__scriptpurpose__certifying\");\n\tadd(new RawFunc(\"__helios__scriptpurpose__certifying__dcert\", \"__helios__common__field_0\"));\n\n\n\t// DCert builtins\n\taddDataFuncs(\"__helios__dcert\");\n\tadd(new RawFunc(\"__helios__dcert__new_register\",\n\t`(cred) -> {\n\t\t__core__constrData(0, __helios__common__list_1(cred))\n\t}`));\n\tadd(new RawFunc(\"__helios__dcert__new_deregister\",\n\t`(cred) -> {\n\t\t__core__constrData(1, __helios__common__list_1(cred))\n\t}`));\n\tadd(new RawFunc(\"__helios__dcert__new_delegate\",\n\t`(cred, pool_id) -> {\n\t\t__core__constrData(2, __helios__common__list_2(cred, pool_id))\n\t}`));\n\tadd(new RawFunc(\"__helios__dcert__new_register_pool\",\n\t`(id, vrf) -> {\n\t\t__core__constrData(3, __helios__common__list_2(id, vrf))\n\t}`));\n\tadd(new RawFunc(\"__helios__dcert__new_retire_pool\",\n\t`(id, epoch) -> {\n\t\t__core__constrData(4, __helios__common__list_2(id, epoch))\n\t}`));\n\n\n\t// DCert::Register builtins\n\taddEnumDataFuncs(\"__helios__dcert__register\");\n\tadd(new RawFunc(\"__helios__dcert__register__credential\", \"__helios__common__field_0\"));\n\n\n\t// DCert::Deregister builtins\n\taddEnumDataFuncs(\"__helios__dcert__deregister\");\n\tadd(new RawFunc(\"__helios__dcert__deregister__credential\", \"__helios__common__field_0\"));\n\n\n\t// DCert::Delegate builtins\n\taddEnumDataFuncs(\"__helios__dcert__delegate\");\n\tadd(new RawFunc(\"__helios__dcert__delegate__delegator\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__dcert__delegate__pool_id\", \"__helios__common__field_1\"));\n\n\n\t// DCert::RegisterPool builtins\n\taddEnumDataFuncs(\"__helios__dcert__registerpool\");\n\tadd(new RawFunc(\"__helios__dcert__registerpool__pool_id\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__dcert__registerpool__pool_vrf\", \"__helios__common__field_1\"));\n\n\n\t// DCert::RetirePool builtins\n\taddEnumDataFuncs(\"__helios__dcert__retirepool\");\n\tadd(new RawFunc(\"__helios__dcert__retirepool__pool_id\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__dcert__retirepool__epoch\", \"__helios__common__field_1\"));\n\n\n\t// Tx builtins\n\taddDataFuncs(\"__helios__tx\");\n\tadd(new RawFunc(\"__helios__tx__new\",\n\t`(inputs, ref_inputs, outputs, fee, minted, dcerts, withdrawals, validity, signatories, redeemers, datums) -> {\n\t\t__core__constrData(0, __helios__common__list_12(\n\t\t\tinputs,\n\t\t\tref_inputs,\n\t\t\toutputs,\n\t\t\tfee,\n\t\t\tminted,\n\t\t\tdcerts,\n\t\t\twithdrawals,\n\t\t\tvalidity,\n\t\t\tsignatories,\n\t\t\tredeemers,\n\t\t\tdatums,\n\t\t\t__helios__txid__CURRENT\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__inputs\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__tx__ref_inputs\", \"__helios__common__field_1\"))\n\tadd(new RawFunc(\"__helios__tx__outputs\", \"__helios__common__field_2\"));\n\tadd(new RawFunc(\"__helios__tx__fee\", \"__helios__common__field_3\"));\n\tadd(new RawFunc(\"__helios__tx__minted\", \"__helios__common__field_4\"));\n\tadd(new RawFunc(\"__helios__tx__dcerts\", \"__helios__common__field_5\"));\n\tadd(new RawFunc(\"__helios__tx__withdrawals\", \"__helios__common__field_6\"));\n\tadd(new RawFunc(\"__helios__tx__time_range\", \"__helios__common__field_7\"));\n\tadd(new RawFunc(\"__helios__tx__signatories\", \"__helios__common__field_8\"));\n\tadd(new RawFunc(\"__helios__tx__redeemers\", \"__helios__common__field_9\"));\n\tadd(new RawFunc(\"__helios__tx__datums\", \"__helios__common__field_10\"));\n\tadd(new RawFunc(\"__helios__tx__id\", \"__helios__common__field_11\"));\n\tadd(new RawFunc(\"__helios__tx__find_datum_hash\",\n\t`(self) -> {\n\t\t(datum) -> {\n\t\t\t__core__fstPair(__helios__common__find(\n\t\t\t\t__core__unMapData(__helios__tx__datums(self)),\n\t\t\t\t(pair) -> {\n\t\t\t\t\t__core__equalsData(__core__sndPair(pair), datum)\n\t\t\t\t},\n\t\t\t\t__helios__common__identity\n\t\t\t))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__get_datum_data\",\n\t`(self) -> {\n\t\t(output) -> {\n\t\t\t(pair) -> {\n\t\t\t\t(idx) -> {\n\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t__core__equalsInteger(idx, 1),\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__helios__map__get(__helios__tx__datums(self))(__core__headList(__core__sndPair(pair)))\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__core__equalsInteger(idx, 2),\n\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t__core__headList(__core__sndPair(pair))\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t() -> {error(\"output doesn't have a datum\")}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}(__core__fstPair(pair))\n\t\t\t}(__core__unConstrData(__helios__txoutput__datum(output)))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__filter_outputs\",\n\t`(self, fn) -> {\n\t\t__core__listData(\n\t\t\t__helios__common__filter_list(\n\t\t\t\t__core__unListData(__helios__tx__outputs(self)), \n\t\t\t\tfn\n\t\t\t)\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_sent_to\",\n\t`(self) -> {\n\t\t(pubKeyHash) -> {\n\t\t\t__helios__tx__filter_outputs(self, (output) -> {\n\t\t\t\t__helios__txoutput__is_sent_to(output)(pubKeyHash)\n\t\t\t})\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_sent_to_datum\",\n\t`(self) -> {\n\t\t(pubKeyHash, datum, isInline) -> {\n\t\t\t__core__ifThenElse(\n\t\t\t\tisInline,\n\t\t\t\t() -> {\n\t\t\t\t\t__helios__tx__outputs_sent_to_inline_datum(self, pubKeyHash, datum)\n\t\t\t\t},\n\t\t\t\t() -> {\n\t\t\t\t\t__helios__tx__outputs_sent_to_datum_hash(self, pubKeyHash, datum)\n\t\t\t\t}\n\t\t\t)()\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_sent_to_datum_hash\",\n\t`(self, pubKeyHash, datum) -> {\n\t\t(datumHash) -> {\n\t\t\t__helios__tx__filter_outputs(\n\t\t\t\tself, \n\t\t\t\t(output) -> {\n\t\t\t\t\t__helios__bool__and(\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__helios__txoutput__is_sent_to(output)(pubKeyHash)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__helios__txoutput__has_datum_hash(output, datumHash)\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t)\n\t\t}(__helios__common__hash_datum_data(datum))\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_sent_to_inline_datum\",\n\t`(self, pubKeyHash, datum) -> {\n\t\t__helios__tx__filter_outputs(\n\t\t\tself, \n\t\t\t(output) -> {\n\t\t\t\t__helios__bool__and(\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__helios__txoutput__is_sent_to(output)(pubKeyHash)\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__helios__txoutput__has_inline_datum(output, datum)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_locked_by\",\n\t`(self) -> {\n\t\t(validatorHash) -> {\n\t\t\t__helios__tx__filter_outputs(self, (output) -> {\n\t\t\t\t__helios__txoutput__is_locked_by(output)(validatorHash)\n\t\t\t})\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_locked_by_datum\",\n\t`(self) -> {\n\t\t(validatorHash, datum, isInline) -> {\n\t\t\t__core__ifThenElse(\n\t\t\t\tisInline,\n\t\t\t\t() -> {\n\t\t\t\t\t__helios__tx__outputs_locked_by_inline_datum(self, validatorHash, datum)\n\t\t\t\t},\n\t\t\t\t() -> {\n\t\t\t\t\t__helios__tx__outputs_locked_by_datum_hash(self, validatorHash, datum)\n\t\t\t\t}\n\t\t\t)()\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_locked_by_datum_hash\",\n\t`(self, validatorHash, datum) -> {\n\t\t(datumHash) -> {\n\t\t\t__helios__tx__filter_outputs(\n\t\t\t\tself, \n\t\t\t\t(output) -> {\n\t\t\t\t\t__helios__bool__and(\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__helios__txoutput__is_locked_by(output)(validatorHash)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__helios__txoutput__has_datum_hash(output, datumHash)\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t)\n\t\t}(__helios__common__hash_datum_data(datum))\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__outputs_locked_by_inline_datum\",\n\t`(self, validatorHash, datum) -> {\n\t\t__helios__tx__filter_outputs(\n\t\t\tself, \n\t\t\t(output) -> {\n\t\t\t\t__helios__bool__and(\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__helios__txoutput__is_locked_by(output)(validatorHash)\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__helios__txoutput__has_inline_datum(output, datum)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__value_sent_to\",\n\t`(self) -> {\n\t\t(pubKeyHash) -> {\n\t\t\t__helios__txoutput__sum_values(__helios__tx__outputs_sent_to(self)(pubKeyHash))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__value_sent_to_datum\",\n\t`(self) -> {\n\t\t(pubKeyHash, datum, isInline) -> {\n\t\t\t__helios__txoutput__sum_values(__helios__tx__outputs_sent_to_datum(self)(pubKeyHash, datum, isInline))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__value_locked_by\",\n\t`(self) -> {\n\t\t(validatorHash) -> {\n\t\t\t__helios__txoutput__sum_values(__helios__tx__outputs_locked_by(self)(validatorHash))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__value_locked_by_datum\",\n\t`(self) -> {\n\t\t(validatorHash, datum, isInline) -> {\n\t\t\t__helios__txoutput__sum_values(__helios__tx__outputs_locked_by_datum(self)(validatorHash, datum, isInline))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__tx__is_signed_by\",\n\t`(self) -> {\n\t\t(hash) -> {\n\t\t\t__helios__common__any(\n\t\t\t\t__core__unListData(__helios__tx__signatories(self)),\n\t\t\t\t(signatory) -> {\n\t\t\t\t\t__core__equalsData(signatory, hash)\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\n\n\t// TxId builtins\n\taddDataFuncs(\"__helios__txid\");\n\tadd(new RawFunc(\"__helios__txid__bytes\",\n\t`(self) -> {\n\t\t__core__headList(__core__sndPair(__core__unConstrData(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__txid____lt\", \n\t`(a, b) -> {\n\t\t__helios__bytearray____lt(__helios__txid__bytes(a), __helios__txid__bytes(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__txid____leq\", \n\t`(a, b) -> {\n\t\t__helios__bytearray____leq(__helios__txid__bytes(a), __helios__txid__bytes(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__txid____gt\", \n\t`(a, b) -> {\n\t\t__helios__bytearray____gt(__helios__txid__bytes(a), __helios__txid__bytes(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__txid____geq\", \n\t`(a, b) -> {\n\t\t__helios__bytearray____geq(__helios__txid__bytes(a), __helios__txid__bytes(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__txid__new\",\n\t`(bytes) -> {\n\t\t__core__constrData(0, __helios__common__list_1(bytes)) \n\t}`));\n\tadd(new RawFunc(\"__helios__txid__CURRENT\", \"__helios__txid__new(__core__bData(#0000000000000000000000000000000000000000000000000000000000000000))\"));\n\tadd(new RawFunc(\"__helios__txid__show\",\n\t`(self) -> {\n\t\t__helios__bytearray__show(__helios__txid__bytes(self))\n\t}`));\n\n\n\t// TxInput builtins\n\taddDataFuncs(\"__helios__txinput\");\n\tadd(new RawFunc(\"__helios__txinput__new\",\n\t`(output_id, output) -> {\n\t\t__core__constrData(0, __helios__common__list_2(output_id, output))\n\t}`));\n\tadd(new RawFunc(\"__helios__txinput__output_id\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__txinput__output\", \"__helios__common__field_1\"));\n\t\n\n\t// TxOutput builtins\n\taddDataFuncs(\"__helios__txoutput\");\n\tadd(new RawFunc(\"__helios__txoutput__new\", \n\t`(address, value, datum) -> {\n\t\t__core__constrData(0, __helios__common__list_4(address, value, datum, __helios__option__none__new()))\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutput__address\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__txoutput__value\", \"__helios__common__field_1\"));\n\tadd(new RawFunc(\"__helios__txoutput__datum\", \"__helios__common__field_2\"));\n\tadd(new RawFunc(\"__helios__txoutput__ref_script_hash\", \"__helios__common__field_3\"));\n\tadd(new RawFunc(\"__helios__txoutput__get_datum_hash\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(pair) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__equalsInteger(__core__fstPair(pair), 1),\n\t\t\t\t\t() -> {__core__headList(__core__sndPair(pair))},\n\t\t\t\t\t() -> {__core__bData(#)}\n\t\t\t\t)()\n\t\t\t}(__core__unConstrData(__helios__txoutput__datum(self)))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutput__has_datum_hash\",\n\t`(self, datumHash) -> {\n\t\t__core__equalsData(__helios__txoutput__get_datum_hash(self)(), datumHash)\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutput__has_inline_datum\",\n\t`(self, datum) -> {\n\t\t(pair) -> {\n\t\t\t__core__ifThenElse(\n\t\t\t\t__core__equalsInteger(__core__fstPair(pair), 2),\n\t\t\t\t() -> {__core__equalsData(datum, __core__headList(__core__sndPair(pair)))},\n\t\t\t\t() -> {false}\n\t\t\t)()\n\t\t}(__core__unConstrData(__helios__txoutput__datum(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutput__is_locked_by\",\n\t`(self) -> {\n\t\t(hash) -> {\n\t\t\t(credential) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__helios__credential__is_validator(credential),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__equalsData(\n\t\t\t\t\t\t\thash, \n\t\t\t\t\t\t\t__helios__credential__validator__hash(\n\t\t\t\t\t\t\t\t__helios__credential__validator__cast(credential)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t},\n\t\t\t\t\t() -> {false}\n\t\t\t\t)()\n\t\t\t}(__helios__address__credential(__helios__txoutput__address(self)))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutput__is_sent_to\",\n\t`(self) -> {\n\t\t(pkh) -> {\n\t\t\t(credential) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__helios__credential__is_pubkey(credential),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__equalsData(\n\t\t\t\t\t\t\tpkh, \n\t\t\t\t\t\t\t__helios__credential__pubkey__hash(\n\t\t\t\t\t\t\t\t__helios__credential__pubkey__cast(credential)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t},\n\t\t\t\t\t() -> {false}\n\t\t\t\t)()\n\t\t\t}(__helios__address__credential(__helios__txoutput__address(self)))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutput__sum_values\",\n\t`(outputs) -> {\n\t\t__helios__list__fold(outputs)(\n\t\t\t(prev, txOutput) -> {\n\t\t\t\t__helios__value____add(\n\t\t\t\t\tprev,\n\t\t\t\t\t__helios__txoutput__value(txOutput)\n\t\t\t\t)\n\t\t\t}, \n\t\t\t__helios__value__ZERO\n\t\t)\t\n\t}`));\n\n\n\t// OutputDatum\n\taddDataFuncs(\"__helios__outputdatum\");\n\tadd(new RawFunc(\"__helios__outputdatum__new_none\",\n\t`() -> {\n\t\t__core__constrData(0, __helios__common__list_0)\n\t}`));\n\tadd(new RawFunc(\"__helios__outputdatum__new_hash\",\n\t`(hash) -> {\n\t\t__core__constrData(1, __helios__common__list_1(hash))\n\t}`));\n\tadd(new RawFunc(\"__helios__outputdatum__new_inline\",\n\t`(data) -> {\n\t\t__core__constrData(2, __helios__common__list_1(data))\n\t}`));\n\tadd(new RawFunc(\"__helios__outputdatum__new_inline_from_bool\",\n\t`(b) -> {\n\t\t__helios__outputdatum__new_inline(_helios__common__boolData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__outputdatum__get_inline_data\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(pair) -> {\n\t\t\t\t(index, fields) -> {\n\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t__core__equalsInteger(index, 2),\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t__core__headList(fields)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\terror(\"not an inline datum\")\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}(__core__fstPair(pair), __core__sndPair(pair))\n\t\t\t}(__core__unConstrData(self))\n\t\t}\n\t}`));\n\n\n\t// OutputDatum::None\n\taddEnumDataFuncs(\"__helios__outputdatum__none\");\n\t\n\n\t// OutputDatum::Hash\n\taddEnumDataFuncs(\"__helios__outputdatum__hash\");\n\tadd(new RawFunc(\"__helios__outputdatum__hash__hash\", \"__helios__common__field_0\"));\n\n\n\t// OutputDatum::Inline\n\taddEnumDataFuncs(\"__helios__outputdatum__inline\");\n\tadd(new RawFunc(\"__helios__outputdatum__inline__data\", \"__helios__common__field_0\"));\n\n\n\t// RawData\n\taddDataFuncs(\"__helios__data\");\n\tadd(new RawFunc(\"__helios__data__tag\", \n\t`(self) -> {\n\t\t__core__iData(__core__fstPair(__core__unConstrData(self)))\n\t}`));\n\n\n\t// TxOutputId\n\taddDataFuncs(\"__helios__txoutputid\");\n\tadd(new RawFunc(\"__helios__txoutputid__tx_id\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__txoutputid__index\", \"__helios__common__field_1\"));\n\tadd(new RawFunc(\"__helios__txoutputid__comp\", \n\t`(a, b, comp_txid, comp_index) -> {\n\t\t(a_txid, a_index) -> {\n\t\t\t(b_txid, b_index) -> {\n\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t__core__equalsData(a_txid, b_txid),\n\t\t\t\t\t() -> {\n\t\t\t\t\t\tcomp_index(a_index, b_index)\n\t\t\t\t\t},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\tcomp_txid(a_txid, b_txid)\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}(__helios__txoutputid__tx_id(b), __helios__txoutputid__index(b))\n\t\t}(__helios__txoutputid__tx_id(a), __helios__txoutputid__index(a))\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutputid____lt\", \n\t`(a, b) -> {\n\t\t__helios__txoutputid__comp(a, b, __helios__txid____lt, __helios__int____lt)\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutputid____leq\", \n\t`(a, b) -> {\n\t\t__helios__txoutputid__comp(a, b, __helios__txid____leq, __helios__int____leq)\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutputid____gt\", \n\t`(a, b) -> {\n\t\t__helios__txoutputid__comp(a, b, __helios__txid____gt, __helios__int____gt)\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutputid____geq\", \n\t`(a, b) -> {\n\t\t__helios__txoutputid__comp(a, b, __helios__txid____geq, __helios__int____geq)\n\t}`));\n\tadd(new RawFunc(\"__helios__txoutputid__new\",\n\t`(tx_id, idx) -> {\n\t\t__core__constrData(0, __helios__common__list_2(tx_id, idx))\n\t}`));\n\n\n\t// Address\n\taddDataFuncs(\"__helios__address\");\n\tadd(new RawFunc(\"__helios__address__new\", \n\t`(cred, staking_cred) -> {\n\t\t__core__constrData(0, __helios__common__list_2(cred, staking_cred))\n\t}`));\n\tadd(new RawFunc(\"__helios__address__new_empty\",\n\t`() -> {\n\t\t__core__constrData(0, __helios__common__list_2(__helios__credential__new_pubkey(__core__bData(#)), __helios__option__none__new()))\n\t}`))\n\tadd(new RawFunc(\"__helios__address__credential\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__address__staking_credential\", \"__helios__common__field_1\"));\n\tadd(new RawFunc(\"__helios__address__is_staked\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__core__equalsInteger(__core__fstPair(__core__unConstrData(__helios__common__field_1(self))), 0)\n\t\t}\n\t}`));\n\n\n\t// Credential builtins\n\taddDataFuncs(\"__helios__credential\");\n\tadd(new RawFunc(\"__helios__credential__new_pubkey\",\n\t`(hash) -> {\n\t\t__core__constrData(0, __helios__common__list_1(hash))\n\t}`));\n\tadd(new RawFunc(\"__helios__credential__new_validator\",\n\t`(hash) -> {\n\t\t__core__constrData(1, __helios__common__list_1(hash))\n\t}`));\n\tadd(new RawFunc(\"__helios__credential__is_pubkey\",\n\t`(self) -> {\n\t\t__core__equalsInteger(__core__fstPair(__core__unConstrData(self)), 0)\n\t}`));\n\tadd(new RawFunc(\"__helios__credential__is_validator\",\n\t`(self) -> {\n\t\t__core__equalsInteger(__core__fstPair(__core__unConstrData(self)), 1)\n\t}`));\n\n\n\t// Credential::PubKey builtins\n\taddEnumDataFuncs(\"__helios__credential__pubkey\");\n\tadd(new RawFunc(\"__helios__credential__pubkey__cast\",\n\t`(data) -> {\n\t\t__helios__common__assert_constr_index(data, 0)\n\t}`));\n\tadd(new RawFunc(\"__helios__credential__pubkey__hash\", \"__helios__common__field_0\"));\n\n\n\t// Credential::Validator builtins\n\taddEnumDataFuncs(\"__helios__credential__validator\");\n\tadd(new RawFunc(\"__helios__credential__validator__cast\",\n\t`(data) -> {\n\t\t__helios__common__assert_constr_index(data, 1)\n\t}`));\n\tadd(new RawFunc(\"__helios__credential__validator__hash\", \"__helios__common__field_0\"));\n\n\n\t// StakingHash builtins\n\taddDataFuncs(\"__helios__stakinghash\");\n\tadd(new RawFunc(\"__helios__stakinghash__new_stakekey\", \"__helios__credential__new_pubkey\"));\n\tadd(new RawFunc(\"__helios__stakinghash__new_validator\", \"__helios__credential__new_validator\"));\n\tadd(new RawFunc(\"__helios__stakinghash__is_stakekey\", \"__helios__credential__is_stakekey\"));\n\tadd(new RawFunc(\"__helios__stakinghash__is_validator\", \"__helios__credential__is_validator\"));\n\n\n\t// StakingHash::StakeKey builtins\n\taddEnumDataFuncs(\"__helios__stakinghash__stakekey\");\n\tadd(new RawFunc(\"__helios__stakinghash__stakekey__cast\", \"__helios__credential__pubkey__cast\"));\n\tadd(new RawFunc(\"__helios__stakinghash__stakekey__hash\", \"__helios__credential__pubkey__hash\"));\n\n\n\t// StakingHash::Validator builtins\n\taddEnumDataFuncs(\"__helios__stakinghash__validator\");\n\tadd(new RawFunc(\"__helios__stakinghash__validator__cast\", \"__helios__credential__validator__cast\"));\n\tadd(new RawFunc(\"__helios__stakinghash__validator__hash\", \"__helios__credential__validator__hash\"));\n\n\n\t// StakingCredential builtins\n\taddDataFuncs(\"__helios__stakingcredential\");\n\tadd(new RawFunc(\"__helios__stakingcredential__new_hash\", \n\t`(cred) -> {\n\t\t__core__constrData(0, __helios__common__list_1(cred))\n\t}`));\n\tadd(new RawFunc(\"__helios__stakingcredential__new_ptr\", \n\t`(i, j, k) -> {\n\t\t__core__constrData(1, __helios__common__list_3(i, j, k))\n\t}`));\n\n\t\n\t// StakingCredential::Hash builtins\n\taddEnumDataFuncs(\"__helios__stakingcredential__hash\");\n\tadd(new RawFunc(\"__helios__stakingcredential__hash__hash\", \"__helios__common__field_0\"));\n\n\n\t// StakingCredential::Ptr builtins\n\taddEnumDataFuncs(\"__helios__stakingcredential__ptr\");\n\n\n\t// Time builtins\n\taddDataFuncs(\"__helios__time\");\n\tadd(new RawFunc(\"__helios__time__new\", `__helios__common__identity`));\n\tadd(new RawFunc(\"__helios__time____add\", `__helios__int____add`));\n\tadd(new RawFunc(\"__helios__time____sub\", `__helios__int____sub`));\n\tadd(new RawFunc(\"__helios__time____sub_alt\", `__helios__int____sub`));\n\tadd(new RawFunc(\"__helios__time____geq\", `__helios__int____geq`));\n\tadd(new RawFunc(\"__helios__time____gt\", `__helios__int____gt`));\n\tadd(new RawFunc(\"__helios__time____leq\", `__helios__int____leq`));\n\tadd(new RawFunc(\"__helios__time____lt\", `__helios__int____lt`));\n\tadd(new RawFunc(\"__helios__time__show\", `__helios__int__show`));\n\n\n\t// Duratin builtins\n\taddDataFuncs(\"__helios__duration\");\n\tadd(new RawFunc(\"__helios__duration__new\", `__helios__common__identity`));\n\tadd(new RawFunc(\"__helios__duration____add\", `__helios__int____add`));\n\tadd(new RawFunc(\"__helios__duration____sub\", `__helios__int____sub`));\n\tadd(new RawFunc(\"__helios__duration____mul\", `__helios__int____mul`));\n\tadd(new RawFunc(\"__helios__duration____div\", `__helios__int____div`));\n\tadd(new RawFunc(\"__helios__duration____div_alt\", `__helios__int____div`));\n\tadd(new RawFunc(\"__helios__duration____mod\", `__helios__int____mod`));\n\tadd(new RawFunc(\"__helios__duration____geq\", `__helios__int____geq`));\n\tadd(new RawFunc(\"__helios__duration____gt\", `__helios__int____gt`));\n\tadd(new RawFunc(\"__helios__duration____leq\", `__helios__int____leq`));\n\tadd(new RawFunc(\"__helios__duration____lt\", `__helios__int____lt`));\n\tadd(new RawFunc(\"__helios__duration__SECOND\", \"__core__iData(1000)\"));\n\tadd(new RawFunc(\"__helios__duration__MINUTE\", \"__core__iData(60000)\"));\n\tadd(new RawFunc(\"__helios__duration__HOUR\", \"__core__iData(3600000)\"));\n\tadd(new RawFunc(\"__helios__duration__DAY\", \"__core__iData(86400000)\"));\n\tadd(new RawFunc(\"__helios__duration__WEEK\", \"__core__iData(604800000)\"));\n\n\n\t// TimeRange builtins\n\taddDataFuncs(\"__helios__timerange\");\n\tadd(new RawFunc(\"__helios__timerange__new\", `\n\t(a, b) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t\t__core__constrData(1, __helios__common__list_1(a)),\n\t\t\t\t__helios__common__boolData(true)\n\t\t\t)),\n\t\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t\t__core__constrData(1, __helios__common__list_1(b)),\n\t\t\t\t__helios__common__boolData(true)\n\t\t\t))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__ALWAYS\", `\n\t__core__constrData(0, __helios__common__list_2(\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(0, __helios__common__list_0),\n\t\t\t__helios__common__boolData(true)\n\t\t)),\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(2, __helios__common__list_0),\n\t\t\t__helios__common__boolData(true)\n\t\t))\n\t))`));\n\tadd(new RawFunc(\"__helios__timerange__NEVER\", `\n\t__core__constrData(0, __helios__common__list_2(\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(2, __helios__common__list_0),\n\t\t\t__helios__common__boolData(true)\n\t\t)),\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(0, __helios__common__list_0),\n\t\t\t__helios__common__boolData(true)\n\t\t))\n\t))`));\n\tadd(new RawFunc(\"__helios__timerange__from\", `\n\t(a) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t\t__core__constrData(1, __helios__common__list_1(a)),\n\t\t\t\t__helios__common__boolData(true)\n\t\t\t)),\n\t\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t\t__core__constrData(2, __helios__common__list_0),\n\t\t\t\t__helios__common__boolData(true)\n\t\t\t))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__to\", `\n\t(b) -> {\n\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t\t__core__constrData(0, __helios__common__list_0),\n\t\t\t\t__helios__common__boolData(true)\n\t\t\t)),\n\t\t\t__core__constrData(0, __helios__common__list_2(\n\t\t\t\t__core__constrData(1, __helios__common__list_1(b)),\n\t\t\t\t__helios__common__boolData(true)\n\t\t\t))\n\t\t))\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__is_before\", \n\t`(self) -> {\n\t\t(t) -> {\n\t\t\t(upper) -> {\n\t\t\t\t(extended, closed) -> {\n\t\t\t\t\t(extType) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsInteger(extType, 2),\n\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsInteger(extType, 0),\n\t\t\t\t\t\t\t\t\t() -> {true},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\tclosed,\n\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanInteger(__core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))), __core__unIData(t))},\n\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanEqualsInteger(__core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))), __core__unIData(t))}\n\t\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(__core__fstPair(__core__unConstrData(extended)))\n\t\t\t\t}(__helios__common__field_0(upper), __helios__common__unBoolData(__helios__common__field_1(upper)))\n\t\t\t}(__helios__common__field_1(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__is_after\",\n\t`(self) -> {\n\t\t(t) -> {\n\t\t\t(lower) -> {\n\t\t\t\t(extended, closed) -> {\n\t\t\t\t\t(extType) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsInteger(extType, 0),\n\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsInteger(extType, 2),\n\t\t\t\t\t\t\t\t\t() -> {true},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\tclosed,\n\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanInteger(__core__unIData(t), __core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))))},\n\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanEqualsInteger(__core__unIData(t), __core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))))}\n\t\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(__core__fstPair(__core__unConstrData(extended)))\n\t\t\t\t}(__helios__common__field_0(lower), __helios__common__unBoolData(__helios__common__field_1(lower)))\n\t\t\t}(__helios__common__field_0(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__contains\",\n\t`(self) -> {\n\t\t(t) -> {\n\t\t\t(lower) -> {\n\t\t\t\t(extended, closed) -> {\n\t\t\t\t\t(lowerExtType, checkUpper) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsInteger(lowerExtType, 2),\n\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsInteger(lowerExtType, 0),\n\t\t\t\t\t\t\t\t\t() -> {checkUpper()},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t\tclosed,\n\t\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanEqualsInteger(__core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))), __core__unIData(t))},\n\t\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanInteger(__core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))), __core__unIData(t))}\n\t\t\t\t\t\t\t\t\t\t\t)(),\n\t\t\t\t\t\t\t\t\t\t\t() -> {checkUpper()},\n\t\t\t\t\t\t\t\t\t\t\t() -> {false}\n\t\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(__core__fstPair(__core__unConstrData(extended)), () -> {\n\t\t\t\t\t\t(upper) -> {\n\t\t\t\t\t\t\t(extended, closed) -> {\n\t\t\t\t\t\t\t\t(upperExtType) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(upperExtType, 0),\n\t\t\t\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(upperExtType, 2),\n\t\t\t\t\t\t\t\t\t\t\t\t() -> {true},\n\t\t\t\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclosed,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanEqualsInteger(__core__unIData(t), __core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))))},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t() -> {__core__lessThanInteger(__core__unIData(t), __core__unIData(__core__headList(__core__sndPair(__core__unConstrData(extended)))))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__core__fstPair(__core__unConstrData(extended)))\n\t\t\t\t\t\t\t}(__helios__common__field_0(upper), __helios__common__unBoolData(__helios__common__field_1(upper)))\n\t\t\t\t\t\t}(__helios__common__field_1(self))\n\t\t\t\t\t})\n\t\t\t\t}(__helios__common__field_0(lower), __helios__common__unBoolData(__helios__common__field_1(lower)))\n\t\t\t}(__helios__common__field_0(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__start\",\n\t`(self) -> {\n\t\t__helios__common__field_0(__helios__common__field_0(__helios__common__field_0(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__end\",\n\t`(self) -> {\n\t\t__helios__common__field_0(__helios__common__field_0(__helios__common__field_1(self)))\n\t}`));\n\tadd(new RawFunc(\"__helios__timerange__show\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t(show_extended) -> {\n\t\t\t\t__helios__string____add(\n\t\t\t\t\t(lower) -> {\n\t\t\t\t\t\t(extended, closed) -> {\n\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\tclosed,\n\t\t\t\t\t\t\t\t\t() -> {__helios__common__stringData(\"[\")},\n\t\t\t\t\t\t\t\t\t() -> {__helios__common__stringData(\"(\")}\n\t\t\t\t\t\t\t\t)(),\n\t\t\t\t\t\t\t\tshow_extended(extended)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}(__helios__common__field_0(lower), __helios__common__unBoolData(__helios__common__field_1(lower)))\n\t\t\t\t\t}(__helios__common__field_0(self)),\n\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t__helios__common__stringData(\",\"),\n\t\t\t\t\t\t(upper) -> {\n\t\t\t\t\t\t\t(extended, closed) -> {\n\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\tshow_extended(extended),\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\tclosed,\n\t\t\t\t\t\t\t\t\t\t() -> {__helios__common__stringData(\"]\")},\n\t\t\t\t\t\t\t\t\t\t() -> {__helios__common__stringData(\")\")}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}(__helios__common__field_0(upper), __helios__common__unBoolData(__helios__common__field_1(upper)))\n\t\t\t\t\t\t}(__helios__common__field_1(self))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}(\n\t\t\t\t(extended) -> {\n\t\t\t\t\t(extType) -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsInteger(extType, 0),\n\t\t\t\t\t\t\t() -> {__helios__common__stringData(\"-inf\")},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsInteger(extType, 2),\n\t\t\t\t\t\t\t\t\t() -> {__helios__common__stringData(\"+inf\")},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t(fields) -> {\n\t\t\t\t\t\t\t\t\t\t\t__helios__int__show(__core__headList(fields))()\n\t\t\t\t\t\t\t\t\t\t}(__core__sndPair(__core__unConstrData(extended)))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}(__core__fstPair(__core__unConstrData(extended)))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`))\n\n\n\t// AssetClass builtins\n\taddDataFuncs(\"__helios__assetclass\");\n\tadd(new RawFunc(\"__helios__assetclass__ADA\", `__helios__assetclass__new(__core__bData(#), __core__bData(#))`));\n\tadd(new RawFunc(\"__helios__assetclass__new\",\n\t`(mph, token_name) -> {\n\t\t__core__constrData(0, __helios__common__list_2(mph, token_name))\n\t}`));\n\tadd(new RawFunc(\"__helios__assetclass__mph\", \"__helios__common__field_0\"));\n\tadd(new RawFunc(\"__helios__assetclass__token_name\", \"__helios__common__field_1\"));\n\n\n\t// Value builtins\n\tadd(new RawFunc(\"__helios__value__serialize\", \"__helios__common__serialize\"));\n\tadd(new RawFunc(\"__helios__value__from_data\", \"__helios__common__identity\"));\n\tadd(new RawFunc(\"__helios__value__ZERO\", `__core__mapData(__core__mkNilPairData(()))`));\n\tadd(new RawFunc(\"__helios__value__lovelace\",\n\t`(i) -> {\n\t\t__helios__value__new(__helios__assetclass__ADA, i)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__new\",\n\t`(assetClass, i) -> {\n\t\t__core__ifThenElse(\n\t\t\t__core__equalsInteger(0, __core__unIData(i)),\n\t\t\t() -> {\n\t\t\t\t__helios__value__ZERO\n\t\t\t},\n\t\t\t() -> {\n\t\t\t\t(mintingPolicyHash, tokenName) -> {\n\t\t\t\t\t__core__mapData(\n\t\t\t\t\t\t__core__mkCons(\n\t\t\t\t\t\t\t__core__mkPairData(\n\t\t\t\t\t\t\t\tmintingPolicyHash, \n\t\t\t\t\t\t\t\t__core__mapData(\n\t\t\t\t\t\t\t\t\t__core__mkCons(\n\t\t\t\t\t\t\t\t\t\t__core__mkPairData(tokenName, i), \n\t\t\t\t\t\t\t\t\t\t__core__mkNilPairData(())\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t), \n\t\t\t\t\t\t\t__core__mkNilPairData(())\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t}(__helios__common__field_0(assetClass), __helios__common__field_1(assetClass))\n\t\t\t}\n\t\t)()\n\t}`));\n\tadd(new RawFunc(\"__helios__value__from_map\", \"__helios__common__identity\"));\n\tadd(new RawFunc(\"__helios__value__to_map\", \n\t`(self) -> {\n\t\t() -> {\n\t\t\tself\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get_map_keys\",\n\t`(map) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, map)\n\t\t}(\n\t\t\t(recurse, map) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tmap, \n\t\t\t\t\t() -> {__helios__common__list_0}, \n\t\t\t\t\t() -> {__core__mkCons(__core__fstPair(__core__headList(map)), recurse(recurse, __core__tailList(map)))}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__merge_map_keys\",\n\t`(a, b) -> {\n\t\t(aKeys) -> {\n\t\t\t(recurse) -> {\n\t\t\t\t(uniqueBKeys) -> {\n\t\t\t\t\t__helios__common__concat(aKeys, uniqueBKeys)\n\t\t\t\t}(recurse(recurse, aKeys, b))\n\t\t\t}(\n\t\t\t\t(recurse, keys, map) -> {\n\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\tmap, \n\t\t\t\t\t\t() -> {__helios__common__list_0}, \n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t(key) -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__helios__common__is_in_bytearray_list(aKeys, key), \n\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, keys, __core__tailList(map))},\n\t\t\t\t\t\t\t\t\t() -> {__core__mkCons(key, recurse(recurse, keys, __core__tailList(map)))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}(__core__fstPair(__core__headList(map)))\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}(__helios__value__get_map_keys(a))\n\t}`));\n\n\tadd(new RawFunc(\"__helios__value__get_inner_map\",\n\t`(map, mph) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, map)\n\t\t}(\n\t\t\t(recurse, map) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tmap, \n\t\t\t\t\t() -> {__core__mkNilPairData(())},\n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), mph), \n\t\t\t\t\t\t\t() -> {__core__unMapData(__core__sndPair(__core__headList(map)))},\n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(map))}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get_inner_map_int\",\n\t`(map, key) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, map, key)\n\t\t}(\n\t\t\t(recurse, map, key) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tmap, \n\t\t\t\t\t() -> {0}, \n\t\t\t\t\t() -> {\n\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), key), \n\t\t\t\t\t\t\t() -> {__core__unIData(__core__sndPair(__core__headList(map)))}, \n\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(map), key)}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__add_or_subtract_inner\",\n\t`(op) -> {\n\t\t(a, b) -> {\n\t\t\t(recurse) -> {\n\t\t\t\trecurse(recurse, __helios__value__merge_map_keys(a, b), __core__mkNilPairData(()))\n\t\t\t}(\n\t\t\t\t(recurse, keys, result) -> {\n\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\tkeys, \n\t\t\t\t\t\t() -> {result}, \n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t(key, tail) -> {\n\t\t\t\t\t\t\t\t(sum) -> {\n\t\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t\t__core__equalsInteger(sum, 0), \n\t\t\t\t\t\t\t\t\t\t() -> {tail}, \n\t\t\t\t\t\t\t\t\t\t() -> {__core__mkCons(__core__mkPairData(key, __core__iData(sum)), tail)}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(op(__helios__value__get_inner_map_int(a, key), __helios__value__get_inner_map_int(b, key)))\n\t\t\t\t\t\t\t}(__core__headList(keys), recurse(recurse, __core__tailList(keys), result))\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__add_or_subtract\",\n\t`(op, a, b) -> {\n\t\t(a, b) -> {\n\t\t\t(recurse) -> {\n\t\t\t\t__core__mapData(recurse(recurse, __helios__value__merge_map_keys(a, b), __core__mkNilPairData(())))\n\t\t\t}(\n\t\t\t\t(recurse, keys, result) -> {\n\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\tkeys, \n\t\t\t\t\t\t() -> {result}, \n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t(key, tail) -> {\n\t\t\t\t\t\t\t\t(item) -> {\n\t\t\t\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\t\t\t\titem, \n\t\t\t\t\t\t\t\t\t\t() -> {tail}, \n\t\t\t\t\t\t\t\t\t\t() -> {__core__mkCons(__core__mkPairData(key, __core__mapData(item)), tail)}\n\t\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t\t}(__helios__value__add_or_subtract_inner(op)(__helios__value__get_inner_map(a, key), __helios__value__get_inner_map(b, key)))\n\t\t\t\t\t\t\t}(__core__headList(keys), recurse(recurse, __core__tailList(keys), result))\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}(__core__unMapData(a), __core__unMapData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__value__map_quantities\",\n\t`(self, op) -> {\n\t\t(self) -> {\n\t\t\t(recurseInner) -> {\n\t\t\t\t(recurseOuter) -> {\n\t\t\t\t\t__core__mapData(recurseOuter(recurseOuter, self))\n\t\t\t\t}(\n\t\t\t\t\t(recurseOuter, outer) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\touter,\n\t\t\t\t\t\t\t() -> {__core__mkNilPairData(())},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t(head) -> {\n\t\t\t\t\t\t\t\t\t__core__mkCons(\n\t\t\t\t\t\t\t\t\t\t__core__mkPairData(\n\t\t\t\t\t\t\t\t\t\t\t__core__fstPair(head), \n\t\t\t\t\t\t\t\t\t\t\t__core__mapData(recurseInner(recurseInner, __core__unMapData(__core__sndPair(head))))\n\t\t\t\t\t\t\t\t\t\t),  \n\t\t\t\t\t\t\t\t\t\trecurseOuter(recurseOuter, __core__tailList(outer))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}(__core__headList(outer))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}(\n\t\t\t\t(recurseInner, inner) -> {\n\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\tinner,\n\t\t\t\t\t\t() -> {__core__mkNilPairData(())},\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t(head) -> {\n\t\t\t\t\t\t\t\t__core__mkCons(\n\t\t\t\t\t\t\t\t\t__core__mkPairData(\n\t\t\t\t\t\t\t\t\t\t__core__fstPair(head),\n\t\t\t\t\t\t\t\t\t\t__core__iData(op(__core__unIData(__core__sndPair(head))))\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\trecurseInner(recurseInner, __core__tailList(inner))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}(__core__headList(inner))\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}(__core__unMapData(self))\n\t}`));\n\tadd(new RawFunc(\"__helios__value__compare_inner\",\n\t`(comp, a, b) -> {\n\t\t(recurse) -> {\n\t\t\trecurse(recurse, __helios__value__merge_map_keys(a, b))\n\t\t}(\n\t\t\t(recurse, keys) -> {\n\t\t\t\t__core__chooseList(\n\t\t\t\t\tkeys, \n\t\t\t\t\t() -> {true}, \n\t\t\t\t\t() -> {\n\t\t\t\t\t\t(key) -> {\n\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t__helios__common__not(comp(__helios__value__get_inner_map_int(a, key), __helios__value__get_inner_map_int(b, key))), \n\t\t\t\t\t\t\t\t() -> {false}, \n\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(keys))}\n\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t}(__core__headList(keys))\n\t\t\t\t\t}\n\t\t\t\t)()\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__compare\",\n\t`(comp, a, b) -> {\n\t\t(a, b) -> {\n\t\t\t(recurse) -> {\n\t\t\t\trecurse(recurse, __helios__value__merge_map_keys(a, b))\n\t\t\t}(\n\t\t\t\t(recurse, keys) -> {\n\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\tkeys, \n\t\t\t\t\t\t() -> {true}, \n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t(key) -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__helios__common__not(\n\t\t\t\t\t\t\t\t\t\t__helios__value__compare_inner(\n\t\t\t\t\t\t\t\t\t\t\tcomp, \n\t\t\t\t\t\t\t\t\t\t\t__helios__value__get_inner_map(a, key), \n\t\t\t\t\t\t\t\t\t\t\t__helios__value__get_inner_map(b, key)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t), \n\t\t\t\t\t\t\t\t\t() -> {false}, \n\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(keys))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}(__core__headList(keys))\n\t\t\t\t\t\t}\n\t\t\t\t\t)()\n\t\t\t\t}\n\t\t\t)\n\t\t}(__core__unMapData(a), __core__unMapData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__value____eq\",\n\t`(a, b) -> {\n\t\t__helios__value__compare(__core__equalsInteger, a, b)\n\t}`));\n\tadd(new RawFunc(\"__helios__value____neq\",\n\t`(a, b) -> {\n\t\t__helios__common__not(__helios__value____eq(a, b))\n\t}`));\n\tadd(new RawFunc(\"__helios__value____add\",\n\t`(a, b) -> {\n\t\t__helios__value__add_or_subtract(__core__addInteger, a, b)\n\t}`));\n\tadd(new RawFunc(\"__helios__value____sub\",\n\t`(a, b) -> {\n\t\t__helios__value__add_or_subtract(__core__subtractInteger, a, b)\n\t}`));\n\tadd(new RawFunc(\"__helios__value____mul\",\n\t`(a, b) -> {\n\t\t(scale) -> {\n\t\t\t__helios__value__map_quantities(a, (qty) -> {__core__multiplyInteger(qty, scale)})\n\t\t}(__core__unIData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__value____div\",\n\t`(a, b) -> {\n\t\t(den) -> {\n\t\t\t__helios__value__map_quantities(a, (qty) -> {__core__divideInteger(qty, den)})\n\t\t}(__core__unIData(b))\n\t}`));\n\tadd(new RawFunc(\"__helios__value____geq\",\n\t`(a, b) -> {\n\t\t__helios__value__compare((a_qty, b_qty) -> {__helios__common__not(__core__lessThanInteger(a_qty, b_qty))}, a, b)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__contains\", `\n\t(self) -> {\n\t\t(value) -> {\n\t\t\t__helios__value____geq(self, value)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value____gt\",\n\t`(a, b) -> {\n\t\t__helios__bool__and(\n\t\t\t() -> {\n\t\t\t\t__helios__common__not(\n\t\t\t\t\t__helios__bool__and(\n\t\t\t\t\t\t__helios__value__is_zero(a),\n\t\t\t\t\t\t__helios__value__is_zero(b)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t},\n\t\t\t() -> {\n\t\t\t\t__helios__value__compare(\n\t\t\t\t\t(a_qty, b_qty) -> {\n\t\t\t\t\t\t__helios__common__not(__core__lessThanEqualsInteger(a_qty, b_qty))\n\t\t\t\t\t}, \n\t\t\t\t\ta, \n\t\t\t\t\tb\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__value____leq\",\n\t`(a, b) -> {\n\t\t__helios__value__compare(__core__lessThanEqualsInteger, a, b)\n\t}`));\n\tadd(new RawFunc(\"__helios__value____lt\",\n\t`(a, b) -> {\n\t\t__helios__bool__and(\n\t\t\t() -> {\n\t\t\t\t__helios__common__not(\n\t\t\t\t\t__helios__bool__and(\n\t\t\t\t\t\t__helios__value__is_zero(a),\n\t\t\t\t\t\t__helios__value__is_zero(b)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t},\n\t\t\t() -> {\n\t\t\t\t__helios__value__compare(\n\t\t\t\t\t(a_qty, b_qty) -> {\n\t\t\t\t\t\t__core__lessThanInteger(a_qty, b_qty)\n\t\t\t\t\t}, \n\t\t\t\t\ta, \n\t\t\t\t\tb\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}`));\n\tadd(new RawFunc(\"__helios__value__is_zero\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__core__nullList(__core__unMapData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get\",\n\t`(self) -> {\n\t\t(assetClass) -> {\n\t\t\t(map, mintingPolicyHash, tokenName) -> {\n\t\t\t\t(outer, inner) -> {\n\t\t\t\t\touter(outer, inner, map)\n\t\t\t\t}(\n\t\t\t\t\t(outer, inner, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap, \n\t\t\t\t\t\t\t() -> {error(\"policy not found\")}, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), mintingPolicyHash), \n\t\t\t\t\t\t\t\t\t() -> {inner(inner, __core__unMapData(__core__sndPair(__core__headList(map))))}, \n\t\t\t\t\t\t\t\t\t() -> {outer(outer, inner, __core__tailList(map))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}, (inner, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap, \n\t\t\t\t\t\t\t() -> {error(\"tokenName not found\")}, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), tokenName),\n\t\t\t\t\t\t\t\t\t() -> {__core__sndPair(__core__headList(map))},\n\t\t\t\t\t\t\t\t\t() -> {inner(inner, __core__tailList(map))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}(__core__unMapData(self), __helios__common__field_0(assetClass), __helios__common__field_1(assetClass))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get_safe\",\n\t`(self) -> {\n\t\t(assetClass) -> {\n\t\t\t(map, mintingPolicyHash, tokenName) -> {\n\t\t\t\t(outer, inner) -> {\n\t\t\t\t\touter(outer, inner, map)\n\t\t\t\t}(\n\t\t\t\t\t(outer, inner, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap, \n\t\t\t\t\t\t\t() -> {__core__iData(0)}, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), mintingPolicyHash), \n\t\t\t\t\t\t\t\t\t() -> {inner(inner, __core__unMapData(__core__sndPair(__core__headList(map))))}, \n\t\t\t\t\t\t\t\t\t() -> {outer(outer, inner, __core__tailList(map))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}, (inner, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap, \n\t\t\t\t\t\t\t() -> {__core__iData(0)}, \n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), tokenName),\n\t\t\t\t\t\t\t\t\t() -> {__core__sndPair(__core__headList(map))},\n\t\t\t\t\t\t\t\t\t() -> {inner(inner, __core__tailList(map))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}(__core__unMapData(self), __helios__common__field_0(assetClass), __helios__common__field_1(assetClass))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get_lovelace\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__value__get_safe(self)(__helios__assetclass__ADA)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get_assets\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__map__filter(self)(\n\t\t\t\t(key, _) -> {\n\t\t\t\t\t__helios__common__not(__core__equalsByteString(__core__unBData(key), #))\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__get_policy\", \n\t`(self) -> {\n\t\t(mph) -> {\n\t\t\t(map) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, map)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap,\n\t\t\t\t\t\t\t() -> {error(\"policy not found\")},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), mph),\n\t\t\t\t\t\t\t\t\t() -> {__core__sndPair(__core__headList(map))},\n\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(map))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}(__core__unMapData(self))\n\t\t} \n\t}`));\n\tadd(new RawFunc(\"__helios__value__contains_policy\",\n\t`(self) -> {\n\t\t(mph) -> {\n\t\t\t(map) -> {\n\t\t\t\t(recurse) -> {\n\t\t\t\t\trecurse(recurse, map)\n\t\t\t\t}(\n\t\t\t\t\t(recurse, map) -> {\n\t\t\t\t\t\t__core__chooseList(\n\t\t\t\t\t\t\tmap,\n\t\t\t\t\t\t\t() -> {false},\n\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__core__equalsData(__core__fstPair(__core__headList(map)), mph),\n\t\t\t\t\t\t\t\t\t() -> {true},\n\t\t\t\t\t\t\t\t\t() -> {recurse(recurse, __core__tailList(map))}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)()\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}(__core__unMapData(self))\n\t\t}\n\t}`));\n\tadd(new RawFunc(\"__helios__value__show\",\n\t`(self) -> {\n\t\t() -> {\n\t\t\t__helios__map__fold(self)(\n\t\t\t\t(prev, mph, tokens) -> {\n\t\t\t\t\t__helios__map__fold(tokens)(\n\t\t\t\t\t\t(prev, token_name, qty) -> {\n\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\tprev,\n\t\t\t\t\t\t\t\t__core__ifThenElse(\n\t\t\t\t\t\t\t\t\t__helios__bytearray____eq(mph, __core__bData(#)),\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t__helios__common__stringData(\"lovelace: \"),\n\t\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t\t__helios__int__show(qty)(),\n\t\t\t\t\t\t\t\t\t\t\t\t__helios__common__stringData(\"\\\\n\")\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t__helios__bytearray__show(mph)(),\n\t\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t\t__helios__common__stringData(\".\"),\n\t\t\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t\t\t__helios__bytearray__show(token_name)(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__helios__common__stringData(\": \"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t__helios__string____add(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t__helios__int__show(qty)(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t__helios__common__stringData(\"\\\\n\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprev\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t__helios__common__stringData(\"\")\n\t\t\t)\n\t\t}\n\t}`))\n\n\treturn db;\n}\n\n/**\n * @param {IR} ir \n * @returns {IR}\n * @package\n */\nfunction wrapWithRawFunctions(ir) {\n\tlet db = makeRawFunctions();\n\n\t// notify statistics of existence of builtin in correct order\n\tif (onNotifyRawUsage !== null) {\n\t\tfor (let [name, _] of db) {\n\t\t\tonNotifyRawUsage(name, 0);\n\t\t}\n\t}\n\n\tlet re = new RegExp(\"__helios[a-zA-Z0-9_]*\", \"g\");\n\n\tlet [src, _] = ir.generateSource();\n\n\t//console.log(src);\n\n\tlet matches = src.match(re);\n\n\tlet map = new Map();\n\n\tif (matches !== null) {\n\t\tfor (let match of matches) {\n\t\t\tif (!map.has(match)) {\n\t\t\t\tif (!db.has(match)) {\n\t\t\t\t\tthrow new Error(`builtin ${match} not found`);\n\t\t\t\t}\n\n\t\t\t\tlet builtin = assertDefined(db.get(match));\n\n\t\t\t\tbuiltin.load(db, map);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn IR.wrapWithDefinitions(ir, map);\n}\n\n\n\n/////////////////////////////////\n// Section 20: IR Context objects\n/////////////////////////////////\n\n/**\n * Scope for IR names.\n * Works like a stack of named values from which a Debruijn index can be derived\n * @package\n */\nclass IRScope {\n\t#parent;\n\t/** variable name (can be empty if no usable variable defined at this level) */\n\t#variable;\n\n\t/**\n\t * @param {?IRScope} parent \n\t * @param {?IRVariable} variable\n\t */\n\tconstructor(parent, variable) {\n\t\tthis.#parent = parent;\n\t\tthis.#variable = variable;\n\t}\n\n\t/**\n\t * Calculates the Debruijn index of a named value. Internal method\n\t * @param {Word | IRVariable} name \n\t * @param {number} index \n\t * @returns {[number, IRVariable]}\n\t */\n\tgetInternal(name, index) {\n\t\tif (this.#variable !== null && (name instanceof Word && this.#variable.toString() == name.toString()) || (name instanceof IRVariable && this.#variable == name)) {\n\t\t\treturn [index, this.#variable];\n\t\t} else if (this.#parent === null) {\n\t\t\tthrow name.referenceError(`variable ${name.toString()} not found`);\n\t\t} else {\n\t\t\treturn this.#parent.getInternal(name, index + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the Debruijn index.\n\t * @param {Word | IRVariable} name \n\t * @returns {[number, IRVariable]}\n\t */\n\tget(name) {\n\t\t// one-based\n\t\treturn this.getInternal(name, 1);\n\t}\n\n\t/**\n\t * Checks if a named builtin exists\n\t * @param {string} name \n\t * @param {boolean} strict - if true then throws an error if builtin doesn't exist\n\t * @returns {boolean}\n\t */\n\tstatic isBuiltin(name, strict = false) {\n\t\tif (name.startsWith(\"__core\")) {\n\t\t\tif (strict) {\n\t\t\t\tvoid this.findBuiltin(name); // assert that builtin exists\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns index of a named builtin\n\t * Throws an error if builtin doesn't exist\n\t * @param {string} name \n\t * @returns \n\t */\n\tstatic findBuiltin(name) {\n\t\tlet i = UPLC_BUILTINS.findIndex(info => { return \"__core__\" + info.name == name });\n\t\tassert(i != -1, `${name} is not a real builtin`);\n\t\treturn i;\n\t}\n}\n\n/**\n * IR class that represents function arguments\n * @package\n */\nclass IRVariable extends Token {\n\t#name;\n\n\t/**\n\t * @param {Word} name\n\t */\n\tconstructor(name) {\n\t\tsuper(name.site);\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\treturn this.#name.toString();\n\t}\n\n\ttoString() {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars \n\t * @returns {IRVariable}\n\t */\n\tcopy(newVars) {\n\t\tconst newVar = new IRVariable(this.#name);\n\n\t\tnewVars.set(this, newVar);\n\n\t\treturn newVar;\n\t}\n}\n\n/**\n * @package\n */\nclass IRValue {\n\tconstructor() {\n\t}\n\n\t/**\n\t * @param {IRValue[]} args \n\t * @returns {?IRValue}\n\t */\n\tcall(args) {\n\t\tthrow new Error(\"not a function\");\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget value() {\n\t\tthrow new Error(\"not a literal value\");\n\t}\n}\n\n/**\n * @package\n */\nclass IRFuncValue extends IRValue {\n\t#callback;\n\n\t/**\n\t * @param {(args: IRValue[]) => ?IRValue} callback\n\t */\n\tconstructor(callback) {\n\t\tsuper();\n\t\tthis.#callback = callback;\n\t}\n\n\t/**\n\t * @param {IRValue[]} args \n\t * @returns {?IRValue}\n\t */\n\tcall(args) {\n\t\treturn this.#callback(args);\n\t}\n}\n\n/**\n * @package\n */\nclass IRLiteralValue extends IRValue {\n\t#value;\n\n\t/**\n\t * @param {UplcValue} value \n\t */\n\tconstructor(value) {\n\t\tsuper();\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget value() {\n\t\treturn this.#value;\n\t}\n}\n\n/**\n * @package\n */\nclass IRDeferredValue extends IRValue {\n    #deferred;\n\n    /**\n     * @type {undefined | null | IRValue}\n     */\n    #cache;\n\n    /**\n     * @param {() => ?IRValue} deferred\n     */\n    constructor(deferred) {\n        super();\n        this.#deferred = deferred;\n        this.#cache = undefined;\n    }\n    /**\n     * @param {IRValue[]} args \n     * @returns {?IRValue}\n     */\n    call(args) {\n        if (this.#cache === undefined) {\n            this.#cache = this.#deferred();\n        }\n        \n        if (this.#cache != null) {\n            return this.#cache.call(args);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @type {UplcValue}\n     */\n    get value() {\n        if (this.#cache === undefined) {\n            this.#cache = this.#deferred();\n        }\n        \n        if (this.#cache != null) {\n            return this.#cache.value;\n        } else {\n            throw new Error(\"not a value\");\n        }\n    }\n\n}\n\n/**\n * @package\n */\nclass IRCallStack {\n\t#throwRTErrors;\n\t#parent;\n\t#variable;\n\t#value;\n\n\t/**\n\t * @param {boolean} throwRTErrors\n\t * @param {?IRCallStack} parent \n\t * @param {?IRVariable} variable \n\t * @param {?IRValue} value \n\t */\n\tconstructor(throwRTErrors, parent = null, variable = null, value = null) {\n\t\tthis.#throwRTErrors = throwRTErrors;\n\t\tthis.#parent = parent;\n\t\tthis.#variable = variable;\n\t\tthis.#value = value;\n\t}\n\n\tget throwRTErrors() {\n\t\treturn this.#throwRTErrors;\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @returns {?IRValue}\n\t */\n\tget(variable) {\n\t\tif (this.#variable !== null && this.#variable === variable) {\n\t\t\treturn this.#value;\n\t\t} else if (this.#parent !== null) {\n\t\t\treturn this.#parent.get(variable);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @param {IRValue} value \n\t * @returns {IRCallStack}\n\t */\n\tset(variable, value) {\n\t\treturn new IRCallStack(this.#throwRTErrors, this, variable, value);\n\t}\n}\n\n\n/////////////////////////////\n// Section 21: IR AST objects\n/////////////////////////////\n\n/**\n * @typedef {Map<IRVariable, IRLiteralExpr>} IRLiteralRegistry\n */\n\nclass IRNameExprRegistry {\n\t/**\n\t * @type {Map<IRVariable, Set<IRNameExpr>>}\n\t */\n\t#map;\n\n\t/**\n\t * @type {Set<IRVariable>}\n\t */\n\t#maybeInsideLoop;\n\n\t/**\n\t * Reset whenever recursion is detected.\n\t * @type {Set<IRVariable>}\n\t */\n\t#variables;\n\n\t/**\n\t * @param {Map<IRVariable, Set<IRNameExpr>>} map\n\t */\n\tconstructor(map = new Map(), maybeInsideLoop = new Set()) {\n\t\tthis.#map = map;\n\t\tthis.#maybeInsideLoop = maybeInsideLoop;\n\t\tthis.#variables = new Set();\n\t}\n\n\t/**\n\t * @param {IRNameExpr} nameExpr \n\t */\n\tregister(nameExpr) {\n\t\tif (!nameExpr.isCore()) {\n\t\t\tconst variable = nameExpr.variable;\n\n\t\t\tif (!this.#map.has(variable)) {\n\t\t\t\tthis.#map.set(variable, new Set([nameExpr]));\n\t\t\t} else {\n\t\t\t\tassertDefined(this.#map.get(variable)).add(nameExpr);\n\t\t\t}\n\n\t\t\t// add another reference in case of recursion\n\t\t\tif (!this.#variables.has(variable)) {\n\t\t\t\tthis.#maybeInsideLoop.add(variable);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Used to prevent inlining upon recursion\n\t * @param {IRVariable} variable\n\t */\n\tregisterVariable(variable) {\n\t\tthis.#variables.add(variable)\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @returns {number}\n\t */\n\tcountReferences(variable) {\n\t\tconst set = this.#map.get(variable);\n\n\t\tif (set == undefined) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn set.size;\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @returns {boolean}\n\t */\n\tmaybeInsideLoop(variable) {\n\t\treturn this.#maybeInsideLoop.has(variable);\n\t}\n\n\t/**\n\t * Called whenever recursion is detected\n\t * @returns {IRNameExprRegistry}\n\t */\n\tresetVariables() {\n\t\treturn new IRNameExprRegistry(this.#map, this.#maybeInsideLoop);\n\t}\n}\n\nclass IRExprRegistry {\n\t#nameExprs;\n\n\t/**\n\t * @type {Map<IRVariable, IRExpr>}\n\t */\n\t#inline;\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs \n\t */\n\tconstructor(nameExprs) {\n\t\tthis.#nameExprs = nameExprs;\n\t\tthis.#inline = new Map();\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @returns {number}\n\t */\n\tcountReferences(variable) {\n\t\treturn this.#nameExprs.countReferences(variable);\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @returns {boolean}\n\t */\n\tmaybeInsideLoop(variable) {\n\t\treturn this.#nameExprs.maybeInsideLoop(variable);\n\t}\n\n\t/**\n\t * @param {IRVariable} variable\n\t * @returns {boolean}\n\t */\n\tisInlineable(variable) {\n\t\treturn this.#inline.has(variable);\n\t}\n\n\t/**\n\t * @param {IRVariable} variable\n\t * @returns {IRExpr}\n\t */\n\tgetInlineable(variable) {\n\t\treturn assertDefined(this.#inline.get(variable)).copy(new Map());\n\t}\n\n\t/**\n\t * @param {IRVariable} variable \n\t * @param {IRExpr} expr \n\t */\n\taddInlineable(variable, expr) {\n\t\tthis.#inline.set(variable, expr);\n\t}\n}\n\n/**\n * Base class of all Intermediate Representation expressions\n * @package\n */\nclass IRExpr extends Token {\n\t/**\n\t * @param {Site} site \n\t */\n\tconstructor(site) {\n\t\tsuper(site);\n\t}\n\n\t/**\n\t * For pretty printing the IR\n\t * @param {string} indent \n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Link IRNameExprs to variables\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Turns all IRConstExpr istances into IRLiteralExpr instances\n\t * @param {IRCallStack} stack \n\t * @returns {IRExpr}\n\t */\n\tevalConstants(stack) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Evaluates an expression to something (hopefully) literal\n\t * Returns null if it the result would be worse than the current expression\n\t * Doesn't return an IRLiteral because the resulting expression might still be an improvement, even if it isn't a literal\n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Used to inline literals and to evaluate IRCoreCallExpr instances with only literal args.\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Used before simplifyTopology\n\t * @param {IRNameExprRegistry} nameExprs\n\t */\n\tregisterNameExprs(nameExprs) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * Used during inlining/expansion to make sure multiple inlines of IRNameExpr don't interfere when setting the Debruijn index\n\t * @param {Map<IRVariable, IRVariable>} newVars\n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {UplcTerm}\n\t */\n\ttoUplc() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Intermediate Representation variable reference expression\n * @package\n */\nclass IRNameExpr extends IRExpr {\n\t#name;\n\n\t/**\n\t * @type {?number} - cached debruijn index \n\t */\n\t#index;\n\n\t/**\n\t * @type {?IRVariable} - cached variable\n\t */\n\t#variable;\n\n\t/**\n\t * @type {?IRValue} - cached eval result (reused when eval is called within simplifyLiterals)\n\t */\n\t#value;\n\n\t/**\n\t * @param {Word} name \n\t * @param {?IRVariable} variable\n\t * @param {?IRValue} value\n\t */\n\tconstructor(name, variable = null, value = null) {\n\t\tsuper(name.site);\n\t\tassert(name.toString() != \"_\");\n\t\tassert(!name.toString().startsWith(\"undefined\"));\n\t\tthis.#name = name;\n\t\tthis.#index = null;\n\t\tthis.#variable = variable;\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\treturn this.#name.toString();\n\t}\n\n\t/**\n\t * isVariable() should be used to check if a IRNameExpr.variable is equal to a IRVariable (includes special handling of \"__core*\")\n\t * @type {IRVariable}\n\t */\n\tget variable() {\n\t\tif (this.#variable === null) {\n\t\t\tthrow new Error(`variable should be set (name: ${this.name})`);\n\t\t} else {\n\t\t\treturn this.#variable;\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @returns {boolean}\n\t */\n\tisCore() {\n\t\tconst name = this.name;\n\n\t\treturn name.startsWith(\"__core\");\n\t}\n\n\t/**\n\t * @param {IRVariable} ref \n\t * @returns {boolean}\n\t */\n\tisVariable(ref) {\n\t\tif (this.isCore()) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.variable === ref;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\treturn this.#name.toString();\n\t}\n\n\t/**\n\t * @param {IRScope} scope\n\t */\n\tresolveNames(scope) {\n\t\tif (!this.name.startsWith(\"__core\")) {\n\t\t\tif (this.#variable == null || this.name.startsWith(\"__PARAM\")) {\n\t\t\t\t[this.#index, this.#variable] = scope.get(this.#name);\n\t\t\t} else {\n\t\t\t\t[this.#index, this.#variable] = scope.get(this.#variable);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack \n\t * @returns {IRExpr}\n\t */\n\tevalConstants(stack) {\n\t\tif (this.#variable != null) {\n\t\t\tthis.#value = stack.get(this.#variable);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\tif (this.isCore()) {\n\t\t\treturn new IRFuncValue((args) => {\n\t\t\t\treturn IRCoreCallExpr.evalValues(this.site, stack.throwRTErrors, this.#name.value.slice(\"__core__\".length), args);\n\t\t\t});\n\t\t} else if (this.#variable === null) {\n\t\t\tthrow new Error(\"variable should be set\");\n\t\t} else {\n\t\t\t// prefer result from stack, and use cached result as backup\n\t\t\tconst result = stack.get(this.#variable);\n\n\t\t\tif (result == null) {\n\t\t\t\treturn this.#value;\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\tif (this.#variable !== null && literals.has(this.#variable)) {\n\t\t\treturn assertDefined(literals.get(this.#variable));\n\t\t} else if (this.#value instanceof IRLiteralExpr) {\n\t\t\treturn this.#value;\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs\n\t */\n\tregisterNameExprs(nameExprs) {\n\t\tnameExprs.register(this);\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars\n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\tlet v = this.#variable;\n\n\t\tif (v != null) {\n\t\t\tconst maybeNewVar = newVars.get(v);\n\n\t\t\tif (maybeNewVar != undefined) {\n\t\t\t\tv = maybeNewVar;\n\t\t\t}\n\t\t}\n\n\t\treturn new IRNameExpr(this.#name, v, this.#value);\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\tif (!this.isCore() && registry.isInlineable(this.variable)) {\n\t\t\treturn registry.getInlineable(this.variable);\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {UplcTerm}\n\t */\n\ttoUplc() {\n\t\tif (this.name.startsWith(\"__core\")) {\n\t\t\treturn IRCoreCallExpr.newUplcBuiltin(this.site, this.name);\n\t\t} else if (this.#index === null) {\n\t\t\t// use a dummy index (for size calculation)\n\t\t\treturn new UplcVariable(\n\t\t\t\tthis.site,\n\t\t\t\tnew UplcInt(this.site, BigInt(0), false),\n\t\t\t);\n\t\t} else {\n\t\t\treturn new UplcVariable(\n\t\t\t\tthis.site,\n\t\t\t\tnew UplcInt(this.site, BigInt(this.#index), false),\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * IR wrapper for UplcValues, representing literals\n * @package\n */\nclass IRLiteralExpr extends IRExpr {\n\t/**\n\t * @type {UplcValue}\n\t */\n\t#value;\n\n\t/**\n\t * @param {UplcValue} value \n\t */\n\tconstructor(value) {\n\t\tsuper(value.site);\n\n\t\tthis.#value = value;\n\t}\n\n\t/**\n\t * @type {UplcValue}\n\t */\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\treturn this.#value.toString();\n\t}\n\n\t/**\n\t * Linking doesn't do anything for literals\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t */\n\tevalConstants(stack) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\treturn new IRLiteralValue(this.value);\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs\n\t */\n\tregisterNameExprs(nameExprs) {\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars\n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\treturn new IRLiteralExpr(this.#value);\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {UplcConst}\n\t */\n\ttoUplc() {\n\t\treturn new UplcConst(this.#value);\n\t}\n}\n\n/**\n * The IRExpr simplify methods aren't implemented because any IRConstExpr instances should've been eliminated during evalConstants.\n * @package\n */\nclass IRConstExpr extends IRExpr {\n\t#expr;\n\n\t/**\n\t * @param {Site} site \n\t * @param {IRExpr} expr \n\t */\n\tconstructor(site, expr) {\n\t\tsuper(site);\n\t\tthis.#expr = expr;\n\t}\n\n\ttoString(indent = \"\") {\n\t\treturn `const(${this.#expr.toString(indent)})`;\n\t}\n\n\t/**\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t\tthis.#expr.resolveNames(scope);\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {IRExpr}\n\t */\n\tevalConstants(stack) {\n\t\tconst result = this.#expr.eval(stack);\n\n\t\tif (result != null) {\n\t\t\treturn new IRLiteralExpr(result.value);\n\t\t} else {\n\t\t\tthrow new Error(\"unable to evaluate const\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack \n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\treturn this.#expr.eval(stack);\n\t}\n}\n\n/**\n * IR function expression with some args, that act as the header, and a body expression\n * @package\n */\nclass IRFuncExpr extends IRExpr {\n\t#args;\n\t#body;\n\n\t/**\n\t * @param {Site} site \n\t * @param {IRVariable[]} args \n\t * @param {IRExpr} body \n\t */\n\tconstructor(site, args, body) {\n\t\tsuper(site);\n\t\tthis.#args = args;\n\t\tthis.#body = assertDefined(body);\n\t}\n\n\tget args() {\n\t\treturn this.#args.slice();\n\t}\n\n\tget body() {\n\t\treturn this.#body;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\thasOptArgs() {\n\t\tconst b = this.#args.some(a => a.name.startsWith(\"__useopt__\"));\n\n\t\tif (b) {\n\t\t\treturn b;\n\t\t}\n\n\t\tif (this.#body instanceof IRFuncExpr) {\n\t\t\treturn this.#body.hasOptArgs();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\tlet innerIndent = (this.#body instanceof IRUserCallExpr && this.#body.argExprs.length == 1 && this.#body.fnExpr instanceof IRFuncExpr && this.#body.fnExpr.args[0].name.startsWith(\"__\")) ? indent : indent + TAB;\n\n\t\tlet s = \"(\" + this.#args.map(n => n.toString()).join(\", \") + \") -> {\\n\" + innerIndent;\n\t\ts += this.#body.toString(innerIndent);\n\t\ts += \"\\n\" + indent + \"}\";\n\n\t\treturn s;\n\t}\n\n\t/**\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t\t// in the zero-arg case no Debruijn indices need to be added because we use Delay/Force\n\n\t\tfor (let arg of this.#args) {\n\t\t\tscope = new IRScope(scope, arg);\n\t\t}\n\n\t\tthis.#body.resolveNames(scope);\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack \n\t */\n\tevalConstants(stack) {\n\t\treturn new IRFuncExpr(this.site, this.args, this.#body.evalConstants(stack));\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\treturn new IRFuncValue((args) => {\n\t\t\tif (args.length != this.#args.length) {\n\t\t\t\tthrow this.site.syntaxError(`expected ${this.#args.length} arg(s), got ${args.length} arg(s)`);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tstack = stack.set(this.#args[i], args[i]);\n\t\t\t}\n\n\t\t\treturn this.#body.eval(stack);\n\t\t});\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals \n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\treturn new IRFuncExpr(this.site, this.args, this.#body.simplifyLiterals(literals));\n\t}\n\t\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs\n\t */\n\tregisterNameExprs(nameExprs) {\n\t\tnameExprs = nameExprs.resetVariables();\n\n\t\tthis.#args.forEach(a => nameExprs.registerVariable(a));\n\n\t\tthis.#body.registerNameExprs(nameExprs);\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars\n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\treturn new IRFuncExpr(this.site, this.args.map(oldArg => oldArg.copy(newVars)), this.#body.copy(newVars));\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\treturn new IRFuncExpr(this.site, this.args, this.#body.simplifyTopology(registry));\n\t}\n\n\t/** \n\t * @returns {UplcTerm}\n\t */\n\ttoUplc() {\n\t\tlet term = this.#body.toUplc();\n\n\t\tif (this.#args.length == 0) {\n\t\t\t// a zero-arg func is turned into a UplcDelay term\n\t\t\tterm = new UplcDelay(this.site, term);\n\t\t} else {\n\t\t\tfor (let i = this.#args.length - 1; i >= 0; i--) {\n\t\t\t\tterm = new UplcLambda(this.site, term, this.#args[i].toString());\n\t\t\t}\n\t\t}\n\n\t\treturn term;\n\t}\n}\n\n/**\n * Base class of IRUserCallExpr and IRCoreCallExpr\n * @package\n */\nclass IRCallExpr extends IRExpr {\n\t#argExprs;\n\t#parensSite;\n\n\t/**\n\t * @param {Site} site\n\t * @param {IRExpr[]} argExprs \n\t * @param {Site} parensSite \n\t */\n\tconstructor(site, argExprs, parensSite) {\n\t\tsuper(site);\n\t\tthis.#argExprs = argExprs;\n\t\tthis.#parensSite = parensSite;\n\t\t\n\t}\n\n\tget argExprs() {\n\t\treturn this.#argExprs.slice();\n\t}\n\n\tget parensSite() {\n\t\treturn this.#parensSite;\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {string}\n\t */\n\targsToString(indent = \"\") {\n\t\treturn this.#argExprs.map(argExpr => argExpr.toString(indent)).join(\", \")\n\t}\n\n\t/**\n\t * @param {IRScope} scope \n\t */\n\tresolveNamesInArgs(scope) {\n\t\tfor (let argExpr of this.#argExprs) {\n\t\t\targExpr.resolveNames(scope);\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack \n\t * @returns {IRExpr[]}\n\t */\n\tevalConstantsInArgs(stack) {\n\t\treturn this.#argExprs.map(a => a.evalConstants(stack));\n\t}\n\n\t/** \n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue[]} \n\t */\n\tevalArgs(stack) {\n\t\t/**\n\t\t * @type {IRValue[]}\n\t\t */\n\t\tlet args = [];\n\n\t\tfor (let argExpr of this.argExprs) {\n\t\t\tlet argVal = argExpr.eval(stack);\n\t\t\tif (argVal !== null) {\n\t\t\t\targs.push(argVal);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn args;\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr[]}\n\t */\n\tsimplifyLiteralsInArgs(literals) {\n\t\treturn this.#argExprs.map(a => a.simplifyLiterals(literals));\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs \n\t */\n\tregisterNameExprsInArgs(nameExprs) {\n\t\tthis.#argExprs.forEach(a => a.registerNameExprs(nameExprs));\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr[]}\n\t */\n\tsimplifyTopologyInArgs(registry) {\n\t\treturn this.#argExprs.map(a => a.simplifyTopology(registry));\n\t}\n\n\t/**\n\t * @param {UplcTerm} term\n\t * @returns {UplcTerm}\n\t */\n\ttoUplcCall(term) {\n\t\tif (this.#argExprs.length == 0) {\n\t\t\t// assuming underlying zero-arg function has been converted into a UplcDelay term\n\t\t\tterm = new UplcForce(this.site, term);\n\t\t} else {\n\t\t\tfor (let argExpr of this.#argExprs) {\n\t\t\t\tterm = new UplcCall(this.site, term, argExpr.toUplc());\n\t\t\t}\n\t\t}\n\n\t\treturn term;\n\t}\n}\n\n/**\n * IR function call of core functions\n * @package\n */\nclass IRCoreCallExpr extends IRCallExpr {\n\t#name;\n\n\t/**\n\t * @param {Word} name \n\t * @param {IRExpr[]} argExprs \n\t * @param {Site} parensSite \n\t */\n\tconstructor(name, argExprs, parensSite) {\n\t\tsuper(name.site, argExprs, parensSite);\n\t\tassert(name.value !== \"\" && name.value !== \"error\");\n\t\tthis.#name = name;\n\n\t\tassert(this.builtinName !== \"\", name.value);\n\t}\n\n\tget builtinName() {\n\t\treturn this.#name.toString().slice(8);\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisCast() {\n\t\tlet name = this.builtinName;\n\n\t\treturn name == \"iData\" || name == \"bData\" || name == \"unIData\" || name == \"unBData\" || name == \"mapData\" || name == \"unMapData\" || name == \"listData\" || name == \"unListData\";\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\tif (this.builtinName == \"ifThenElse\") {\n\t\t\treturn `${this.#name.toString()}(\\n${indent}${TAB}${this.argExprs[0].toString(indent + TAB)},\\n${indent}${TAB}${this.argExprs[1].toString(indent + TAB)},\\n${indent}${TAB}${this.argExprs[2].toString(indent+TAB)}\\n${indent})`;\n\t\t} else {\n\t\t\treturn `${this.#name.toString()}(${this.argsToString(indent)})`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t\tthis.resolveNamesInArgs(scope);\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {boolean} throwRTErrors\n\t * @param {string} builtinName\n\t * @param {IRValue[]} args \n\t * @returns {?IRValue}\n\t */\n\tstatic evalValues(site, throwRTErrors, builtinName, args) {\n\t\tif (builtinName == \"ifThenElse\") {\n\t\t\tlet cond = args[0].value;\n\t\t\tif (cond !== null && cond instanceof UplcBool) {\n\t\t\t\tif (cond.bool) {\n\t\t\t\t\treturn args[1];\n\t\t\t\t} else {\n\t\t\t\t\treturn args[2];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if (builtinName == \"chooseList\") {\n\t\t\tconst lst = args[0].value;\n\n\t\t\tif (lst !== null && lst instanceof UplcList) {\n\t\t\t\tif (lst.length == 0) {\n\t\t\t\t\treturn args[1];\n\t\t\t\t} else {\n\t\t\t\t\treturn args[2];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if (builtinName == \"trace\") {\n\t\t\treturn args[1];\n\t\t} else {\n\t\t\t/**\n\t\t\t * @type {UplcValue[]}\n\t\t\t */\n\t\t\tlet argValues = [];\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tif (arg.value !== null) {\n\t\t\t\t\targValues.push(arg.value);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlet result = UplcBuiltin.evalStatic(new Word(Site.dummy(), builtinName), argValues);\n\n\t\t\t\treturn new IRLiteralValue(result);\n\t\t\t} catch(e) {\n\t\t\t\t// runtime errors like division by zero are allowed if throwRTErrors is false\n\t\t\t\tif (e instanceof RuntimeError) {\n\t\t\t\t\tif (!throwRTErrors) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e.addTraceSite(site);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack \n\t * @returns {IRExpr}\n\t */\n\tevalConstants(stack) {\n\t\treturn new IRCoreCallExpr(this.#name, this.evalConstantsInArgs(stack), this.parensSite);\n\t}\n\t\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\tlet args = this.evalArgs(stack);\n\n\t\tif (args !== null) {\n\t\t\treturn IRCoreCallExpr.evalValues(this.site, stack.throwRTErrors, this.builtinName, args);\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\tconst args = this.simplifyLiteralsInArgs(literals);\n\n\t\tif (args.length > 0 && args.every(a => a instanceof IRLiteralExpr)) {\n\t\t\ttry {\n\t\t\t\tconst res = IRCoreCallExpr.evalValues(\n\t\t\t\t\tthis.site,\n\t\t\t\t\tfalse,\n\t\t\t\t\tthis.builtinName,\n\t\t\t\t\targs.map(a => new IRLiteralValue(assertClass(a, IRLiteralExpr).value))\n\t\t\t\t);\n\n\t\t\t\tif (res != null) {\n\t\t\t\t\treturn new IRLiteralExpr(res.value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t}\n\t\t}\n\n\t\tswitch(this.builtinName) {\n\t\t\tcase \"addInteger\": {\n\t\t\t\t\t// check if first or second arg evaluates to 0\n\t\t\t\t\tconst [a, b] = args;\n\n\t\t\t\t\tif (a instanceof IRLiteralExpr && a.value instanceof UplcInt && a.value.int == 0n) {\n\t\t\t\t\t\treturn b;\n\t\t\t\t\t} else if (b instanceof IRLiteralExpr && b.value instanceof UplcInt && b.value.int == 0n) {\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"appendByteString\": {\n\t\t\t\t\t// check if either 1st or 2nd arg is the empty bytearray\n\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\tif (a instanceof IRLiteralExpr && a.value instanceof UplcByteArray && a.value.bytes.length == 0) {\n\t\t\t\t\t\treturn b;\n\t\t\t\t\t} else if (b instanceof IRLiteralExpr && b.value instanceof UplcByteArray && b.value.bytes.length == 0) {\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"appendString\": {\n\t\t\t\t\t// check if either 1st or 2nd arg is the empty string\n\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\tif (a instanceof IRLiteralExpr && a.value instanceof UplcString && a.value.string.length == 0) {\n\t\t\t\t\t\treturn b;\n\t\t\t\t\t} else if (b instanceof IRLiteralExpr && b.value instanceof UplcString && b.value.string.length == 0) {\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"divideInteger\": {\n\t\t\t\t\t// check if second arg is 1\n\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\tif (b instanceof IRLiteralExpr && b.value instanceof UplcInt) {\n\t\t\t\t\t\tif (b.value.int == 1n) {\n\t\t\t\t\t\t\treturn a;\n\t\t\t\t\t\t} else if (b.value.int == 0n) {\n\t\t\t\t\t\t\treturn new IRCoreCallExpr(this.#name, args, this.parensSite);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ifThenElse\": {\n\t\t\t\t\tconst [cond, a, b] = args;\n\n\t\t\t\t\tif (cond instanceof IRLiteralExpr && cond.value instanceof UplcBool) {\n\t\t\t\t\t\t// if the condition is a literal, one the branches can be returned\n\t\t\t\t\t\tif (cond.value.bool) {\n\t\t\t\t\t\t\treturn a;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn b;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (a instanceof IRLiteralExpr && a.value instanceof UplcBool && b instanceof IRLiteralExpr && b.value instanceof UplcBool) {\n\t\t\t\t\t\tif (a.value.bool && !b.value.bool) {\n\t\t\t\t\t\t\treturn cond;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t!a.value.bool && \n\t\t\t\t\t\t\tb.value.bool && \n\t\t\t\t\t\t\tcond instanceof IRUserCallExpr && \n\t\t\t\t\t\t\tcond.fnExpr instanceof IRNameExpr && \n\t\t\t\t\t\t\tcond.fnExpr.name === \"__helios__common__not\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn cond.argExprs[0];\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"modInteger\": {\n\t\t\t\t\t// check if second arg is 1\n\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\tif (b instanceof IRLiteralExpr && b.value instanceof UplcInt && b.value.int == 1n) {\n\t\t\t\t\t\treturn new IRLiteralExpr(new UplcInt(this.site, 0n));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"multiplyInteger\": {\n\t\t\t\t\t// check if first arg is 0 or 1\n\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\tif (a instanceof IRLiteralExpr && a.value instanceof UplcInt) {\n\t\t\t\t\t\tif (a.value.int == 0n) {\n\t\t\t\t\t\t\treturn a;\n\t\t\t\t\t\t} else if (a.value.int == 1n) {\n\t\t\t\t\t\t\treturn b;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (b instanceof IRLiteralExpr && b.value instanceof UplcInt) {\n\t\t\t\t\t\tif (b.value.int == 0n) {\n\t\t\t\t\t\t\treturn b;\n\t\t\t\t\t\t} else if (b.value.int == 1n) {\n\t\t\t\t\t\t\treturn a;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"subtractInteger\": {\n\t\t\t\t\t// check if second arg evaluates to 0\n\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\tif (b instanceof IRLiteralExpr && b.value instanceof UplcInt && b.value.int == 0n) {\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (args.every(a => a instanceof IRLiteralExpr)) {\n\t\t\treturn new IRLiteralExpr(\n\t\t\t\tUplcBuiltin.evalStatic(\n\t\t\t\t\tnew Word(this.#name.site, this.builtinName),\n\t\t\t\t\targs.map(a => assertClass(a, IRLiteralExpr).value)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\treturn new IRCoreCallExpr(this.#name, args, this.parensSite);\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs\n\t */\n\tregisterNameExprs(nameExprs) {\n\t\tthis.registerNameExprsInArgs(nameExprs);\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars\n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\treturn new IRCoreCallExpr(this.#name, this.argExprs.map(a => a.copy(newVars)), this.parensSite);\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\tconst args = this.simplifyTopologyInArgs(registry);\n\n\t\tswitch(this.builtinName) {\n\t\t\tcase \"encodeUtf8\":\n\t\t\t\t// we can't eliminate a call to decodeUtf8, as it might throw some errors\n\t\t\t\tbreak;\n\t\t\tcase \"decodeUtf8\": {\n\t\t\t\t// check if arg is a call to encodeUtf8\n\t\t\t\tconst [arg] = args;\n\t\t\t\tif (arg instanceof IRCoreCallExpr && arg.builtinName == \"encodeUtf8\") {\n\t\t\t\t\treturn arg.argExprs[0];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\t\t\n\t\t\tcase \"equalsData\": {\n\t\t\t\tconst [a, b] = args;\n\n\t\t\t\tif (a instanceof IRCoreCallExpr && b instanceof IRCoreCallExpr) {\n\t\t\t\t\tif (a.builtinName === \"iData\" && b.builtinName === \"iData\") {\n\t\t\t\t\t\treturn new IRCoreCallExpr(new Word(this.site, \"__core__equalsInteger\"), [a.argExprs[0], b.argExprs[0]], this.parensSite);\t\n\t\t\t\t\t} else if (a.builtinName === \"bData\" && b.builtinName === \"bData\") {\n\t\t\t\t\t\treturn new IRCoreCallExpr(new Word(this.site, \"__core__equalsByteString\"), [a.argExprs[0], b.argExprs[0]], this.parensSite);\t\n\t\t\t\t\t} else if (a.builtinName === \"decodeUtf8\" && b.builtinName === \"decodeUtf8\") {\n\t\t\t\t\t\treturn new IRCoreCallExpr(new Word(this.site, \"__core__equalsString\"), [a.argExprs[0], b.argExprs[0]], this.parensSite);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"ifThenElse\": {\n\t\t\t\tconst [cond, a, b] = args;\n\n\t\t\t\tif (cond instanceof IRCoreCallExpr && cond.builtinName === \"nullList\") {\n\t\t\t\t\treturn new IRCoreCallExpr(new Word(this.site, \"__core__chooseList\"), [cond.argExprs[0], a, b], this.parensSite);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"trace\":\n\t\t\t\treturn args[1];\n\t\t\tcase \"unIData\": {\n\t\t\t\t// check if arg is a call to iData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"iData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"iData\": {\n\t\t\t\t// check if arg is a call to unIData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"unIData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"unBData\": {\n\t\t\t\t// check if arg is a call to bData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"bData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"bData\": {\n\t\t\t\t// check if arg is a call to unBData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"unBData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"unMapData\": {\n\t\t\t\t// check if arg is call to mapData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"mapData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"mapData\": {\n\t\t\t\t// check if arg is call to unMapData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"unMapData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"listData\": {\n\t\t\t\t// check if arg is call to unListData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"unListData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"unListData\": {\n\t\t\t\t// check if arg is call to listData\n\t\t\t\tconst a = args[0];\n\t\t\t\tif (a instanceof IRCoreCallExpr && a.builtinName == \"listData\") {\n\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\t\t\n\t\t}\n\n\t\treturn new IRCoreCallExpr(this.#name, args, this.parensSite);\n\t}\n\n\t/**\n\t * @param {Site} site\n\t * @param {string} name - full name of builtin, including prefix\n\t * @returns {UplcTerm}\n\t */\n\tstatic newUplcBuiltin(site, name) {\n\t\tlet builtinName = name.slice(\"__core__\".length);\n\t\tassert(!builtinName.startsWith(\"__core__\"));\n\n\t\t/**\n\t\t * @type {UplcTerm}\n\t\t */\n\t\tlet term = new UplcBuiltin(site, builtinName);\n\n\t\tlet nForce = UPLC_BUILTINS[IRScope.findBuiltin(name)].forceCount;\n \n\t\tfor (let i = 0; i < nForce; i++) {\n\t\t\tterm = new UplcForce(site, term);\n\t\t}\n \n\t\treturn term;\n\t}\n\n\t/**\n\t * @returns {UplcTerm}\n\t */\n\ttoUplc() {\n\t\tlet term = IRCoreCallExpr.newUplcBuiltin(this.site, this.#name.value);\n\n\t\treturn this.toUplcCall(term);\n\t}\n}\n\n/**\n * IR function call of non-core function\n * @package\n */\nclass IRUserCallExpr extends IRCallExpr {\n\t#fnExpr;\n\n\t/**\n\t * @param {IRExpr} fnExpr \n\t * @param {IRExpr[]} argExprs \n\t * @param {Site} parensSite \n\t */\n\tconstructor(fnExpr, argExprs, parensSite) {\n\t\tsuper(fnExpr.site, argExprs, parensSite);\n\n\t\tthis.#fnExpr = fnExpr;\n\t}\n\n\t/**\n\t * @param {IRExpr} fnExpr \n\t * @param {IRExpr[]} argExprs \n\t * @param {Site} parensSite \n\t * @returns {IRUserCallExpr}\n\t */\n\tstatic new(fnExpr, argExprs, parensSite) {\n\t\tif (fnExpr instanceof IRAnonCallExpr) {\n\t\t\treturn new IRNestedAnonCallExpr(fnExpr, argExprs, parensSite);\n\t\t} else if (fnExpr instanceof IRFuncExpr) {\n\t\t\tif (argExprs.length == 1 && argExprs[0] instanceof IRFuncExpr) {\n\t\t\t\tconst argExpr = argExprs[0];\n\n\t\t\t\tif (argExpr instanceof IRFuncExpr) {\n\t\t\t\t\treturn new IRFuncDefExpr(fnExpr, argExpr, parensSite);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new IRAnonCallExpr(fnExpr, argExprs, parensSite);\n\t\t} else {\n\t\t\treturn new IRUserCallExpr(fnExpr, argExprs, parensSite);\n\t\t}\n\t}\n\n\tget fnExpr() {\n\t\treturn this.#fnExpr;\n\t}\n\n\t/**\n\t * @param {string} indent\n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\tlet comment = (this.#fnExpr instanceof IRFuncExpr && this.#fnExpr.args.length == 1 && this.#fnExpr.args[0].name.startsWith(\"__\")) ? `/*${this.#fnExpr.args[0].name}*/` : \"\";\n\n\t\treturn `${this.#fnExpr.toString(indent)}(${comment}${this.argsToString(indent)})`;\n\t}\n\n\t/**\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t\tthis.#fnExpr.resolveNames(scope);\n\n\t\tsuper.resolveNamesInArgs(scope);\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {IRExpr}\n\t */\n\tevalConstants(stack) {\n\t\treturn IRUserCallExpr.new(\n\t\t\tthis.#fnExpr.evalConstants(stack),\n\t\t\tthis.evalConstantsInArgs(stack),\n\t\t\tthis.parensSite\n\t\t);\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack \n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\tlet args = this.evalArgs(stack);\n\n\t\tif (args === null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tlet fn = this.#fnExpr.eval(stack);\n\n\t\t\tif (fn === null) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\treturn fn.call(args);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RuntimeError) {\n\t\t\t\t\t\tif (!stack.throwRTErrors) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e.addTraceSite(this.site);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {(IRExpr[] | IRLiteralExpr)}\n\t */\n\tsimplifyLiteralsInArgsAndTryEval(literals) {\n\t\tconst args = this.simplifyLiteralsInArgs(literals);\n\n\t\tif (args.length > 0 && args.every(a => ((a instanceof IRLiteralExpr) || (a instanceof IRFuncExpr)))) {\n\t\t\ttry {\n\t\t\t\tconst fn = this.#fnExpr.eval(new IRCallStack(false));\n\n\t\t\t\tif (fn != null) {\n\t\t\t\t\tconst res = fn.call(\n\t\t\t\t\t\targs.map(a => {\n\t\t\t\t\t\t\tconst v = a.eval(new IRCallStack(false));\n\n\t\t\t\t\t\t\tif (v == null) {\n\t\t\t\t\t\t\t\t// caught by outer catch\n\t\t\t\t\t\t\t\tthrow new Error(\"null eval sub-result\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t\tif (res != null) {\n\t\t\t\t\t\treturn new IRLiteralExpr(res.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t}\n\t\t}\n\n\t\treturn args;\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\tconst argsOrLiteral = this.simplifyLiteralsInArgsAndTryEval(literals);\n\n\t\tif (argsOrLiteral instanceof IRLiteralExpr) {\n\t\t\treturn argsOrLiteral;\n\t\t} else {\n\t\t\tconst args = argsOrLiteral;\n\n\t\t\treturn IRUserCallExpr.new(\n\t\t\t\tthis.#fnExpr.simplifyLiterals(literals),\n\t\t\t\targs, \n\t\t\t\tthis.parensSite\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs \n\t */\n\tregisterNameExprs(nameExprs) {\n\t\tthis.registerNameExprsInArgs(nameExprs);\n\t\t\n\t\tthis.#fnExpr.registerNameExprs(nameExprs);\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars \n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\treturn new IRUserCallExpr(this.#fnExpr.copy(newVars), this.argExprs.map(a => a.copy(newVars)), this.parensSite);\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\tconst args = this.simplifyTopologyInArgs(registry);\n\n\t\tif (this.#fnExpr instanceof IRNameExpr) {\n\t\t\tif (this.#fnExpr.isCore()) {\n\t\t\t\treturn new IRCoreCallExpr(new Word(this.#fnExpr.site, this.#fnExpr.name), args, this.parensSite);\n\t\t\t} else {\n\t\t\t\tswitch (this.#fnExpr.name) {\n\t\t\t\t\tcase \"__helios__common__boolData\": {\n\t\t\t\t\t\t\t// check if arg is a call to __helios__common__unBoolData\n\t\t\t\t\t\t\tconst a = args[0];\n\t\t\t\t\t\t\tif (a instanceof IRUserCallExpr && a.fnExpr instanceof IRNameExpr && a.fnExpr.name == \"__helios__common__unBoolData\") {\n\t\t\t\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"__helios__common__unBoolData\": {\n\t\t\t\t\t\t\t// check if arg is a call to __helios__common__boolData\n\t\t\t\t\t\t\tconst a = args[0];\n\t\t\t\t\t\t\tif (a instanceof IRUserCallExpr && a.fnExpr instanceof IRNameExpr && a.fnExpr.name == \"__helios__common__boolData\") {\n\t\t\t\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"__helios__common__not\": {\n\t\t\t\t\t\t\tconst a = args[0];\n\t\t\t\t\t\t\tif (a instanceof IRUserCallExpr && a.fnExpr instanceof IRNameExpr && a.fnExpr.name == \"__helios__common__not\") {\n\t\t\t\t\t\t\t\treturn a.argExprs[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"__helios__common__concat\": {\n\t\t\t\t\t\t\t// check if either 1st or 2nd arg is the empty list\n\t\t\t\t\t\t\tconst [a, b] = args;\n\t\t\t\t\t\t\tif (a instanceof IRLiteralExpr && a.value instanceof UplcList && a.value.length == 0) {\n\t\t\t\t\t\t\t\treturn b;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (b instanceof IRLiteralExpr && b.value instanceof UplcList && b.value.length == 0) {\n\t\t\t\t\t\t\t\t\treturn a;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn IRUserCallExpr.new(\n\t\t\tthis.#fnExpr.simplifyTopology(registry),\n\t\t\targs,\n\t\t\tthis.parensSite\n\t\t);\n\t}\n\n\t/**\n\t * @returns {UplcTerm}\n\t */\n\ttoUplc() {\n\t\treturn super.toUplcCall(this.#fnExpr.toUplc());\n\t}\n}\n\nclass IRAnonCallExpr extends IRUserCallExpr {\n\t#anon;\n\n\t/**\n\t * @param {IRFuncExpr} fnExpr \n\t * @param {IRExpr[]} argExprs \n\t * @param {Site} parensSite \n\t */\n\tconstructor(fnExpr, argExprs, parensSite) {\n\t\tsuper(fnExpr, argExprs, parensSite)\n\n\t\tthis.#anon = fnExpr;\n\t}\n\n\t/**\n\t * Internal function\n\t * @type {IRFuncExpr}\n\t */\n\tget anon() {\n\t\treturn this.#anon;\n\t}\n\n\t/**\n\t * @type {IRVariable[]}\n\t */\n\tget argVariables() {\n\t\treturn this.#anon.args;\n\t}\n\n\t/**\n\t * Add args to the stack as IRDeferredValue instances\n\t * @param {IRCallStack} stack\n\t */\n\tevalConstants(stack) {\n\t\tconst argExprs = this.evalConstantsInArgs(stack);\n\n\t\tconst parentStack = stack;\n\n\t\targExprs.forEach((argExpr, i) => {\n\t\t\tstack = stack.set(this.argVariables[i], new IRDeferredValue(() => argExpr.eval(parentStack)));\n\t\t});\n\n\t\tconst anonBody = this.#anon.body.evalConstants(stack);\n\n\t\tif (anonBody instanceof IRLiteralExpr) {\n\t\t\treturn anonBody;\n\t\t} else {\n\t\t\treturn IRUserCallExpr.new(\n\t\t\t\tnew IRFuncExpr(\n\t\t\t\t\tthis.#anon.site,\n\t\t\t\t\tthis.#anon.args,\n\t\t\t\t\tanonBody\n\t\t\t\t),\n\t\t\t\targExprs,\n\t\t\t\tthis.parensSite\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Add literal args to the map\n\t * @param {IRLiteralRegistry} literals\n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\tconst argsOrLiteral = super.simplifyLiteralsInArgsAndTryEval(literals);\n\n\t\tif (argsOrLiteral instanceof IRLiteralExpr) {\n\t\t\treturn argsOrLiteral;\n\t\t} else {\n\t\t\tconst args = argsOrLiteral;\n\n\t\t\targs.forEach((arg, i) => {\n\t\t\t\tif (arg instanceof IRLiteralExpr) {\n\t\t\t\t\tliterals.set(this.argVariables[i], arg);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst anonBody = this.#anon.body.simplifyLiterals(literals);\n\n\t\t\tif (anonBody instanceof IRLiteralExpr) {\n\t\t\t\treturn anonBody;\n\t\t\t} else {\n\t\t\t\treturn new IRAnonCallExpr(\n\t\t\t\t\tnew IRFuncExpr(\n\t\t\t\t\t\tthis.#anon.site,\n\t\t\t\t\t\tthis.#anon.args,\n\t\t\t\t\t\tanonBody\n\t\t\t\t\t),\n\t\t\t\t\targs,\n\t\t\t\t\tthis.parensSite\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs \n\t */\n\tregisterNameExprs(nameExprs) {\n\t\tthis.registerNameExprsInArgs(nameExprs);\n\n\t\tthis.argVariables.forEach(a => nameExprs.registerVariable(a));\n\n\t\tthis.#anon.body.registerNameExprs(nameExprs);\n\t}\n\t\n\t/**\n\t * @param {IRExprRegistry} registry \n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\tconst args = this.simplifyTopologyInArgs(registry);\n\n\t\t// remove unused args, inline args that are only referenced once, inline all IRNameExprs, inline function with default args \n\t\tconst remainingIds = this.argVariables.map((variable, i) => {\n\t\t\tconst n = registry.countReferences(variable);\n\n\t\t\tconst arg = args[i];\n\n\t\t\tif (\n\t\t\t\tn == 0 \n\t\t\t\t|| (n == 1 && (!registry.maybeInsideLoop(variable) || arg instanceof IRFuncExpr)) \n\t\t\t\t|| arg instanceof IRNameExpr \n\t\t\t\t|| (arg instanceof IRFuncExpr && arg.hasOptArgs())\n\t\t\t) {\n\t\t\t\tif (n > 0) {\n\t\t\t\t\t// inline\n\t\t\t\t\tregistry.addInlineable(variable, arg);\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}).filter(i => i != -1);\n\n\t\tconst remainingVars = remainingIds.map(i => this.argVariables[i]);\n\t\tconst remainingExprs = remainingIds.map(i => args[i]);\n\n\t\tconst anonBody = this.#anon.body.simplifyTopology(registry);\n\n\t\tif (anonBody instanceof IRLiteralExpr || remainingExprs.length == 0) {\n\t\t\treturn anonBody;\n\t\t} else {\n\t\t\treturn new IRAnonCallExpr(\n\t\t\t\tnew IRFuncExpr(\n\t\t\t\t\tthis.#anon.site,\n\t\t\t\t\tremainingVars,\n\t\t\t\t\tanonBody\n\t\t\t\t),\n\t\t\t\tremainingExprs,\n\t\t\t\tthis.parensSite\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass IRNestedAnonCallExpr extends IRUserCallExpr {\n\t#anon;\n\n\t/**\n\t * @param {IRAnonCallExpr} anon\n\t * @param {IRExpr[]} outerArgExprs\n\t * @param {Site} parensSite\n\t */\n\tconstructor(anon, outerArgExprs, parensSite) {\n\t\tsuper(anon, outerArgExprs, parensSite);\n\n\t\tthis.#anon = anon;\n\t}\n\n\t/**\n\t * Flattens consecutive nested calls\n\t * @param {IRExprRegistry} registry\n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\tconst anon = this.#anon.simplifyTopology(registry);\n\n\t\tconst args = this.simplifyTopologyInArgs(registry);\n\n\t\tif (anon instanceof IRAnonCallExpr && anon.anon.body instanceof IRFuncExpr) {\n\t\t\t// flatten\n\t\t\tconst allArgs = anon.argExprs.slice().concat(args);\n\t\t\tconst allVars = anon.argVariables.slice().concat(anon.anon.body.args.slice());\n\n\t\t\tassert(allArgs.length == allVars.length);\n\n\t\t\treturn IRUserCallExpr.new(\n\t\t\t\tnew IRFuncExpr(\n\t\t\t\t\tanon.anon.body.site,\n\t\t\t\t\tallVars,\n\t\t\t\t\tanon.anon.body.body\n\t\t\t\t),\n\t\t\t\tallArgs,\n\t\t\t\tthis.parensSite\n\t\t\t);\n\t\t} else {\n\t\t\treturn IRUserCallExpr.new(\n\t\t\t\tanon,\n\t\t\t\targs,\n\t\t\t\tthis.parensSite\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass IRFuncDefExpr extends IRAnonCallExpr {\n\t#def;\n\n\t/**\n\t * @param {IRFuncExpr} fnExpr \n\t * @param {IRFuncExpr} defExpr \n\t * @param {Site} parensSite\n\t */\n\tconstructor(fnExpr, defExpr, parensSite) {\n\t\tsuper(fnExpr, [defExpr], parensSite);\n\n\t\tthis.#def = defExpr;\n\t}\n}\n\n/**\n * Intermediate Representation error call (with optional literal error message)\n * @package\n */\nclass IRErrorCallExpr extends IRExpr {\n\t#msg;\n\n\t/**\n\t * @param {Site} site \n\t * @param {string} msg \n\t */\n\tconstructor(site, msg = \"\") {\n\t\tsuper(site);\n\t\tthis.#msg = msg;\n\t}\n\n\t/**\n\t * @param {string} indent \n\t * @returns {string}\n\t */\n\ttoString(indent = \"\") {\n\t\treturn \"error()\";\n\t}\n\n\t/**\n\t * @param {IRScope} scope \n\t */\n\tresolveNames(scope) {\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {IRExpr}\n\t */\n\tevalConstants(stack) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {IRCallStack} stack\n\t * @returns {?IRValue}\n\t */\n\teval(stack) {\n\t\tif (stack.throwRTErrors) {\n\t\t\tthrow this.site.runtimeError(this.#msg);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param {IRLiteralRegistry} literals \n\t * @returns {IRExpr}\n\t */\n\tsimplifyLiterals(literals) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {IRNameExprRegistry} nameExprs\n\t */\n\tregisterNameExprs(nameExprs) {\n\t}\n\n\t/**\n\t * @param {Map<IRVariable, IRVariable>} newVars \n\t * @returns {IRExpr}\n\t */\n\tcopy(newVars) {\n\t\treturn new IRErrorCallExpr(this.site, this.#msg);\n\t}\n\n\t/**\n\t * @param {IRExprRegistry} registry\n\t * @returns {IRExpr}\n\t */\n\tsimplifyTopology(registry) {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {UplcTerm}\n\t */\n\ttoUplc() {\n\t\treturn new UplcError(this.site, this.#msg);\n\t}\n}\n\n\n/////////////////////////////////////\n// Section 22: IR AST build functions\n/////////////////////////////////////\n\n/**\n * Build an Intermediate Representation expression\n * @param {Token[]} ts \n * @returns {IRExpr}\n * @package\n */\nfunction buildIRExpr(ts) {\n\t/** @type {?IRExpr} */\n\tlet expr = null;\n\n\twhile (ts.length > 0) {\n\t\tlet t = ts.shift();\n\n\t\tif (t === undefined) {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t} else {\n\t\t\tif (t.isGroup(\"(\") && ts.length > 0 && ts[0].isSymbol(\"->\")) {\n\t\t\t\tassert(expr === null);\n\n\t\t\t\tts.unshift(t);\n\n\t\t\t\texpr = buildIRFuncExpr(ts);\n\t\t\t} else if (t.isGroup(\"(\")) {\n\t\t\t\tlet group = t.assertGroup();\n\n\t\t\t\tif (expr === null) {\n\t\t\t\t\tif (group.fields.length == 1) {\n\t\t\t\t\t\texpr = buildIRExpr(group.fields[0])\n\t\t\t\t\t} else if (group.fields.length == 0) {\n\t\t\t\t\t\texpr = new IRLiteralExpr(new UplcUnit(t.site));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgroup.syntaxError(\"unexpected parentheses with multiple fields\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet args = [];\n\t\t\t\t\tfor (let f of group.fields) {\n\t\t\t\t\t\targs.push(buildIRExpr(f));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (expr instanceof IRNameExpr && expr.name.startsWith(\"__core\")) {\n\t\t\t\t\t\tif (!IRScope.isBuiltin(expr.name)) {\n\t\t\t\t\t\t\tthrow expr.site.referenceError(`builtin '${expr.name}' undefined`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpr = new IRCoreCallExpr(new Word(expr.site, expr.name), args, t.site);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texpr = IRUserCallExpr.new(expr, args, t.site);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (t.isSymbol(\"-\")) {\n\t\t\t\t// only makes sense next to IntegerLiterals\n\t\t\t\tlet int = assertDefined(ts.shift());\n\t\t\t\tif (int instanceof IntLiteral) {\n\t\t\t\t\texpr = new IRLiteralExpr(new UplcInt(int.site, int.value * (-1n)));\n\t\t\t\t} else {\n\t\t\t\t\tthrow int.site.typeError(`expected literal int, got ${int}`);\n\t\t\t\t}\n\t\t\t} else if (t instanceof BoolLiteral) {\n\t\t\t\tassert(expr === null);\n\t\t\t\texpr = new IRLiteralExpr(new UplcBool(t.site, t.value));\n\t\t\t} else if (t instanceof IntLiteral) {\n\t\t\t\tassert(expr === null);\n\t\t\t\texpr = new IRLiteralExpr(new UplcInt(t.site, t.value));\n\t\t\t} else if (t instanceof ByteArrayLiteral) {\n\t\t\t\tassert(expr === null);\n\t\t\t\tif (t.bytes.length == 0 && ts[0] != undefined && ts[0] instanceof ByteArrayLiteral) {\n\t\t\t\t\t// literal data is ##<...>\n\t\t\t\t\tconst next = assertDefined(ts.shift());\n\n\t\t\t\t\tif (next instanceof ByteArrayLiteral) {\n\t\t\t\t\t\texpr = new IRLiteralExpr(new UplcDataValue(next.site, UplcData.fromCbor(next.bytes)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\texpr = new IRLiteralExpr(new UplcByteArray(t.site, t.bytes));\n\t\t\t\t}\n\t\t\t} else if (t instanceof StringLiteral) {\n\t\t\t\tassert(expr === null);\n\t\t\t\texpr = new IRLiteralExpr(new UplcString(t.site, t.value));\n\t\t\t} else if (t.isWord(\"const\")) {\n\t\t\t\tassert(expr === null);\n\n\t\t\t\tlet maybeGroup = ts.shift();\n\t\t\t\tif (maybeGroup === undefined) {\n\t\t\t\t\tthrow t.site.syntaxError(\"expected parens after const\");\n\t\t\t\t} else {\n\t\t\t\t\tlet parens = maybeGroup.assertGroup(\"(\", 1);\n\t\t\t\t\tlet pts = parens.fields[0];\n\n\t\t\t\t\texpr = new IRConstExpr(t.site, buildIRExpr(pts));\n\t\t\t\t}\n\t\t\t} else if (t.isWord(\"error\")) {\n\t\t\t\tassert(expr === null);\n\n\t\t\t\tlet maybeGroup = ts.shift();\n\t\t\t\tif (maybeGroup === undefined) {\n\t\t\t\t\tthrow t.site.syntaxError(\"expected parens after error\");\n\t\t\t\t} else {\n\t\t\t\t\tlet parens = maybeGroup.assertGroup(\"(\", 1);\n\t\t\t\t\tlet pts = parens.fields[0];\n\n\t\t\t\t\tif (pts.length != 1) {\n\t\t\t\t\t\tthrow parens.syntaxError(\"error call expects a single literal string msg arg\");\n\t\t\t\t\t}\n\n\t\t\t\t\tlet msg = pts[0];\n\t\t\t\t\tif (!(msg instanceof StringLiteral)) {\n\t\t\t\t\t\tthrow msg.syntaxError(\"error call expects literal string msg arg\");\n\t\t\t\t\t}\n\t\t\t\t\texpr = new IRErrorCallExpr(t.site, msg.value);\n\t\t\t\t}\n\t\t\t} else if (t.isWord()) {\n\t\t\t\tassert(expr === null);\n\t\t\t\texpr = new IRNameExpr(t.assertWord());\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"unhandled untyped token \" + t.toString());\n\t\t\t}\n\t\t}\n\t}\n\n\tif (expr === null) {\n\t\tthrow new Error(\"expr is null\");\n\t} else {\n\t\treturn expr;\n\t}\n}\n\n/**\n * Build an IR function expression\n * @param {Token[]} ts \n * @returns {IRFuncExpr}\n */\nfunction buildIRFuncExpr(ts) {\n\tlet maybeParens = ts.shift();\n\tif (maybeParens === undefined) {\n\t\tthrow new Error(\"empty func expr\");\n\t} else {\n\t\tlet parens = maybeParens.assertGroup(\"(\");\n\n\t\tassertDefined(ts.shift()).assertSymbol(\"->\");\n\t\tlet braces = assertDefined(ts.shift()).assertGroup(\"{\");\n\n\t\t/**\n\t\t * @type {Word[]}\n\t\t */\n\t\tlet argNames = [];\n\n\t\tfor (let f of parens.fields) {\n\t\t\tassert(f.length == 1, \"expected single word per arg\");\n\t\t\targNames.push(f[0].assertWord());\n\t\t}\n\n\t\tif (braces.fields.length > 1) {\n\t\t\tthrow braces.syntaxError(\"unexpected comma in function body\")\n\t\t} else if (braces.fields.length == 0) {\n\t\t\tthrow braces.syntaxError(\"empty function body\")\n\t\t}\n\n\t\tlet bodyExpr = buildIRExpr(braces.fields[0]);\n\n\t\treturn new IRFuncExpr(parens.site, argNames.map(a => new IRVariable(a)), bodyExpr)\n\t}\n}\n\n\n/////////////////////////\n// Section 23: IR Program\n/////////////////////////\n\n\n/**\n * Wrapper for IRFuncExpr, IRCallExpr or IRLiteralExpr\n * @package\n */\nclass IRProgram {\n\t#expr;\n\t#purpose;\n\n\t/**\n\t * @param {IRFuncExpr | IRCallExpr | IRLiteralExpr} expr\n\t * @param {?number} purpose\n\t */\n\tconstructor(expr, purpose) {\n\t\tthis.#expr = expr;\n\t\tthis.#purpose = purpose;\n\t}\n\n\t/**\n\t * @param {IRExpr} expr \n\t * @returns {IRFuncExpr | IRCallExpr | IRLiteralExpr}\n\t */\n\tstatic assertValidRoot(expr) {\n\t\tif (expr instanceof IRFuncExpr || expr instanceof IRCallExpr || expr instanceof IRLiteralExpr) {\n\t\t\treturn expr;\n\t\t} else {\n\t\t\tthrow new Error(\"invalid IRExpr type for IRProgram\");\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {IR} ir \n\t * @param {?number} purpose\n\t * @param {boolean} simplify\n\t * @param {boolean} throwSimplifyRTErrors - if true -> throw RuntimErrors caught during evaluation steps\n\t * @param {IRScope} scope\n\t * @returns {IRProgram}\n\t */\n\tstatic new(ir, purpose, simplify = false, throwSimplifyRTErrors = false, scope = new IRScope(null, null)) {\n\t\tlet [irSrc, codeMap] = ir.generateSource();\n\n\t\tlet irTokens = tokenizeIR(irSrc, codeMap);\n\n\t\tlet expr = buildIRExpr(irTokens);\n\t\n\t\texpr.resolveNames(scope);\n\n\t\texpr = expr.evalConstants(new IRCallStack(throwSimplifyRTErrors));\n\n\t\tif (simplify) {\n\t\t\t// inline literals and evaluate core expressions with only literal args (some can be evaluated with only partial literal args)\n\t\t\texpr = this.simplify(expr);\n\n\t\t\t// make sure the debruijn indices are correct\n\t\t\texpr.resolveNames(scope);\n\t\t}\n\n\t\tconst program = new IRProgram(IRProgram.assertValidRoot(expr), purpose);\n\n\t\treturn program;\n\t}\n\n\t/**\n\t * @param {IRExpr} expr\n\t * @returns {IRExpr}\n\t */\n\tstatic simplify(expr) {\n\t\tlet dirty = true;\n\t\tlet oldState = expr.toString();\n\n\t\twhile (dirty) {\n\t\t\tdirty = false;\n\n\t\t\texpr = expr.simplifyLiterals(new Map());\n\n\t\t\tconst nameExprs = new IRNameExprRegistry();\n\n\t\t\texpr.registerNameExprs(nameExprs);\n\n\t\t\texpr = expr.simplifyTopology(new IRExprRegistry(nameExprs));\n\n\t\t\tconst newState = expr.toString();\n\n\t\t\tif (newState != oldState) {\n\t\t\t\tdirty = true;\n\t\t\t\toldState = newState;\n\t\t\t}\n\t\t}\n\n\t\treturn expr;\n\t}\n\n\t/**\n\t * @package\n\t * @type {IRFuncExpr | IRCallExpr | IRLiteralExpr}\n\t */\n\tget expr() {\n\t\treturn this.#expr;\n\t}\n\n\t/**\n\t * @package\n\t * @type {?number}\n\t */\n\tget purpose() {\n\t\treturn this.#purpose;\n\t}\n\n\t/**\n\t * @package\n\t * @type {Site}\n\t */\n\tget site() {\n\t\treturn this.#expr.site;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget data() {\n\t\tif (this.#expr instanceof IRLiteralExpr) {\n\t\t\tlet v = this.#expr.value;\n\n\t\t\treturn v.data;\n\t\t} else {\n\t\t\tconsole.log(this.#expr.toString());\n\t\t\tthrow new Error(\"expected data literal\");\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.#expr.toString();\n\t}\n\n\t/**\n\t * @returns {UplcProgram}\n\t */\n\ttoUplc() {\n\t\treturn new UplcProgram(this.#expr.toUplc(), this.#purpose);\n\t}\n\n\t/**\n\t * @returns {number}\n\t */\n\tcalcSize() {\n\t\treturn this.toUplc().calcSize();\n\t}\n}\n\nclass IRParametricProgram {\n\t#irProgram;\n\t#parameters;\n\n\t/**\n\t * @param {IRProgram} irProgram\n\t * @param {string[]} parameters\n\t */\n\tconstructor(irProgram, parameters) {\n\t\tthis.#irProgram = irProgram;\n\t\tthis.#parameters = parameters;\n\t}\n\n\t/**\n\t * @package\n\t * @param {IR} ir \n\t * @param {?number} purpose\n\t * @param {string[]} parameters\n\t * @param {boolean} simplify\n\t * @returns {IRParametricProgram}\n\t */\n\tstatic new(ir, purpose, parameters, simplify = false) {\n\t\tlet scope = new IRScope(null, null);\n\n\t\tparameters.forEach((p, i) => {\n\t\t\tconst internalName = `__PARAM_${i}`;\n\n\t\t\tscope = new IRScope(scope, new IRVariable(new Word(Site.dummy(), internalName)));\n\t\t});\n\n\t\tconst irProgram = IRProgram.new(ir, purpose, simplify, false, scope);\n\n\t\treturn new IRParametricProgram(irProgram, parameters);\n\t}\n\n\t/**\n\t * @returns {UplcProgram}\n\t */\n\ttoUplc() {\n\t\tlet exprUplc = this.#irProgram.expr.toUplc();\n\n\t\tthis.#parameters.forEach(p => {\n\t\t\texprUplc = new UplcLambda(Site.dummy(), exprUplc, p);\n\t\t});\n\n\t\treturn new UplcProgram(exprUplc, this.#irProgram.purpose);\n\t}\n}\n\n\n\n/////////////////////////////\n// Section 24: Helios program\n/////////////////////////////\n\n/**\n * A Module is a collection of statements\n */\nclass Module {\n\t#name;\n\t#statements;\n\n\t/**\n\t * @param {Word} name \n\t * @param {Statement[]} statements\n\t */\n\tconstructor(name, statements) {\n\t\tthis.#name = name;\n\t\tthis.#statements = statements;\n\n\t\tthis.#statements.forEach(s => s.setBasePath(`__module__${this.#name.toString()}`));\n\t}\n\n\t/**\n\t * @param {string} rawSrc\n\t * @param {?number} fileIndex - a unique optional index passed in from outside that makes it possible to associate a UserError with a specific file\n\t * @returns {Module}\n\t */\n\tstatic new(rawSrc, fileIndex = null) {\n\t\tconst src = new Source(rawSrc, fileIndex);\n\n\t\tconst ts = tokenize(src);\n\n\t\tsrc.throwErrors();\n\n\t\tif (ts === null) {\n\t\t\tthrow new Error(\"should've been thrown above\");\n\t\t}\n\n\t\tif (ts.length == 0) {\n\t\t\tthrow UserError.syntaxError(src, 0, 1, \"empty script\");\n\t\t}\n\n\t\tconst [purpose, name, statements, mainIdx] = buildScript(ts, ScriptPurpose.Module);\n\n\t\tsrc.throwErrors();\n\n\t\tif (name !== null) {\n\t\t\treturn new Module(name, statements);\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected\"); // should've been caught by calling src.throwErrors() above\n\t\t}\n\t}\n\n\t/**\n\t * @type {Word}\n\t */\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\t/**\n\t * @type {Statement[]}\n\t */\n\tget statements() {\n\t\treturn this.#statements.slice();\n\t}\n\n\ttoString() {\n\t\treturn this.#statements.map(s => s.toString()).join(\"\\n\");\n\t}\n\n\t/**\n\t * @param {ModuleScope} scope \n\t */\n\tevalTypes(scope) {\n\t\tfor (let s of this.statements) {\n\t\t\ts.eval(scope);\n\t\t}\n\t}\n\n\t/**\n\t * Cleans the program by removing everything that is unecessary for the smart contract (easier to audit)\n\t * @returns {string}\n\t */\n\tcleanSource() {\n\t\tlet raw = this.name.site.src.raw;\n\t\tlet n = raw.length;\n\n\t\tlet mask = new Uint8Array(n);\n\n\t\tmask.fill(1); // hide the unused parts by setting to 0\n\n\t\tfor (let s of this.#statements) {\n\t\t\ts.hideUnused(mask);\n\t\t}\n\n\t\t/** @type {string[]} */\n\t\tlet chars = [];\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tlet c = raw.charAt(i);\n\n\t\t\tif (c == '\\n' || c == ' ') {\n\t\t\t\tchars.push(c);\n\t\t\t} else if (mask[i] == 1) {\n\t\t\t\tchars.push(c);\n\t\t\t} else {\n\t\t\t\tchars.push(' ');\n\t\t\t}\n\t\t}\n\n\t\tlet lines = chars.join(\"\").split(\"\\n\").map(l => {\n\t\t\tif (l.trim().length == 0) {\n\t\t\t\treturn \"\";\n\t\t\t} else {\n\t\t\t\treturn l;\n\t\t\t}\n\t\t});\n\n\t\t// remove more than one consecutive empty line\n\n\t\t/**\n\t\t * @type {string[]}\n\t\t */\n\t\tlet parts = [];\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tif (!(i > 0 && lines[i-1].length == 0 && lines[i].length == 0)) {\n\t\t\t\tparts.push(lines[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn parts.join(\"\\n\");\n\t}\n\n\t/**\n\t * This module can depend on other modules\n\t * TODO: detect circular dependencies\n\t * @param {Module[]} modules \n\t * @param {Module[]} stack\n\t * @returns {Module[]}\n\t */\n\tfilterDependencies(modules, stack = []) {\n\t\t/**\n\t\t * @type {Module[]}\n\t\t */\n\t\tlet deps = [];\n\n\t\t/** @type {Module[]} */\n\t\tlet newStack = [this];\n\t\tnewStack = newStack.concat(stack);\n\n\t\tfor (let s of this.#statements) {\n\t\t\tif (s instanceof ImportStatement) {\n\t\t\t\tlet mn = s.moduleName.value;\n\n\t\t\t\tif (mn == this.name.value) {\n\t\t\t\t\tthrow s.syntaxError(\"can't import self\");\n\t\t\t\t} else if (stack.some(d => d.name.value == mn)) {\n\t\t\t\t\tthrow s.syntaxError(\"circular import detected\");\n\t\t\t\t}\n\n\t\t\t\t// if already in deps, then don't add (because it will have been added before along with all its dependencies)\n\t\t\t\tif (!deps.some(d => d.name.value == mn)) {\n\t\t\t\t\tlet m = modules.find(m => m.name.value == mn);\n\n\t\t\t\t\tif (m === undefined) {\n\t\t\t\t\t\tthrow s.referenceError(`module '${mn}' not found`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// only add deps that weren't added before\n\t\t\t\t\t\tlet newDeps = m.filterDependencies(modules, newStack).concat([m]).filter(d => !deps.some(d_ => d_.name.value == d.name.value));\n\n\t\t\t\t\t\tdeps = deps.concat(newDeps);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn deps;\n\t}\n}\n\n/**\n * The entrypoint module\n */\nclass MainModule extends Module {\n\t/**\n\t * @param {Word} name \n\t * @param {Statement[]} statements \n\t */\n\tconstructor(name, statements) {\n\t\tsuper(name, statements);\n\t}\n\n\t/**\n\t * @type {FuncStatement}\n\t */\n\tget mainFunc() {\n\t\tfor (let s of this.statements) {\n\t\t\tif (s.name.value == \"main\") {\n\t\t\t\tif (!(s instanceof FuncStatement)) {\t\n\t\t\t\t\tthrow s.typeError(\"'main' isn't a function statement\");\n\t\t\t\t} else {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"'main' not found (is a module being used as an entrypoint?)\");\n\t}\n}\n\n/**\n * @typedef {Object.<string, HeliosDataClass<HeliosData>>} UserTypes\n */\n\n/**\n * Helios root object\n */\n class Program {\n\t#purpose;\n\t#modules;\n\n\t/** @type {UserTypes} */\n\t#types;\n\n\t/**\n\t * Cache of const values\n\t * @type {Object.<string, HeliosData>}\n\t */\n\t#parameters;\n\t\n\t/**\n\t * @param {number} purpose\n\t * @param {Module[]} modules\n\t */\n\tconstructor(purpose, modules) {\n\t\tthis.#purpose = purpose;\n\t\tthis.#modules = modules;\n\t\tthis.#types = {};\n\t\tthis.#parameters = {};\n\t}\n\n\t/**\n\t * @param {string} rawSrc \n\t * @returns {[purpose, Module[]]}\n\t */\n\tstatic parseMain(rawSrc) {\n\t\tconst src = new Source(rawSrc, 0);\n\n\t\tconst ts = tokenize(src);\n\n\t\tsrc.throwErrors();\n\n\t\tif (ts === null) {\n\t\t\tthrow new Error(\"should've been thrown above\");\n\t\t}\n\n\t\tif (ts.length == 0) {\n\t\t\tthrow UserError.syntaxError(src, 0, 1, \"empty script\");\n\t\t}\n\n\t\tconst [purpose, name, statements, mainIdx] = buildScript(ts);\n\n\t\tsrc.throwErrors();\n\n\t\tif (purpose !== null && name !== null) {\n\t\t\t/**\n\t\t\t * @type {Module[]}\n\t\t\t */\n\t\t\tconst modules = [new MainModule(name, statements.slice(0, mainIdx+1))];\n\n\t\t\tif (mainIdx < statements.length - 1) {\n\t\t\t\tmodules.push(new Module(name, statements.slice(mainIdx+1)));\n\t\t\t}\n\n\t\t\treturn [purpose, modules];\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected\"); // should've been caught by calling src.throwErrors() above\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @param {string} mainName \n\t * @param {string[]} moduleSrcs\n\t * @returns {Module[]}\n\t */\n\tstatic parseImports(mainName, moduleSrcs = []) {\n\t\tlet imports = moduleSrcs.map((src, i) => Module.new(src, i+1));\n\n\t\t/**\n\t\t * @type {Set<string>}\n\t\t */\n\t\tlet names = new Set();\n\n\t\tnames.add(mainName);\n\n\t\tfor (let m of imports) {\n\t\t\tif (names.has(m.name.value)) {\n\t\t\t\tthrow m.name.syntaxError(`non-unique module name '${m.name.value}'`);\n\t\t\t}\n\n\t\t\tnames.add(m.name.value);\n\t\t}\n\n\t\treturn imports;\n\t}\n\n\t/**\n\t * Creates  a new program.\n\t * @param {string} mainSrc \n\t * @param {string[]} moduleSrcs - optional sources of modules, which can be used for imports\n\t * @returns {Program}\n\t */\n\tstatic new(mainSrc, moduleSrcs = []) {\n\t\tlet [purpose, modules] = Program.parseMain(mainSrc);\n\n\t\tlet site = modules[0].name.site;\n\n\t\tlet imports = Program.parseImports(modules[0].name.value, moduleSrcs);\n\t\t\n\t\tlet mainImports = modules[0].filterDependencies(imports);\n\n\t\t/** @type {Module[]} */\n\t\tlet postImports = [];\n\n\t\tif (modules.length > 1) {\n\t\t\tpostImports = modules[modules.length - 1].filterDependencies(imports).filter(m => !mainImports.some(d => d.name.value == m.name.value));\n\t\t}\n\n\t\t// create the final order of all the modules (this is the order in which statements will be added to the IR)\n\t\tmodules = mainImports.concat([modules[0]]).concat(postImports).concat(modules.slice(1));\n\t\n\t\t/**\n\t\t * @type {Program}\n\t\t */\n\t\tlet program;\n\n\t\tswitch (purpose) {\n\t\t\tcase ScriptPurpose.Testing:\n\t\t\t\tprogram = new TestingProgram(modules);\n\t\t\t\tbreak;\n\t\t\tcase ScriptPurpose.Spending:\n\t\t\t\tprogram = new SpendingProgram(modules);\n\t\t\t\tbreak;\n\t\t\tcase ScriptPurpose.Minting:\n\t\t\t\tprogram = new MintingProgram(modules);\n\t\t\t\tbreak\n\t\t\tcase ScriptPurpose.Staking:\n\t\t\t\tprogram = new StakingProgram(modules);\n\t\t\t\tbreak\n\t\t\tcase ScriptPurpose.Module:\n\t\t\t\tthrow site.syntaxError(\"can't use module for main\");\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"unhandled script purpose\");\n\t\t}\n\n\t\tconst topScope = program.evalTypes();\n\n\t\tprogram.fillTypes(topScope);\n\n\t\treturn program;\n\t}\n\n\t/** \n\t * @type {Module[]} \n\t */\n\tget mainImportedModules() {\n\t\t/** @type {Module[]} */\n\t\tlet ms = [];\n\n\t\tfor (let m of this.#modules) {\n\t\t\tif (m instanceof MainModule) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tms.push(m);\n\t\t\t}\n\t\t}\n\n\t\treturn ms;\n\t}\n\n\t/**\n\t * @type {MainModule}\n\t */\n\tget mainModule() {\n\t\tfor (let m of this.#modules) {\n\t\t\tif (m instanceof MainModule) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"MainModule not found\");\n\t}\n\n\t/**\n\t * @type {?Module}\n\t */\n\tget postModule() {\n\t\tlet m = this.#modules[this.#modules.length - 1];\n\n\t\tif (m instanceof MainModule) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn m;\n\t\t}\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget name() {\n\t\treturn this.mainModule.name.value;\n\t}\n\n\t/**\n\t * @type {FuncStatement}\n\t */\n\tget mainFunc() {\n\t\treturn this.mainModule.mainFunc;\n\t}\n\n\t/**\n\t * @type {string}\n\t */\n\tget mainPath() {\n\t\treturn this.mainFunc.path;\n\t}\n\n\t/**\n\t * @type {Statement[]}\n\t */\n\tget mainStatements() {\n\t\treturn this.mainModule.statements;\n\t}\n\n\t/**\n\t * Needed to list the paramTypes, and to call changeParam\n\t * @type {Statement[]}\n\t */\n\tget mainAndPostStatements() {\n\t\tlet statements = this.mainModule.statements;\n\n\t\tif (this.postModule != null) {\n\t\t\tstatements = statements.concat(this.postModule.statements);\n\t\t}\n\n\t\treturn statements;\n\t}\n\n\t/**\n\t * @type {[Statement, boolean][]} - boolean value marks if statement is import or not\n\t */\n\tget allStatements() {\n\t\t/**\n\t\t * @type {[Statement, boolean][]}\n\t\t */\n\t\tlet statements = [];\n\n\t\tfor (let i = 0; i < this.#modules.length; i++) {\n\t\t\tlet m = this.#modules[i];\n\n\t\t\tlet isImport = !(m instanceof MainModule || (i == this.#modules.length - 1));\n\n\t\t\tstatements = statements.concat(m.statements.map(s => [s, isImport]));\n\t\t}\n\n\t\treturn statements;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn this.#modules.map(m => m.toString()).join(\"\\n\");\n\t}\n\n\t/**\n\t * @returns {[string[], string]}\n\t */\n\tcleanSource() {\n\t\treturn [this.mainImportedModules.map(m => m.cleanSource()), this.mainModule.cleanSource()];\n\t}\n\n\t/**\n\t * @param {GlobalScope} globalScope\n\t * @returns {TopScope}\n\t */\n\tevalTypesInternal(globalScope) {\n\t\tconst topScope = new TopScope(globalScope);\n\n\t\t// loop through the modules\n\n\t\tfor (let i = 0; i < this.#modules.length; i++) {\n\t\t\tconst m = this.#modules[i];\n\n\t\t\t// reuse main ModuleScope for post module\n\t\t\tconst moduleScope = (m ===  this.postModule) ? topScope.getModuleScope(this.mainModule.name) : new ModuleScope(topScope);\n\n\t\t\tm.evalTypes(moduleScope);\n\n\t\t\tif (m instanceof MainModule) {\n\t\t\t\tglobalScope.allowMacros();\n\t\t\t\ttopScope.setStrict(false);\n\t\t\t}\n\n\t\t\tif (m !== this.postModule) {\n\t\t\t\ttopScope.set(m.name, moduleScope);\n\t\t\t}\n\t\t}\n\n\t\tthis.mainFunc.use();\n\t\t\n\t\treturn topScope;\n\t}\n\n\t/**\n\t * @returns {TopScope}\n\t */\n\tevalTypes() {\n\t\tthrow new Error(\"not yet implemeneted\");\n\t}\n\n\t/**\n\t * @type {UserTypes}\n\t */\n\tget types() {\n\t\treturn this.#types;\n\t}\n\n\t/**\n\t * Fill #types with convenient javascript equivalents of Int, ByteArray etc.\n\t * @param {TopScope} topScope\n\t */\n\tfillTypes(topScope) {\n\t\tconst mainModuleScope = topScope.getModuleScope(this.mainModule.name);\n\n\t\tmainModuleScope.loopTypes((name, type) => {\n\t\t\tif (type instanceof StructStatementType || type instanceof EnumStatementType) {\n\t\t\t\tif (name in this.#types) {\n\t\t\t\t\tthrow new Error(`unexpected duplicate type name ${name} in main program scope`);\n\t\t\t\t}\n\n\t\t\t\tthis.#types[name] = type.userType;;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @type {Object.<string, Type>}\n\t */\n\tget paramTypes() {\n\t\t/**\n\t\t * @type {Object.<string, Type>}\n\t\t */\n\t\tlet res = {};\n\n\t\tfor (let s of this.mainAndPostStatements) {\n\t\t\tif (s instanceof ConstStatement) {\n\t\t\t\tres[s.name.value] = s.type;\n\t\t\t} else if (s instanceof ImportStatement && s.origStatement instanceof ConstStatement) {\n\t\t\t\tres[s.name.value] = s.origStatement.type;\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Change the literal value of a const statements  \n\t * @param {string} name \n\t * @param {string | UplcValue} value \n\t * @returns {Program} - returns 'this' so that changeParam calls can be chained\n\t */\n\tchangeParam(name, value) {\n\t\tdeprecationWarning(\"program.changeParam\", \"0.14.0\", \"use program.parameters instead\", \"https://www.hyperion-bt.org/helios-book/api/reference/program.html#parameters-1\");\n\n\t\tfor (let s of this.mainAndPostStatements) {\n\t\t\tif (s instanceof ConstStatement && s.name.value == name) {\n\t\t\t\ts.changeValue(value);\n\t\t\t\treturn this;\n\t\t\t} else if (s instanceof ImportStatement && s.name.value == name && s.origStatement instanceof ConstStatement) {\n\t\t\t\ts.origStatement.changeValue(value);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\n\t\tthrow this.mainFunc.referenceError(`param '${name}' not found`);\n\t}\n\n\t/**\n\t * Change the literal value of a const statements  \n\t * @package\n\t * @param {string} name \n\t * @param {UplcData} data\n\t */\n\tchangeParamSafe(name, data) {\n\t\tfor (let s of this.mainAndPostStatements) {\n\t\t\tif (s instanceof ConstStatement && s.name.value == name) {\n\t\t\t\ts.changeValueSafe(data);\n\t\t\t\treturn this;\n\t\t\t} else if (s instanceof ImportStatement && s.name.value == name && s.origStatement instanceof ConstStatement) {\n\t\t\t\ts.origStatement.changeValueSafe(data);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\n\t\tthrow this.mainFunc.referenceError(`param '${name}' not found`);\n\t}\n\n\t/**\n\t * Doesn't use wrapEntryPoint\n\t * @param {string} name \n\t * @returns {UplcValue}\n\t */\n\tevalParam(name) {\n\t\t/**\n\t\t * @type {Map<string, IR>}\n\t\t */\n\t\tlet map = new Map();\n\n\t\t/** @type {?ConstStatement} */\n\t\tlet constStatement = null;\n\n\t\tfor (let s of this.mainAndPostStatements) {\n\t\t\tif (s instanceof ImportStatement && s.name.value == name && s.origStatement instanceof ConstStatement) {\n\t\t\t\tconstStatement = s.origStatement;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor (let [s, isImport] of this.allStatements) {\n\t\t\ts.toIR(map);\n\t\t\tif (s instanceof ConstStatement && ((s.name.value == name && !isImport) || s === constStatement)) {\n\t\t\t\tconstStatement = s;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (constStatement === null) {\n\t\t\tthrow new Error(`param '${name}' not found`);\n\t\t} else {\n\t\t\tlet path = constStatement.path;\n\n\t\t\tlet ir = assertDefined(map.get(path));\n\n\t\t\tmap.delete(path);\n\n\t\t\tir = wrapWithRawFunctions(IR.wrapWithDefinitions(ir, map));\n\n\t\t\tlet irProgram = IRProgram.new(ir, this.#purpose, true, true);\n\n\t\t\treturn new UplcDataValue(irProgram.site, irProgram.data);\n\t\t}\n\t}\n\t\n\t/**\n\t * Alternative way to get the parameters as HeliosData instances\n\t * @returns {Object.<string, HeliosData>}\n\t */\n\tget parameters() {\n\t\tconst that = this;\n\n\t\t// not expensive, so doesn't need to be evaluated on-demand\n\t\tconst types = this.paramTypes;\n\n\t\tconst handler = {\n\t\t\t/**\n\t\t\t * Return from this.#parameters if available, or calculate\n\t\t\t * @param {Object.<string, HeliosData>} target \n\t\t\t * @param {string} name\n\t\t\t * @returns \n\t\t\t */\n\t\t\tget(target, name) {\n\t\t\t\tif (name in target) {\n\t\t\t\t\treturn target[name];\n\t\t\t\t} else {\n\t\t\t\t\tconst type = assertDefined(types[name], `invalid param name '${name}'`);\n\t\t\t\t\t\n\t\t\t\t\tconst uplcValue = that.evalParam(name);\n\n\t\t\t\t\tconst value = (uplcValue instanceof UplcBool) ? new Bool(uplcValue.bool) : type.userType.fromUplcData(uplcValue.data);\n\t\t\t\t\t\t\n\t\t\t\t\ttarget[name] = value;\n\n\t\t\t\t\t// TODO: return Proxy instead?\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\treturn new Proxy(this.#parameters, handler);\n\t}\n\n\t/**\n\t * @param {Object.<string, HeliosData | any>} values\n\t */\n\tset parameters(values) {\n\t\tconst types = this.paramTypes;\n\n\t\tfor (let name in values) {\n\t\t\tconst rawValue = values[name];\n\n\t\t\tconst UserType = assertDefined(types[name], `invalid param name '${name}'`).userType;\n\n\t\t\tconst value = rawValue instanceof UserType ? rawValue : new UserType(rawValue);\n\n\t\t\tthis.#parameters[name] = value;\n\n\t\t\tthis.changeParamSafe(name, value._toUplcData());\n\t\t}\n\t}\n\n\t/**\n\t * @package\n\t * @param {IR} ir\n\t * @param {string[]} parameters\n\t * @returns {IR}\n\t */\n\twrapEntryPoint(ir, parameters) {\n\t\t// find the constStatements associated with the parameters\n\t\t/**\n\t\t * @type {(ConstStatement | null)[]}\n\t\t */\n\t\tconst parameterStatements = new Array(parameters.length).fill(null);\n\n\t\tif (parameters.length > 0) {\n\t\t\tfor (let statement of this.mainStatements) {\n\t\t\t\tif (statement instanceof ConstStatement) {\n\t\t\t\t\tconst i = parameters.findIndex(p => statement.name.value == p);\n\n\t\t\t\t\tif (i != -1) {\n\t\t\t\t\t\tparameterStatements[i] = statement;\n\t\t\t\t\t}\n\t\t\t\t} else if (statement instanceof ImportStatement && statement.origStatement instanceof ConstStatement) {\n\t\t\t\t\tconst i = parameters.findIndex(p => statement.name.value == p);\n\n\t\t\t\t\tif (i != -1) {\n\t\t\t\t\t\tparameterStatements[i] = statement.origStatement;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparameters.forEach((p, i) => {\n\t\t\t\tif (parameterStatements[i] == null) {\n\t\t\t\t\tthrow new Error(`parameter ${p} not found (hint: must come before main)`);\n\t\t\t\t}\n\t\t\t});\n\t\t}\t\t\n\n\t\t/**\n\t\t * @type {Map<string, IR>}\n\t\t */\n\t\tconst map = new Map();\n\n\t\tfor (let [statement, _] of this.allStatements) {\n\t\t\tif (parameters.length > 0 && statement instanceof ConstStatement) {\n\t\t\t\tconst i = parameterStatements.findIndex(cs => cs === statement);\n\n\t\t\t\tif (i != -1) {\n\t\t\t\t\tlet ir = new IR(`__PARAM_${i}`);\n\n\t\t\t\t\tif (statement.type instanceof BoolType) {\n\t\t\t\t\t\tir = new IR([\n\t\t\t\t\t\t\tnew IR(\"__helios__common__unBoolData(\"),\n\t\t\t\t\t\t\tir,\n\t\t\t\t\t\t\tnew IR(\")\")\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmap.set(statement.path, ir); \n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstatement.toIR(map);\n\n\t\t\tif (statement.name.value == \"main\") {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n \n\t\t// builtin functions are added when the IR program is built\n\t\t// also replace all tabs with four spaces\n\t\treturn wrapWithRawFunctions(IR.wrapWithDefinitions(ir, map));\n\t}\n\n\t/**\n\t * @package\n\t * @param {string[]}  parameters\n\t * @returns {IR}\n\t */\n\ttoIR(parameters = []) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tprettyIR(simplify = false) {\n\t\tconst ir = this.toIR([]);\n\n\t\tconst irProgram = IRProgram.new(ir, this.#purpose, simplify);\n\n\t\treturn new Source(irProgram.toString()).pretty();\n\t}\n\n\t/**\n\t * @param {boolean} simplify \n\t * @returns {UplcProgram}\n\t */\n\tcompile(simplify = false) {\n\t\tconst ir = this.toIR([]);\n\n\t\tconst irProgram = IRProgram.new(ir, this.#purpose, simplify);\n\t\t\n\t\t//console.log(new Source(irProgram.toString()).pretty());\n\t\t\n\t\treturn irProgram.toUplc();\n\t}\n\n\t/**\n\t * Compile a special Uplc\n\t * @param {string[]} parameters\n\t * @param {boolean} simplify\n\t * @returns {UplcProgram}\n\t */\n\tcompileParametric(parameters, simplify = false) {\n\t\tassert(parameters.length > 0, \"expected at least 1 parameter (hint: use program.compile() instead)\");\n\n\t\tconst ir = this.toIR(parameters);\n\n\t\tconst irProgram = IRParametricProgram.new(ir, this.#purpose, parameters, simplify);\n\n\t\t// TODO: UplcParametricProgram\n\t\treturn irProgram.toUplc();\n\t}\n}\n\nclass RedeemerProgram extends Program {\n\t/**\n\t * @param {number} purpose\n\t * @param {Module[]} modules \n\t */\n\tconstructor(purpose, modules) {\n\t\tsuper(purpose, modules);\n\t}\n\n\t/**\n\t * @package\n\t * @param {GlobalScope} scope\n\t * @returns {TopScope}\n\t */\n\tevalTypesInternal(scope) {\n\t\tconst topScope = super.evalTypesInternal(scope);\n\n\t\t// check the 'main' function\n\n\t\tlet main = this.mainFunc;\n\t\tlet argTypeNames = main.argTypeNames;\n\t\tlet retTypes = main.retTypes;\n\t\tlet haveRedeemer = false;\n\t\tlet haveScriptContext = false;\n\t\tlet haveUnderscores = argTypeNames.some(name => name ==\"\");\n\n\t\tif (argTypeNames.length > 2) {\n\t\t\tthrow main.typeError(\"too many arguments for main\");\n\t\t} else if (haveUnderscores) {\n\t\t\t// empty type name comes from an underscore\n\t\t\tassert(argTypeNames.length == 2, \"expected 2 arguments\");\n\t\t} else if (argTypeNames.length != 2) {\n\t\t\tdeprecationWarning(\"main with variable arguments\", \"0.14.0\", \"use underscores instead\", \"https://www.hyperion-bt.org/helios-book/lang/script-structure.html#main-function-4\");\n\t\t}\n\n\t\tfor (let i = 0; i < argTypeNames.length; i++) {\n\t\t\tconst t = argTypeNames[i];\n\n\t\t\tif (t == \"\") {\n\t\t\t\tcontinue\n\t\t\t} else if (t == \"Redeemer\") {\n\t\t\t\tif (haveUnderscores && i != 0) {\n\t\t\t\t\tthrow main.typeError(`unexpected Redeemer type for arg ${i} of main`);\n\t\t\t\t}\n\n\t\t\t\tif (haveRedeemer) {\n\t\t\t\t\tthrow main.typeError(`duplicate 'Redeemer' argument`);\n\t\t\t\t} else if (haveScriptContext) {\n\t\t\t\t\tthrow main.typeError(`'Redeemer' must come before 'ScriptContext'`);\n\t\t\t\t} else {\n\t\t\t\t\thaveRedeemer = true;\n\t\t\t\t}\n\t\t\t} else if (t == \"ScriptContext\") {\n\t\t\t\tif (haveUnderscores && i != 1) {\n\t\t\t\t\tthrow main.typeError(`unexpected ScriptContext type for arg ${i} of main`);\n\t\t\t\t}\n\n\t\t\t\tif (haveScriptContext) {\n\t\t\t\t\tthrow main.typeError(`duplicate 'ScriptContext' argument`);\n\t\t\t\t} else {\n\t\t\t\t\thaveScriptContext = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow main.typeError(`illegal argument type, must be 'Redeemer' or 'ScriptContext', got '${t}'`);\n\t\t\t}\n\t\t}\n\n\t\tif (retTypes.length !== 1) {\n\t\t\tthrow main.typeError(`illegal number of return values for main, expected 1, got ${retTypes.length}`);\n\t\t} else if (!(retTypes[0] instanceof BoolType)) {\n\t\t\tthrow main.typeError(`illegal return type for main, expected 'Bool', got '${retTypes[0].toString()}'`);\n\t\t}\n\n\t\treturn topScope;\n\t}\n\n\t/**\n\t * @package\n\t * @param {string[]} parameters\n\t * @returns {IR} \n\t */\n\ttoIR(parameters = []) {\n\t\t/** @type {IR[]} */\n\t\tconst outerArgs = [];\n\n\t\t/** @type {IR[]} */\n\t\tconst innerArgs = [];\n\n\t\tfor (let t of this.mainFunc.argTypeNames) {\n\t\t\tif (t == \"Redeemer\") {\n\t\t\t\tinnerArgs.push(new IR(\"redeemer\"));\n\t\t\t\touterArgs.push(new IR(\"redeemer\"));\n\t\t\t} else if (t == \"ScriptContext\") {\n\t\t\t\tinnerArgs.push(new IR(\"ctx\"));\n\t\t\t\tif (outerArgs.length == 0) {\n\t\t\t\t\touterArgs.push(new IR(\"_\"));\n\t\t\t\t}\n\t\t\t\touterArgs.push(new IR(\"ctx\"));\n\t\t\t} else if (t == \"\") {\n\t\t\t\tinnerArgs.push(new IR(\"0\")); // use a literal to make life easier for the optimizer\n\t\t\t\touterArgs.push(new IR(\"_\"));\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t}\n\t\t}\n\n\t\twhile(outerArgs.length < 2) {\n\t\t\touterArgs.push(new IR(\"_\"));\n\t\t}\n\n\t\tconst ir = new IR([\n\t\t\tnew IR(`${TAB}/*entry point*/\\n${TAB}(`),\n\t\t\tnew IR(outerArgs).join(\", \"),\n\t\t\tnew IR(`) -> {\\n${TAB}${TAB}`),\n\t\t\tnew IR(`__core__ifThenElse(\\n${TAB}${TAB}${TAB}${this.mainPath}(`),\n\t\t\tnew IR(innerArgs).join(\", \"),\n\t\t\tnew IR(`),\\n${TAB}${TAB}${TAB}() -> {()},\\n${TAB}${TAB}${TAB}() -> {error(\"transaction rejected\")}\\n${TAB}${TAB})()`),\n\t\t\tnew IR(`\\n${TAB}}`),\n\t\t]);\n\n\t\treturn this.wrapEntryPoint(ir, parameters);\n\t}\n}\n\nclass DatumRedeemerProgram extends Program {\n\t/**\n\t * @param {number} purpose\n\t * @param {Module[]} modules\n\t */\n\tconstructor(purpose, modules) {\n\t\tsuper(purpose, modules);\n\t}\n\n\t/**\n\t * @package\n\t * @param {GlobalScope} scope \n\t * @returns {TopScope}\n\t */\n\tevalTypesInternal(scope) {\n\t\tconst topScope = super.evalTypesInternal(scope);\n\n\t\t// check the 'main' function\n\n\t\tconst main = this.mainFunc;\n\t\tconst argTypeNames = main.argTypeNames;\n\t\tconst retTypes = main.retTypes;\n\t\tconst haveUnderscores = argTypeNames.some(name => name == \"\");\n\t\tlet haveDatum = false;\n\t\tlet haveRedeemer = false;\n\t\tlet haveScriptContext = false;\n\n\t\tif (argTypeNames.length > 3) {\n\t\t\tthrow main.typeError(\"too many arguments for main\");\n\t\t} else if (haveUnderscores) {\n\t\t\tassert(argTypeNames.length == 3, \"expected 3 args\");\n\t\t} else if (argTypeNames.length != 3) {\n\t\t\tdeprecationWarning(\"main with variable arguments\", \"0.14.0\", \"use underscores instead\", \"https://www.hyperion-bt.org/helios-book/lang/script-structure.html#main-function-4\");\n\t\t}\n\n\t\tfor (let i = 0; i < argTypeNames.length; i++) {\n\t\t\tconst t = argTypeNames[i];\n\n\t\t\tif (t == \"\") {\n\t\t\t\tcontinue;\n\t\t\t} else if (t == \"Datum\") {\n\t\t\t\tif (haveUnderscores && i != 0) {\n\t\t\t\t\tthrow main.typeError(`unexpected Datum type for arg ${i} of main`);\n\t\t\t\t}\n\n\t\t\t\tif (haveDatum) {\n\t\t\t\t\tthrow main.typeError(\"duplicate 'Datum' argument\");\n\t\t\t\t} else if (haveRedeemer) {\n\t\t\t\t\tthrow main.typeError(\"'Datum' must come before 'Redeemer'\");\n\t\t\t\t} else if (haveScriptContext) {\n\t\t\t\t\tthrow main.typeError(\"'Datum' must come before 'ScriptContext'\");\n\t\t\t\t} else {\n\t\t\t\t\thaveDatum = true;\n\t\t\t\t}\n\t\t\t} else if (t == \"Redeemer\") {\n\t\t\t\tif (haveUnderscores && i != 1) {\n\t\t\t\t\tthrow main.typeError(`unexpected Redeemer type for arg ${i} of main`);\n\t\t\t\t}\n\n\t\t\t\tif (haveRedeemer) {\n\t\t\t\t\tthrow main.typeError(\"duplicate 'Redeemer' argument\");\n\t\t\t\t} else if (haveScriptContext) {\n\t\t\t\t\tthrow main.typeError(\"'Redeemer' must come before 'ScriptContext'\");\n\t\t\t\t} else {\n\t\t\t\t\thaveRedeemer = true;\n\t\t\t\t}\n\t\t\t} else if (t == \"ScriptContext\") {\n\t\t\t\tif (haveUnderscores && i != 2) {\n\t\t\t\t\tthrow main.typeError(`unexpected ScriptContext type for arg ${i} of main`);\n\t\t\t\t}\n\n\t\t\t\tif (haveScriptContext) {\n\t\t\t\t\tthrow main.typeError(\"duplicate 'ScriptContext' argument\");\n\t\t\t\t} else {\n\t\t\t\t\thaveScriptContext = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow main.typeError(`illegal argument type, must be 'Datum', 'Redeemer' or 'ScriptContext', got '${t}'`);\n\t\t\t}\n\t\t}\n\n\t\tif (retTypes.length !== 1) {\n\t\t\tthrow main.typeError(`illegal number of return values for main, expected 1, got ${retTypes.length}`);\n\t\t} else if (!(retTypes[0] instanceof BoolType)) {\n\t\t\tthrow main.typeError(`illegal return type for main, expected 'Bool', got '${retTypes[0].toString()}'`);\n\t\t}\n\n\t\treturn topScope;\n\t}\n\n\t/**\n\t * @package\n\t * @param {string[]} parameters\n\t * @returns {IR}\n\t */\n\ttoIR(parameters = []) {\n\t\t/** @type {IR[]} */\n\t\tconst outerArgs = [];\n\n\t\t/** @type {IR[]} */\n\t\tconst innerArgs = [];\n\n\t\tfor (let t of this.mainFunc.argTypeNames) {\n\t\t\tif (t == \"Datum\") {\n\t\t\t\tinnerArgs.push(new IR(\"datum\"));\n\t\t\t\touterArgs.push(new IR(\"datum\"));\n\t\t\t} else if (t == \"Redeemer\") {\n\t\t\t\tinnerArgs.push(new IR(\"redeemer\"));\n\t\t\t\tif (outerArgs.length == 0) {\n\t\t\t\t\touterArgs.push(new IR(\"_\"));\n\t\t\t\t}\n\t\t\t\touterArgs.push(new IR(\"redeemer\"));\n\t\t\t} else if (t == \"ScriptContext\") {\n\t\t\t\tinnerArgs.push(new IR(\"ctx\"));\n\t\t\t\twhile (outerArgs.length < 2) {\n\t\t\t\t\touterArgs.push(new IR(\"_\"));\n\t\t\t\t}\n\t\t\t\touterArgs.push(new IR(\"ctx\"));\n\t\t\t} else if (t == \"\") {\n\t\t\t\tinnerArgs.push(new IR(\"0\")); // use a literal to make life easier for the optimizer\n\t\t\t\touterArgs.push(new IR(\"_\"));\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t}\n\t\t}\n\n\t\twhile(outerArgs.length < 3) {\n\t\t\touterArgs.push(new IR(\"_\"));\n\t\t}\n\n\t\tconst ir = new IR([\n\t\t\tnew IR(`${TAB}/*entry point*/\\n${TAB}(`),\n\t\t\tnew IR(outerArgs).join(\", \"),\n\t\t\tnew IR(`) -> {\\n${TAB}${TAB}`),\n\t\t\tnew IR(`__core__ifThenElse(\\n${TAB}${TAB}${TAB}${this.mainPath}(`),\n\t\t\tnew IR(innerArgs).join(\", \"),\n\t\t\tnew IR(`),\\n${TAB}${TAB}${TAB}() -> {()},\\n${TAB}${TAB}${TAB}() -> {error(\"transaction rejected\")}\\n${TAB}${TAB})()`),\n\t\t\tnew IR(`\\n${TAB}}`),\n\t\t]);\n\n\t\treturn this.wrapEntryPoint(ir, parameters);\n\t}\n}\n\nclass TestingProgram extends Program {\n\t/**\n\t * @param {Module[]} modules \n\t */\n\tconstructor(modules) {\n\t\tsuper(ScriptPurpose.Testing, modules);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `testing ${this.name}\\n${super.toString()}`;\n\t}\n\n\t/**\n\t * @package\n\t * @returns {TopScope}\n\t */\n\tevalTypes() {\n\t\tconst scope = GlobalScope.new(ScriptPurpose.Testing);\n\n\t\tconst topScope = this.evalTypesInternal(scope);\n\n\t\t// main can have any arg types, and any return type \n\n\t\tif (this.mainFunc.retTypes.length > 1) {\n\t\t\tthrow this.mainFunc.typeError(\"program entry-point can only return one value\");\n\t\t}\n\n\t\treturn topScope;\n\t}\n\n\t/**\n\t * @package\n\t * @param {string[]} parameters\n\t * @returns {IR}\n\t */\n\ttoIR(parameters = []) {\n\t\tconst innerArgs = this.mainFunc.argTypes.map((t, i) => {\n\t\t\tif (t instanceof BoolType) {\n\t\t\t\treturn new IR(`__helios__common__unBoolData(arg${i})`);\n\t\t\t} else {\n\t\t\t\treturn new IR(`arg${i}`);\n\t\t\t}\n\t\t});\n\n\t\tlet ir = new IR([\n\t\t\tnew IR(`${this.mainPath}(`),\n\t\t\tnew IR(innerArgs).join(\", \"),\n\t\t\tnew IR(\")\"),\n\t\t]);\n\n\t\tif (this.mainFunc.retTypes[0] instanceof BoolType) {\n\t\t\tir = new IR([\n\t\t\t\tnew IR(\"__helios__common__boolData(\"),\n\t\t\t\tir,\n\t\t\t\tnew IR(\")\")\n\t\t\t]);\n\t\t}\n\n\t\tconst outerArgs = this.mainFunc.argTypes.map((_, i) => new IR(`arg${i}`));\n\n\t\tir = new IR([\n\t\t\tnew IR(`${TAB}/*entry point*/\\n${TAB}(`),\n\t\t\tnew IR(outerArgs).join(\", \"),\n\t\t\tnew IR(`) -> {\\n${TAB}${TAB}`),\n\t\t\tir,\n\t\t\tnew IR(`\\n${TAB}}`),\n\t\t]);\n\n\t\treturn this.wrapEntryPoint(ir, parameters);\n\t}\n}\n\nclass SpendingProgram extends DatumRedeemerProgram {\n\t/**\n\t * @param {Module[]} modules\n\t */\n\tconstructor(modules) {\n\t\tsuper(ScriptPurpose.Spending, modules);\n\t}\n\n\ttoString() {\n\t\treturn `spending ${this.name}\\n${super.toString()}`;\n\t}\n\n\t/**\n\t * @package\n\t * @returns {TopScope}\n\t */\n\tevalTypes() {\n\t\tconst scope = GlobalScope.new(ScriptPurpose.Spending);\n\n\t\treturn this.evalTypesInternal(scope);\t\n\t}\n}\n\nclass MintingProgram extends RedeemerProgram {\n\t/**\n\t * @param {Module[]} modules \n\t */\n\tconstructor(modules) {\n\t\tsuper(ScriptPurpose.Minting, modules);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `minting ${this.name}\\n${super.toString()}`;\n\t}\n\n\t/**\n\t * @package\n\t * @returns {TopScope}\n\t */\n\tevalTypes() {\n\t\tconst scope = GlobalScope.new(ScriptPurpose.Minting);\n\n\t\treturn this.evalTypesInternal(scope);\t\n\t}\n}\n\nclass StakingProgram extends RedeemerProgram {\n\t/**\n\t * @param {Module[]} modules \n\t */\n\tconstructor(modules) {\n\t\tsuper(ScriptPurpose.Staking, modules);\n\t}\n\n\ttoString() {\n\t\treturn `staking ${this.name}\\n${super.toString()}`;\n\t}\n\n\t/**\n\t * @package\n\t * @returns {TopScope}\n\t */\n\tevalTypes() {\n\t\tconst scope = GlobalScope.new(ScriptPurpose.Staking);\n\n\t\treturn this.evalTypesInternal(scope);\t\n\t}\n}\n\n\n///////////////////////\n// Section 25: Tx types\n///////////////////////\n\nclass Tx extends CborData {\n\t/**\n\t * @type {TxBody}\n\t */\n\t#body;\n\n\t/**\n\t * @type {TxWitnesses}\n\t */\n\t#witnesses;\n\n\t/**\n\t * @type {boolean}\n\t */\n\t#valid;\n\n\t/** \n\t * @type {?TxMetadata} \n\t */\n\t#metadata;\n\n\t// the following field(s) aren't used by the serialization (only for building)\n\t/**\n\t * Upon finalization the slot is calculated and stored in the body\n\t * @type {?Date} \n\t */\n\t#validTo;\n\n\t/**\n\t * Upon finalization the slot is calculated and stored in the body \n\t *  @type {?Date} \n\t */\n\t#validFrom;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.#body = new TxBody();\n\t\tthis.#witnesses = new TxWitnesses();\n\t\tthis.#valid = false; // building is only possible if valid==false\n\t\tthis.#metadata = null;\n\t\tthis.#validTo = null;\n\t\tthis.#validFrom = null;\n\t}\n\n\t/**\n\t * @type {TxBody}\n\t */\n\tget body() {\n\t\treturn this.#body;\n\t}\n\n\t/**\n\t * @type {number[]}\n\t */\n\tget bodyHash() {\n\t\treturn Crypto.blake2b(this.#body.toCbor());\n\t}\n\n\t/**\n\t * @type {TxWitnesses}\n\t */\n\tget witnesses() {\n\t\treturn this.#witnesses;\n\t}\n\n\t/**\n\t * Used by emulator to check if tx is valid.\n\t * @param {bigint} slot\n\t * @returns {boolean}\n\t */\n\tisValid(slot) {\n\t\tif (!this.#valid) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.#body.isValid(slot);\n\t\t}\n\t}\n\n\t/** \n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeTuple([\n\t\t\tthis.#body.toCbor(),\n\t\t\tthis.#witnesses.toCbor(),\n\t\t\tCborData.encodeBool(this.#valid),\n\t\t\tthis.#metadata === null ? CborData.encodeNull() : this.#metadata.toCbor(),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {Tx}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tbytes = bytes.slice();\n\n\t\tlet tx = new Tx();\n\n\t\tlet n = CborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\ttx.#body = TxBody.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\ttx.#witnesses = TxWitnesses.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\ttx.#valid = CborData.decodeBool(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tif (CborData.isNull(fieldBytes)) {\n\t\t\t\t\t\tCborData.decodeNull(fieldBytes);\n\n\t\t\t\t\t\ttx.#metadata = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttx.#metadata = TxMetadata.fromCbor(fieldBytes);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"bad tuple size\");\n\t\t\t}\n\t\t});\n\n\t\tassert(n == 4);\n\t\tassert(bytes.length == 0);\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\tbody: this.#body.dump(),\n\t\t\twitnesses: this.#witnesses.dump(),\n\t\t\tvalid: this.#valid,\n\t\t\tmetadata: this.#metadata !== null ? this.#metadata.dump() : null\n\t\t};\n\t}\n\n\t/**\n\t * @param {Date} t\n\t * @returns {Tx}\n\t */\n\tvalidFrom(t) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#validFrom = t;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {Date} t\n\t * @returns {Tx}\n\t */\n\tvalidTo(t) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#validTo = t;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Throws error if assets of given mph are already being minted in this transaction\n\t * @param {MintingPolicyHash} mph \n\t * @param {[number[] | string, bigint][]} tokens - list of pairs of [tokenName, quantity], tokenName can be list of bytes or hex-string\n\t * @param {UplcDataValue | UplcData} redeemer\n\t * @returns {Tx}\n\t */\n\tmintTokens(mph, tokens, redeemer) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#body.addMint(mph, tokens.map(([name, amount]) => {\n\t\t\tif (typeof name == \"string\" ) {\n\t\t\t\treturn [hexToBytes(name), amount];\n\t\t\t} else {\n\t\t\t\treturn [name, amount];\n\t\t\t}\n\t\t}));\n\n\t\tthis.#witnesses.addMintingRedeemer(mph, UplcDataValue.unwrap(redeemer));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {UTxO} input\n\t * @param {?(UplcDataValue | UplcData)} redeemer\n\t * @returns {Tx}\n\t */\n\taddInput(input, redeemer = null) {\n\t\tassert(!this.#valid);\n\n\t\tif (input.origOutput === null) {\n\t\t\tthrow new Error(\"TxInput.origOutput must be set when building transaction\");\n\t\t} else {\n\t\t\tvoid this.#body.addInput(input.asTxInput);\n\n\t\t\tif (redeemer !== null) {\n\t\t\t\tassert(input.origOutput.address.validatorHash !== null, \"input isn't locked by a script\");\n\n\t\t\t\tthis.#witnesses.addSpendingRedeemer(input.asTxInput, UplcDataValue.unwrap(redeemer));\n\n\t\t\t\tif (input.origOutput.datum === null) {\n\t\t\t\t\tthrow new Error(\"expected non-null datum\");\n\t\t\t\t} else {\n\t\t\t\t\tlet datum = input.origOutput.datum;\n\n\t\t\t\t\tif (datum instanceof HashedDatum) {\n\t\t\t\t\t\tlet datumData = datum.data;\n\t\t\t\t\t\tif (datumData === null) {\n\t\t\t\t\t\t\tthrow new Error(\"expected non-null datum data\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.#witnesses.addDatumData(datumData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassert(input.origOutput.address.pubKeyHash !== null, \"input is locked by a script, but redeemer isn't specified\");\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {UTxO[]} inputs\n\t * @param {?(UplcDataValue | UplcData)} redeemer\n\t * @returns {Tx}\n\t */\n\taddInputs(inputs, redeemer = null) {\n\t\tfor (let input of inputs) {\n\t\t\tthis.addInput(input, redeemer);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {TxRefInput} input\n\t * @param {?UplcProgram} refScript\n\t * @returns {Tx}\n\t */\n\taddRefInput(input, refScript = null) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#body.addRefInput(input);\n\n\t\tif (refScript !== null) {\n\t\t\tthis.#witnesses.attachScript(refScript, true);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {TxRefInput[]} inputs\n\t * @returns {Tx}\n\t */\n\taddRefInputs(inputs) {\n\t\tfor (let input of inputs) {\n\t\t\tthis.addRefInput(input);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {TxOutput} output \n\t * @returns {Tx}\n\t */\n\taddOutput(output) {\n\t\tassert(!this.#valid);\n\t\t\n\t\t// min lovelace is checked during build, because \n\t\tthis.#body.addOutput(output);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {TxOutput[]} outputs \n\t * @returns {Tx}\n\t */\n\taddOutputs(outputs) {\n\t\tfor (let output of outputs) {\n\t\t\tthis.addOutput(output);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {PubKeyHash} hash\n\t * @returns {Tx}\n\t */\n\taddSigner(hash) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#body.addSigner(hash);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unused scripts are detected during finalize(), in which case an error is thrown\n\t * Throws error if script was already added before\n\t * @param {UplcProgram} program\n\t * @returns {Tx}\n\t */\n\tattachScript(program) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#witnesses.attachScript(program);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Usually adding only one collateral input is enough\n\t * Must be less than the limit in networkParams (eg. 3), or else an error is thrown during finalization\n\t * @param {UTxO} input \n\t * @returns {Tx}\n\t */\n\taddCollateral(input) {\n\t\tassert(!this.#valid);\n\n\t\tthis.#body.addCollateral(input.asTxInput);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates tx fee (including script execution)\n\t * Shouldn't be used directly\n\t * @param {NetworkParams} networkParams\n\t * @returns {bigint}\n\t */\n\testimateFee(networkParams) {\n\t\tlet [a, b] = networkParams.txFeeParams;\n\n\t\tif (!this.#valid) {\n\t\t\t// add dummy signatures\n\t\t\tlet nUniquePubKeyHashes = this.#body.countUniqueSigners();\n\t\t\t\n\t\t\tthis.#witnesses.addDummySignatures(nUniquePubKeyHashes);\n\t\t}\n\n\t\tlet size = this.toCbor().length;\n\n\t\tif (!this.#valid) {\n\t\t\t// clean up the dummy signatures\n\t\t\tthis.#witnesses.removeDummySignatures();\n\t\t}\n\n\t\tlet sizeFee = BigInt(a) + BigInt(size)*BigInt(b);\n\n\t\tlet exFee = this.#witnesses.estimateFee(networkParams);\n\n\t\treturn sizeFee + exFee;\n\t}\n\n\t/**\n\t * Iterates until fee is exact\n\t * Shouldn't be used directly\n\t * @param {NetworkParams} networkParams\n\t * @param {bigint} fee\n\t * @returns {bigint}\n\t */\n\tsetFee(networkParams, fee) {\n\t\tlet oldFee = this.#body.fee;\n\n\t\twhile (oldFee != fee) {\n\t\t\tthis.#body.setFee(fee);\n\n\t\t\toldFee = fee;\n\n\t\t\tfee = this.estimateFee(networkParams);\n\t\t}\n\n\t\treturn fee;\n\t}\n\n\t/**\n\t * Checks that all necessary scripts are included, and that all included scripts are used\n\t * Shouldn't be used directly\n\t */\n\tcheckScripts() {\n\t\tlet scripts = this.#witnesses.scripts;\n\n\t\t/**\n\t\t * @type {Set<string>}\n\t\t */\n\t\tconst currentScripts = new Set();\n\t\tscripts.forEach(script => {\n\t\t\tcurrentScripts.add(bytesToHex(script.hash()))\n\t\t})\n\n\t\t/** \n\t\t * @type {Map<string, number>} \n\t\t */\n\t\tlet wantedScripts = new Map();\n\n\t\tthis.#body.collectScriptHashes(wantedScripts);\n\n\t\tif (wantedScripts.size < scripts.length) {\n\t\t\tthrow new Error(\"too many scripts included\");\n\t\t} else if (wantedScripts.size > scripts.length) {\n\t\t\twantedScripts.forEach((value, key) => {\n\t\t\t\tif (!currentScripts.has(key)) {\n\t\t\t\t\tif (value >= 0) {\n\t\t\t\t\t\tthrow new Error(`missing script for input ${value}`);\n\t\t\t\t\t} else if (value < 0) {\n\t\t\t\t\t\tthrow new Error(`missing script for minting policy ${-value-1}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tcurrentScripts.forEach((key) => {\n\t\t\tif (!wantedScripts.has(key)) {\n\t\t\t\tconsole.log(wantedScripts, currentScripts)\n\t\t\t\tthrow new Error(\"unused script\");\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams \n\t * @param {Address} changeAddress\n\t * @returns {Promise<void>}\n\t */\n\tasync executeRedeemers(networkParams, changeAddress) {\n\t\tawait this.#witnesses.executeRedeemers(networkParams, this.#body, changeAddress);\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams \n\t * @returns {Promise<void>}\n\t */\n\tasync checkExecutionBudgets(networkParams) {\n\t\tawait this.#witnesses.checkExecutionBudgets(networkParams, this.#body);\n\t}\n\n\t/**\n\t * @param {Address} changeAddress \n\t */\n\tbalanceAssets(changeAddress) {\n\t\tconst inputAssets = this.#body.sumInputAndMintedAssets();\n\n\t\tconst outputAssets = this.#body.sumOutputAssets();\n\n\t\tif (inputAssets.eq(outputAssets)) {\n\t\t\treturn;\n\t\t} else if (outputAssets.ge(inputAssets)) {\n\t\t\tthrow new Error(\"not enough input assets\");\n\t\t} else {\n\t\t\tconst diff = inputAssets.sub(outputAssets);\n\n\t\t\tconst changeOutput = new TxOutput(changeAddress, new Value(0n, diff));\n\n\t\t\tthis.#body.addOutput(changeOutput);\n\t\t}\n\t}\n\n\t/**\n\t * Calculate the base fee which will be multiplied by the required min collateral percentage \n\t * @param {NetworkParams} networkParams \n\t * @param {Address} changeAddress \n\t * @param {UTxO[]} spareUtxos \n\t */\n\testimateCollateralBaseFee(networkParams, changeAddress, spareUtxos) {\n\t\tassert(config.N_DUMMY_INPUTS == 1 || config.N_DUMMY_INPUTS == 2, \"expected N_DUMMY_INPUTs == 1 or N_DUMMY_INPUTS == 2\");\n\n\t\t// create the collateral return output (might not actually be added if there isn't enough lovelace)\n\t\tconst dummyOutput = new TxOutput(changeAddress, new Value(0n));\n\t\tdummyOutput.correctLovelace(networkParams);\n\n\t\t// some dummy UTxOs on to be able to correctly calculate the collateral (assuming it uses full body fee)\n\t\tconst dummyCollateral = spareUtxos.map(spare => spare.asTxInput).concat(this.#body.inputs).slice(0, 3);\n\t\tdummyCollateral.forEach(input => {\n\t\t\tthis.#body.collateral.push(input);\n\t\t});\n\n\t\tconst dummyInputs = dummyCollateral.slice(0, config.N_DUMMY_INPUTS);\n\n\t\tthis.#body.setCollateralReturn(dummyOutput);\n\t\tdummyInputs.forEach(dummyInput => this.#body.addInput(dummyInput, false));\n\t\tthis.#body.addOutput(dummyOutput);\n\n\t\tconst baseFee = this.estimateFee(networkParams);\n\n\t\t// remove the dummy inputs and outputs\n\t\twhile(this.#body.collateral.length) {\n\t\t\tthis.#body.collateral.pop();\n\t\t}\n\t\tthis.#body.setCollateralReturn(null);\n\t\tdummyInputs.forEach(dummyInput => this.#body.removeInput(dummyInput));\n\t\tthis.#body.removeOutput(dummyOutput);\n\n\t\treturn baseFee;\n\t}\n\t\n\t/**\n\t * @param {NetworkParams} networkParams\n\t * @param {Address} changeAddress\n\t * @param {UTxO[]} spareUtxos\n\t */\n\tbalanceCollateral(networkParams, changeAddress, spareUtxos) {\n\t\t// don't do this step if collateral was already added explicitly\n\t\tif (this.#body.collateral.length > 0 || !this.isSmart()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst baseFee = this.estimateCollateralBaseFee(networkParams, changeAddress, spareUtxos);\n\n\t\tconst minCollateral = ((baseFee*BigInt(networkParams.minCollateralPct)) + 100n)/100n; // integer division that rounds up\n\n\t\tlet collateral = 0n;\n\t\t/**\n\t\t * @type {TxInput[]}\n\t\t */\n\t\tconst collateralInputs = [];\n\n\t\t/**\n\t\t * @param {TxInput[]} inputs \n\t\t */\n\t\tfunction addCollateralInputs(inputs) {\n\t\t\t// first try using the UTxOs that already form the inputs\n\t\t\tconst cleanInputs = inputs.filter(utxo => utxo.value.assets.isZero()).sort((a, b) => Number(a.value.lovelace - b.value.lovelace));\n\n\t\t\tfor (let input of cleanInputs) {\n\t\t\t\tif (collateral > minCollateral) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\twhile (collateralInputs.length >= networkParams.maxCollateralInputs) {\n\t\t\t\t\tcollateralInputs.shift();\n\t\t\t\t}\n\t\n\t\t\t\tcollateralInputs.push(input);\n\t\t\t\tcollateral += input.value.lovelace;\n\t\t\t}\n\t\t}\n\t\t\n\t\taddCollateralInputs(this.#body.inputs.slice());\n\n\t\taddCollateralInputs(spareUtxos.map(utxo => utxo.asTxInput));\n\n\t\t// create the collateral return output if there is enough lovelace\n\t\tconst changeOutput = new TxOutput(changeAddress, new Value(0n));\n\t\tchangeOutput.correctLovelace(networkParams);\n\n\t\tif (collateral < minCollateral) {\n\t\t\tthrow new Error(\"unable to find enough collateral input\");\n\t\t} else {\n\t\t\tif (collateral > minCollateral + changeOutput.value.lovelace) {\n\t\t\t\tchangeOutput.setValue(new Value(0n));\n\n\t\t\t\tchangeOutput.correctLovelace(networkParams);\n\n\t\t\t\tif (collateral > minCollateral + changeOutput.value.lovelace) {\n\t\t\t\t\tchangeOutput.setValue(new Value(collateral - minCollateral));\n\t\t\t\t\tthis.#body.setCollateralReturn(changeOutput);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(`not setting collateral return: collateral input too low (${collateral})`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcollateralInputs.forEach(utxo => {\n\t\t\tthis.#body.addCollateral(utxo);\n\t\t});\n\t}\n\n\t/**\n\t * Calculates fee and balances transaction by sending an output back to changeAddress\n\t * First assumes that change output isn't needed, and if that assumption doesn't result in a balanced transaction the change output is created.\n\t * Iteratively increments the fee because the fee increase the tx size which in turn increases the fee (always converges within two steps though).\n\t * Throws error if transaction can't be balanced.\n\t * Shouldn't be used directly\n\t * @param {NetworkParams} networkParams \n\t * @param {Address} changeAddress\n\t * @param {UTxO[]} spareUtxos - used when there are yet enough inputs to cover everything (eg. due to min output lovelace requirements, or fees)\n\t */\n\tbalanceLovelace(networkParams, changeAddress, spareUtxos) {\n\t\t// don't include the changeOutput in this value\n\t\tlet nonChangeOutputValue = this.#body.sumOutputValue();\n\n\t\t// assume a change output is always needed\n\t\tconst changeOutput = new TxOutput(changeAddress, new Value(0n));\n\n\t\tchangeOutput.correctLovelace(networkParams);\n\n\t\tthis.#body.addOutput(changeOutput);\n\t\t\n\t\tconst minLovelace = changeOutput.value.lovelace;\n\n\t\tlet fee = this.setFee(networkParams, this.estimateFee(networkParams));\n\t\t\n\t\tlet inputValue = this.#body.sumInputAndMintedValue();\n\n\t\tlet feeValue = new Value(fee);\n\n\t\tnonChangeOutputValue = feeValue.add(nonChangeOutputValue);\n\n\t\tspareUtxos = spareUtxos.filter(utxo => utxo.value.assets.isZero());\n\t\t\n\t\t// use some spareUtxos if the inputValue doesn't cover the outputs and fees\n\n\t\twhile (!inputValue.ge(nonChangeOutputValue.add(changeOutput.value))) {\n\t\t\tlet spare = spareUtxos.pop();\n\n\t\t\tif (spare === undefined) {\n\t\t\t\tthrow new Error(\"transaction doesn't have enough inputs to cover the outputs + fees + minLovelace\");\n\t\t\t} else {\n\t\t\t\tthis.#body.addInput(spare.asTxInput);\n\n\t\t\t\tinputValue = inputValue.add(spare.value);\n\t\t\t}\n\t\t}\n\n\t\t// use to the exact diff, which is >= minLovelace\n\t\tlet diff = inputValue.sub(nonChangeOutputValue);\n\n\t\tassert(diff.assets.isZero(), \"unexpected unbalanced assets\");\n\t\tassert(diff.lovelace >= minLovelace);\n\n\t\tchangeOutput.setValue(diff);\n\n\t\t// we can mutate the lovelace value of 'changeOutput' until we have a balanced transaction with precisely the right fee\n\n\t\tlet oldFee = fee;\n\t\tfee = this.estimateFee(networkParams);\n\n\t\twhile (fee != oldFee) {\n\t\t\tthis.#body.setFee(fee);\n\n\t\t\tlet diffFee = fee - oldFee;\n\n\t\t\t// use some more spareUtxos\n\t\t\twhile (diffFee  > (changeOutput.value.lovelace - minLovelace)) {\n\t\t\t\tlet spare = spareUtxos.pop();\n\n\t\t\t\tif (spare === undefined) {\n\t\t\t\t\tthrow new Error(\"not enough clean inputs to cover fees\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.#body.addInput(spare.asTxInput);\n\n\t\t\t\t\tinputValue = inputValue.add(spare.value);\n\n\t\t\t\t\tdiff = diff.add(spare.value);\n\n\t\t\t\t\tchangeOutput.setValue(diff);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchangeOutput.value.setLovelace(changeOutput.value.lovelace - diffFee);\n\n\t\t\t// changeOutput.value.lovelace should still be >= minLovelace at this point\n\n\t\t\toldFee = fee;\n\n\t\t\tfee = this.estimateFee(networkParams);\n\t\t}\n\t}\n\n\t/**\n\t * Shouldn't be used directly\n\t * @param {NetworkParams} networkParams\n\t */\n\tsyncScriptDataHash(networkParams) {\n\t\tconst hash = this.#witnesses.calcScriptDataHash(networkParams);\n\n\t\tthis.#body.setScriptDataHash(hash);\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisSmart() {\n\t\treturn this.#witnesses.scripts.length > 0;\n\t}\n\n\t/**\n\t * Throws an error if there isn't enough collateral\n\t * Also throws an error if the script doesn't require collateral, but collateral was actually included\n\t * Shouldn't be used directly\n\t * @param {NetworkParams} networkParams \n\t */\n\tcheckCollateral(networkParams) {\n\t\tif (this.isSmart()) {\n\t\t\tlet minCollateralPct = networkParams.minCollateralPct;\n\n\t\t\t// only use the exBudget \n\n\t\t\tconst fee = this.#body.fee;\n\n\t\t\tthis.#body.checkCollateral(networkParams, BigInt(Math.ceil(minCollateralPct*Number(fee)/100.0)));\n\t\t} else {\n\t\t\tthis.#body.checkCollateral(networkParams, null);\n\t\t}\n\t}\n\n\t/**\n\t * Throws error if tx is too big\n\t * Shouldn't be used directly\n\t * @param {NetworkParams} networkParams \n\t */\n\tcheckSize(networkParams) {\n\t\tlet size = this.toCbor().length;\n\n\t\tif (size > networkParams.maxTxSize) {\n\t\t\tthrow new Error(\"tx too big\");\n\t\t}\n\t}\n\n\t/**\n\t * Final check that fee is big enough\n\t * @param {NetworkParams} networkParams \n\t */\n\tcheckFee(networkParams) {\n\t\tassert(this.estimateFee(networkParams) <= this.#body.fee, \"fee too small\");\n\t}\n\n\t/**\n\t * Assumes transaction hasn't yet been signed by anyone (i.e. witnesses.signatures is empty)\n\t * Mutates 'this'\n\t * Note: this is an async function so that a debugger can optionally be attached in the future\n\t * @param {NetworkParams} networkParams\n\t * @param {Address}       changeAddress\n\t * @param {UTxO[]}        spareUtxos - might be used during balancing if there currently aren't enough inputs\n\t * @returns {Promise<Tx>}\n\t */\n\tasync finalize(networkParams, changeAddress, spareUtxos = []) {\n\t\tassert(!this.#valid);\n\n\t\tif (this.#metadata !== null) {\n\t\t\t// Calculate the Metadata hash and add to the TxBody\n\t\t\tthis.#body.setMetadataHash(\n\t\t\t\tnew Hash(Crypto.blake2b(this.#metadata.toCbor()))\n\t\t\t);\n\t\t}\n\n\t\tif (this.#validTo !== null) {\n\t\t\tthis.#body.validTo(\n\t\t\t\tnetworkParams.timeToSlot(BigInt(this.#validTo.getTime()))\n\t\t\t);\n\t\t}\n\n\t\tif (this.#validFrom !== null) {\n\t\t\tthis.#body.validFrom(networkParams.timeToSlot(BigInt(this.#validFrom.getTime())));\n\t\t}\n\n\t\t// inputs, minted assets, and withdrawals must all be in a particular order\n\t\tthis.#body.sort();\n\n\t\t// after inputs etc. have been sorted we can calculate the indices of the redeemers referring to those inputs\n\t\tthis.#witnesses.updateRedeemerIndices(this.#body);\n\n\t\tthis.checkScripts();\n\n\t\t// balance the non-ada assets\n\t\tthis.balanceAssets(changeAddress)\n\n\t\t// make sure that each output contains the necessary minimum amount of lovelace\t\n\t\tthis.#body.correctOutputs(networkParams);\n\n\t\t// the scripts executed at this point will not see the correct txHash nor the correct fee\n\t\tawait this.executeRedeemers(networkParams, changeAddress);\n\n\t\t// balance collateral (if collateral wasn't already set manually)\n\t\tthis.balanceCollateral(networkParams, changeAddress, spareUtxos.slice());\n\n\t\t// balance the lovelace\n\t\tthis.balanceLovelace(networkParams, changeAddress, spareUtxos.slice());\n\n\t\t// run updateRedeemerIndices again because new inputs may have been added and sorted\n\t\tthis.#witnesses.updateRedeemerIndices(this.#body);\n\n\t\t// we can only sync scriptDataHash after the redeemer execution costs have been estimated, and final redeemer indices have been determined\n\t\tthis.syncScriptDataHash(networkParams);\n\n\t\t// a bunch of checks\n\t\tthis.#body.checkOutputs(networkParams);\n\n\t\tthis.checkCollateral(networkParams);\n\n\t\tawait this.checkExecutionBudgets(networkParams);\n\n\t\tthis.#witnesses.checkExecutionBudgetLimits(networkParams);\n\n\t\tthis.checkSize(networkParams);\n\n\t\tthis.checkFee(networkParams);\n\n\t\tthis.#valid = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Throws an error if verify==true and signature is invalid \n\t * Adding many signatures might be a bit slow\n\t * @param {Signature} signature \n\t * @param {boolean} verify\n\t * @returns {Tx}\n\t */\n\taddSignature(signature, verify = true) {\n\t\tassert(this.#valid);\n\n\t\tif (verify) {\n\t\t\tsignature.verify(this.bodyHash);\n\t\t}\n\n\t\tthis.#witnesses.addSignature(signature);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Throws an error if verify==true and any of the signatures is invalid\n\t * Adding many signatures might be a bit slow\n\t * @param {Signature[]} signatures \n\t * @param {boolean} verify \n\t * @returns {Tx}\n\t */\n\taddSignatures(signatures, verify = true) {\n\t\tfor (let s of signatures) {\n\t\t\tthis.addSignature(s, verify);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {number} tag\n\t * @param {Metadata} data\n\t * @returns {Tx}\n\t */\n\taddMetadata(tag, data) {\n\t\tif (this.#metadata === null) {\n\t\t\tthis.#metadata = new TxMetadata();\n\t\t}\n\n\t\tthis.#metadata.add(tag, data);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {TxId}\n\t */\n\tid() {\n\t\tassert(this.#valid, \"can't get TxId of unfinalized Tx\");\n\t\treturn new TxId(this.bodyHash);\n\t}\n}\n\n/**\n * inputs, minted assets, and withdrawals need to be sorted in order to form a valid transaction\n */\nclass TxBody extends CborData {\n\t/**\n\t * Inputs must be sorted before submitting (first by TxId, then by utxoIndex)\n\t * Spending redeemers must point to the sorted inputs\n\t * @type {TxInput[]} \n\t */\n\t#inputs;\n\n\t/** @type {TxOutput[]} */\n\t#outputs;\n\n\t/** @type {bigint} in lovelace */\n\t#fee;\n\n\t/** @type {?bigint} */\n\t#lastValidSlot;\n\n\t/** @type {DCert[]} */\n\t#certs;\n\n\t/**\n\t * Withdrawals must be sorted by address\n\t * Stake rewarding redeemers must point to the sorted withdrawals\n\t * @type {Map<Address, bigint>} \n\t */\n\t#withdrawals;\n\n\t/** @type {?bigint} */\n\t#firstValidSlot;\n\n\t/**\n\t * Internally the assets must be sorted by mintingpolicyhash\n\t * Minting redeemers must point to the sorted minted assets\n\t * @type {Assets} \n\t */\n\t#minted;\n\n\t/** @type {?Hash} */\n\t#scriptDataHash;\n\n\t/** @type {TxInput[]} */\n\t#collateral;\n\n\t/** @type {PubKeyHash[]} */\n\t#signers;\n\n\t/** @type {?TxOutput} */\n\t#collateralReturn;\n\n\t/** @type {bigint} */\n\t#totalCollateral;\n\n\t/** @type {TxInput[]} */\n\t#refInputs;\n\n\t/** @type {?Hash} */\n\t#metadataHash;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.#inputs = [];\n\t\tthis.#outputs = [];\n\t\tthis.#fee = 0n;\n\t\tthis.#lastValidSlot = null;\n\t\tthis.#certs = [];\n\t\tthis.#withdrawals = new Map();\n\t\tthis.#firstValidSlot = null;\n\t\tthis.#minted = new Assets(); // starts as zero value (i.e. empty map)\n\t\tthis.#scriptDataHash = new Hash((new Array(32)).fill(0)); // initially dummy for more correct body size, (re)calculated upon finalization\n\t\tthis.#collateral = [];\n\t\tthis.#signers = [];\n\t\tthis.#collateralReturn = null;\n\t\tthis.#totalCollateral = 0n; // doesn't seem to be used anymore\n\t\tthis.#refInputs = [];\n\t\tthis.#metadataHash = null;\n\t}\n\n\t/**\n\t * @type {TxInput[]}\n\t */\n\tget inputs() {\n\t\treturn this.#inputs;\n\t}\n\n\t/**\n\t * @type {TxOutput[]}\n\t */\n\tget outputs() {\n\t\treturn this.#outputs;\n\t}\n\n\tget fee() {\n\t\treturn this.#fee;\n\t}\n\n\t/**\n\t * @param {bigint} fee\n\t */\n\tsetFee(fee) {\n\t\tthis.#fee = fee;\n\t}\n\n\t/**\n\t * @type {Assets}\n\t */\n\tget minted() {\n\t\treturn this.#minted;\n\t}\n\n\t/**\n\t * @type {TxInput[]}\n\t */\n\tget collateral() {\n\t\treturn this.#collateral;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\t/**\n\t\t * @type {Map<number, number[]>}\n\t\t */\n\t\tlet object = new Map();\n\n\t\tobject.set(0, CborData.encodeDefList(this.#inputs));\n\t\tobject.set(1, CborData.encodeDefList(this.#outputs));\n\t\tobject.set(2, CborData.encodeInteger(this.#fee));\n\t\t\n\t\tif (this.#lastValidSlot !== null) {\n\t\t\tobject.set(3, CborData.encodeInteger(this.#lastValidSlot));\n\t\t}\n\n\t\tif (this.#certs.length != 0) {\n\t\t\tobject.set(4, CborData.encodeDefList(this.#certs));\n\t\t}\n\n\t\tif (this.#withdrawals.size != 0) {\n\t\t\tthrow new Error(\"not yet implemented\");\n\t\t}\n\n\t\tif (this.#metadataHash !== null) {\n\t\t\tobject.set(7, this.#metadataHash.toCbor());\n\t\t}\n\n\t\tif (this.#firstValidSlot !== null) {\n\t\t\tobject.set(8, CborData.encodeInteger(this.#firstValidSlot));\n\t\t}\n\n\t\tif (!this.#minted.isZero()) {\n\t\t\tobject.set(9, this.#minted.toCbor());\n\t\t}\n\n\t\tif (this.#scriptDataHash !== null) {\n\t\t\tobject.set(11, this.#scriptDataHash.toCbor());\n\t\t}\n\n\t\tif (this.#collateral.length != 0) {\n\t\t\tobject.set(13, CborData.encodeDefList(this.#collateral));\n\t\t}\n\n\t\tif (this.#signers.length != 0) {\n\t\t\tobject.set(14, CborData.encodeDefList(this.#signers));\n\t\t}\n\n\t\t// what is NetworkId used for?\n\t\t//object.set(15, CborData.encodeInteger(2n));\n\n\t\tif (this.#collateralReturn !== null) {\n\t\t\tobject.set(16, this.#collateralReturn.toCbor());\n\t\t}\n\n\t\tif (this.#totalCollateral > 0n) {\n\t\t\tobject.set(17, CborData.encodeInteger(this.#totalCollateral));\n\t\t}\n\n\t\tif (this.#refInputs.length != 0) {\n\t\t\tobject.set(18, CborData.encodeDefList(this.#refInputs));\n\t\t}\n\n\t\treturn CborData.encodeObject(object);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {TxBody}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tlet txBody = new TxBody();\n\n\t\tlet done = CborData.decodeObject(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxBody.#inputs.push(TxInput.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxBody.#outputs.push(TxOutput.fromCbor(itemBytes));\n\t\t\t\t\t})\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\ttxBody.#fee = CborData.decodeInteger(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\ttxBody.#lastValidSlot = CborData.decodeInteger(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxBody.#certs.push(DCert.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthrow new Error(\"not yet implemented\");\n\t\t\t\tcase 6:\n\t\t\t\t\tthrow new Error(\"not yet implemented\");\n\t\t\t\tcase 7:\n\t\t\t\t\ttxBody.#metadataHash = Hash.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\ttxBody.#firstValidSlot = CborData.decodeInteger(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\ttxBody.#minted = Assets.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 10:\n\t\t\t\t\tthrow new Error(\"unhandled field\");\n\t\t\t\tcase 11:\n\t\t\t\t\ttxBody.#scriptDataHash = Hash.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 12:\n\t\t\t\t\tthrow new Error(\"unhandled field\");\n\t\t\t\tcase 13:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxBody.#collateral.push(TxInput.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 14:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxBody.#signers.push(PubKeyHash.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 15:\n\t\t\t\t\tassert(CborData.decodeInteger(fieldBytes) == 2n);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 16:\n\t\t\t\t\ttxBody.#collateralReturn = TxOutput.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 17:\n\t\t\t\t\ttxBody.#totalCollateral = CborData.decodeInteger(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 18:\n\t\t\t\t\tCborData.decodeList(fieldBytes, itemBytes => {\n\t\t\t\t\t\ttxBody.#refInputs.push(TxInput.fromCbor(fieldBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t}\n\t\t});\n\n\t\tassert(done.has(0) && done.has(1) && done.has(2));\n\n\t\treturn txBody;\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\tinputs: this.#inputs.map(input => input.dump()),\n\t\t\toutputs: this.#outputs.map(output => output.dump()),\n\t\t\tfee: this.#fee.toString(),\n\t\t\tlastValidSlot: this.#lastValidSlot === null ? null : this.#lastValidSlot.toString(),\n\t\t\tfirstValidSlot: this.#firstValidSlot === null ? null : this.#firstValidSlot.toString(),\n\t\t\tminted: this.#minted.isZero() ? null : this.#minted.dump(),\n\t\t\tmetadataHash: this.#metadataHash === null ? null : this.#metadataHash.dump(),\n\t\t\tscriptDataHash: this.#scriptDataHash === null ? null : this.#scriptDataHash.dump(),\n\t\t\tcollateral: this.#collateral.length == 0 ? null : this.#collateral.map(c => c.dump()),\n\t\t\tsigners: this.#signers.length == 0 ? null : this.#signers.map(rs => rs.dump()),\n\t\t\tcollateralReturn: this.#collateralReturn === null ? null : this.#collateralReturn.dump(),\n\t\t\t//totalCollateral: this.#totalCollateral.toString(), // doesn't seem to be used anymore\n\t\t\trefInputs: this.#refInputs.map(ri => ri.dump()),\n\t\t};\n\t}\n\n\t/**\n\t * For now simply returns minus infinity to plus infinity (WiP)\n\t * @param {NetworkParams} networkParams\n\t * @returns {ConstrData}\n\t */\n\ttoValidTimeRangeData(networkParams) {\n\t\treturn new ConstrData(0, [\n\t\t\tnew ConstrData(0, [ // LowerBound\n\t\t\t\tthis.#firstValidSlot === null ? new ConstrData(0, []) : new ConstrData(1, [new IntData(networkParams.slotToTime(this.#firstValidSlot))]), // NegInf\n\t\t\t\tnew ConstrData(1, []), // true\n\t\t\t]),\n\t\t\tnew ConstrData(0, [ // UpperBound\n\t\t\t\tthis.#lastValidSlot === null ? new ConstrData(2, []) : new ConstrData(1, [new IntData(networkParams.slotToTime(this.#lastValidSlot))]), // PosInf\n\t\t\t\tnew ConstrData(1, []), // true\n\t\t\t]),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams\n\t * @param {Redeemer[]} redeemers\n\t * @param {ListData} datums \n\t * @param {TxId} txId\n\t * @returns {ConstrData}\n\t */\n\ttoTxData(networkParams, redeemers, datums, txId) {\n\t\treturn new ConstrData(0, [\n\t\t\tnew ListData(this.#inputs.map(input => input.toData())),\n\t\t\tnew ListData(this.#refInputs.map(input => input.toData())),\n\t\t\tnew ListData(this.#outputs.map(output => output.toData())),\n\t\t\t(new Value(this.#fee))._toUplcData(),\n\t\t\t// NOTE: all other Value instances in ScriptContext contain some lovelace, but #minted can never contain any lovelace, yet cardano-node always prepends 0 lovelace to the #minted MapData\n\t\t\t(new Value(0n, this.#minted))._toUplcData(true), \n\t\t\tnew ListData(this.#certs.map(cert => cert.toData())),\n\t\t\tnew MapData(Array.from(this.#withdrawals.entries()).map(w => [w[0].toStakingData(), new IntData(w[1])])),\n\t\t\tthis.toValidTimeRangeData(networkParams),\n\t\t\tnew ListData(this.#signers.map(rs => new ByteArrayData(rs.bytes))),\n\t\t\tnew MapData(redeemers.map(r => [r.toScriptPurposeData(this), r.data])),\n\t\t\tnew MapData(datums.list.map(d => [\n\t\t\t\tnew ByteArrayData(Crypto.blake2b(d.toCbor())), \n\t\t\t\td\n\t\t\t])),\n\t\t\tnew ConstrData(0, [new ByteArrayData(txId.bytes)])\n\t\t]);\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams \n\t * @param {Redeemer[]} redeemers\n\t * @param {ListData} datums\n\t * @param {number} redeemerIdx\n\t * @returns {UplcData}\n\t */\n\ttoScriptContextData(networkParams, redeemers, datums, redeemerIdx) {\t\t\n\t\treturn new ConstrData(0, [\n\t\t\t// tx (we can't know the txId right now, because we don't know the execution costs yet, but a dummy txId should be fine)\n\t\t\tthis.toTxData(networkParams, redeemers, datums, TxId.dummy()),\n\t\t\tredeemers[redeemerIdx].toScriptPurposeData(this),\n\t\t]);\n\t}\n\n\t/**\n\t * @returns {Value}\n\t */\n\tsumInputValue() {\n\t\tlet sum = new Value();\n\n\t\tfor (let input of this.#inputs) {\n\t\t\tif (input.origOutput !== null) {\n\t\t\t\tsum = sum.add(input.origOutput.value);\n\t\t\t}\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Throws error if any part of the sum is negative (i.e. more is burned than input)\n\t * @returns {Value}\n\t */\n\tsumInputAndMintedValue() {\n\t\treturn this.sumInputValue().add(new Value(0n, this.#minted)).assertAllPositive();\n\t}\n\n\t/**\n\t * @returns {Assets}\n\t */\n\tsumInputAndMintedAssets() {\n\t\treturn this.sumInputAndMintedValue().assets;\n\t}\n\n\t/**\n\t * @returns {Value}\n\t */\n\tsumOutputValue() {\n\t\tlet sum = new Value();\n\n\t\tfor (let output of this.#outputs) {\n\t\t\tsum = sum.add(output.value);\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\t/**\n\t * @returns {Assets}\n\t */\n\tsumOutputAssets() {\n\t\treturn this.sumOutputValue().assets;\n\t}\n\n\t/**\n\t * @param {bigint} slot\n\t */\n\tvalidFrom(slot) {\n\t\tthis.#firstValidSlot = slot;\n\t}\n\n\t/**\n\t * @param {bigint} slot\n\t */\n\tvalidTo(slot) {\n\t\tthis.#lastValidSlot = slot;\n\t}\n\n\t/**\n\t * Throws error if this.#minted already contains mph\n\t * @param {MintingPolicyHash} mph - minting policy hash\n\t * @param {[number[], bigint][]} tokens\n\t */\n\taddMint(mph, tokens) {\n\t\tthis.#minted.addTokens(mph, tokens);\n\t}\n\n\t/**\n\t * @param {TxInput} input \n\t * @param {boolean} checkUniqueness\n\t */\n\taddInput(input, checkUniqueness = true) {\n\t\tif (input.origOutput === null) {\n\t\t\tthrow new Error(\"TxInput.origOutput must be set when building transaction\");\n\t\t}\n\n\t\tinput.origOutput.value.assertAllPositive();\n\n\t\tif (checkUniqueness) {\n\t\t\tassert(this.#inputs.every(prevInput => {\n\t\t\t\treturn  !prevInput.txId.eq(input.txId) || prevInput.utxoIdx != input.utxoIdx\n\t\t\t}), \"input already added before\");\n\t\t}\n\n\t\t// push, then sort immediately\n\t\tthis.#inputs.push(input);\n\t\tthis.#inputs.sort(TxInput.comp);\n\t}\n\n\t/**\n\t * Used to remove dummy inputs\n\t * Dummy inputs are needed to be able to correctly estimate fees\n\t * Throws an error if input doesn't exist in list of inputs\n\t * Internal use only!\n\t * @param {TxInput} input\n\t */\n\tremoveInput(input) {\n\t\tlet idx = -1;\n\n\t\t// search from end, so removal is exact inverse of addition\n\t\tfor (let i = this.#inputs.length - 1; i >= 0; i--) {\n\t\t\tif (this.#inputs[i] == input) {\n\t\t\t\tidx = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst n = this.#inputs.length;\n\n\t\tassert(idx != -1, \"input not found\");\n\n\t\tthis.#inputs = this.#inputs.filter((_, i) => i != idx);\n\n\t\tassert(this.#inputs.length == n - 1, \"input not removed\");\n\t}\n\n\t/**\n\t * @param {TxInput} input \n\t */\n\taddRefInput(input) {\n\t\tthis.#refInputs.push(input);\n\t}\n\n\t/**\n\t * @param {TxOutput} output\n\t */\n\taddOutput(output) {\n\t\toutput.value.assertAllPositive();\n\n\t\tthis.#outputs.push(output);\n\t}\n\n\t/**\n\t * Used to remove dummy outputs\n\t * Dummy outputs are needed to be able to correctly estimate fees\n\t * Throws an error if the output doesn't exist in list of outputs\n\t * Internal use only!\n\t * @param {TxOutput} output \n\t */\n\tremoveOutput(output) {\n\t\tlet idx = -1;\n\n\t\t// search from end, so removal is exact inverse of addition\n\t\tfor (let i = this.#outputs.length - 1; i >= 0; i--) {\n\t\t\tif (this.#outputs[i] == output) {\n\t\t\t\tidx = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst n = this.#outputs.length;\n\n\t\tassert(idx != -1, \"output not found\");\n\n\t\tthis.#outputs = this.#outputs.filter((_, i) => i != idx);\n\n\t\tassert(this.#outputs.length == n - 1, \"output not removed\");\n\t}\n\n\t/**\n\t * @param {PubKeyHash} hash \n\t */\n\taddSigner(hash) {\n\t\tthis.#signers.push(hash);\n\t}\n\n\t/**\n\t * @param {TxInput} input \n\t */\n\taddCollateral(input) {\n\t\tthis.#collateral.push(input);\n\t}\n\t\n\t/**\n\t * @param {Hash | null} scriptDataHash\n\t */\n\tsetScriptDataHash(scriptDataHash) {\n\t\tthis.#scriptDataHash = scriptDataHash;\n\t}\n\n\t/**\n\t * @param {Hash} metadataHash\n\t */\n\tsetMetadataHash(metadataHash) {\n\t\tthis.#metadataHash = metadataHash;\n\t}\n\n\t/**\n\t * @param {TxOutput | null} output \n\t */\n\tsetCollateralReturn(output) {\n\t\tthis.#collateralReturn = output;\n\t}\n\n\t/**\n\t * Calculates the number of dummy signatures needed to get precisely the right tx size\n\t * @returns {number}\n\t */\n\tcountUniqueSigners() {\n\t\t/** @type {Set<PubKeyHash>} */\n\t\tlet set = new Set();\n\n\t\tconst inputs = this.#inputs.concat(this.#collateral);\n\n\t\tfor (let input of inputs) {\n\t\t\tlet origOutput = input.origOutput;\n\n\t\t\tif (origOutput !== null) {\n\t\t\t\tlet pubKeyHash = origOutput.address.pubKeyHash;\n\n\t\t\t\tif (pubKeyHash !== null) {\n\t\t\t\t\tset.add(pubKeyHash);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let rs of this.#signers) {\n\t\t\tset.add(rs);\n\t\t}\n\n\t\treturn set.size;\n\t}\n\n\t/**\n\t * Script hashes are found in addresses of TxInputs and hashes of the minted MultiAsset\n\t * @param {Map<string, number>} set - hashes in hex format\n\t */\n\tcollectScriptHashes(set) {\n\t\tfor (let i = 0; i < this.#inputs.length; i++) {\n\t\t\tconst input = this.#inputs[i];\n\n\t\t\tif (input.origOutput !== null) {\n\t\t\t\tlet scriptHash = input.origOutput.address.validatorHash;\n\n\t\t\t\tif (scriptHash !== null) {\n\t\t\t\t\tconst hash = bytesToHex(scriptHash.bytes);\n\n\t\t\t\t\tif (!set.has(hash)) { \n\t\t\t\t\t\tset.set(hash, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet mphs = this.#minted.mintingPolicies;\n\n\t\tfor (let i = 0; i < mphs.length; i++) {\n\t\t\tconst mph = mphs[i];\n\n\t\t\tconst hash = bytesToHex(mph.bytes);\n\n\t\t\tif (!set.has(hash)) {\n\t\t\t\tset.set(hash, -i-1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes sure each output contains the necessary min lovelace\n\t * @param {NetworkParams} networkParams\n\t */\n\tcorrectOutputs(networkParams) {\n\t\tfor (let output of this.#outputs) {\n\t\t\toutput.correctLovelace(networkParams);\n\t\t}\n\t}\n\n\t/**\n\t * Checks that each output contains enough lovelace\n\t * @param {NetworkParams} networkParams\n\t */\n\tcheckOutputs(networkParams) {\n\t\tfor (let output of this.#outputs) {\n\t\t\tlet minLovelace = output.calcMinLovelace(networkParams);\n\n\t\t\tassert(minLovelace <= output.value.lovelace, `not enough lovelace in output (expected at least ${minLovelace.toString()}, got ${output.value.lovelace})`);\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {NetworkParams} networkParams\n\t * @param {?bigint} minCollateral \n\t */\n\tcheckCollateral(networkParams, minCollateral) {\n\t\tassert(this.#collateral.length <= networkParams.maxCollateralInputs);\n\n\t\tif (minCollateral === null) {\n\t\t\tassert(this.#collateral.length == 0, \"unnecessary collateral included\");\n\t\t} else {\n\t\t\tlet sum = new Value();\n\n\t\t\tfor (let col of this.#collateral) {\n\t\t\t\tif (col.origOutput === null) {\n\t\t\t\t\tthrow new Error(\"expected collateral TxInput.origOutput to be set\");\n\t\t\t\t} else if (!col.origOutput.value.assets.isZero()) {\n\t\t\t\t\tthrow new Error(\"collateral can only contain lovelace\");\n\t\t\t\t} else {\n\t\t\t\t\tsum = sum.add(col.origOutput.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.#collateralReturn != null) {\n\t\t\t\tsum = sum.sub(this.#collateralReturn.value);\n\t\t\t}\n\n\t\t\tassert(sum.lovelace >= minCollateral, \"not enough collateral\");\n\n\t\t\tif (sum.lovelace > minCollateral*5n){\n\t\t\t\tconsole.error(\"Warning: way too much collateral\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes sore inputs, withdrawals, and minted assets are in correct order\n\t * Mutates\n\t */\n\tsort() {\n\t\t// inputs should've been added in sorted manner, so this is just a check\n\t\tthis.#inputs.forEach((input, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tconst prev = this.#inputs[i-1];\n\n\t\t\t\t// can be less than -1 if utxoIds aren't consecutive\n\t\t\t\tassert(TxInput.comp(prev, input) <= -1, \"inputs not sorted\");\n\t\t\t}\n\t\t});\n\n\t\t// TODO: also add withdrawals in sorted manner\n\t\tthis.#withdrawals = new Map(Array.from(this.#withdrawals.entries()).sort((a, b) => {\n\t\t\treturn Address.compStakingHashes(a[0], b[0]);\n\t\t}));\n\n\t\t// minted assets should've been added in sorted manner, so this is just a check\n\t\tthis.#minted.assertSorted();\n\t}\n\n\t/**\n\t * Used by (indirectly) by emulator to check if slot range is valid.\n\t * @param {bigint} slot\n\t */\n\tisValid(slot) {\n\t\tif (this.#lastValidSlot != null) {\n\t\t\tif (slot > this.#lastValidSlot) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this.#firstValidSlot != null) {\n\t\t\tif (slot < this.#firstValidSlot) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nclass TxWitnesses extends CborData {\n\t/** @type {Signature[]} */\n\t#signatures;\n\n\t/** @type {ListData} */\n\t#datums;\n\n\t/** @type {Redeemer[]} */\n\t#redeemers;\n\n\t/** @type {UplcProgram[]} */\n\t#scripts;\n\n\t/** @type {UplcProgram[]} */\n\t#refScripts;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.#signatures = [];\n\t\tthis.#datums = new ListData([]);\n\t\tthis.#redeemers = [];\n\t\tthis.#scripts = [];\n\t\tthis.#refScripts = [];\n\t}\n\n\t/**\n\t * @type {Signature[]}\n\t */\n\tget signatures() {\n\t\treturn this.#signatures;\n\t}\n\n\t/**\n\t * Returns all the scripts, including the reference scripts\n\t * @type {UplcProgram[]}\n\t */\n\tget scripts() {\n\t\treturn this.#scripts.slice().concat(this.#refScripts.slice());\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\t/**\n\t\t * @type {Map<number, number[]>}\n\t\t */\n\t\tlet object = new Map();\n\n\t\tif (this.#signatures.length != 0) {\n\t\t\tobject.set(0, CborData.encodeDefList(this.#signatures));\n\t\t}\n\n\t\tif (this.#datums.list.length != 0) {\n\t\t\tobject.set(4, this.#datums.toCbor());\n\t\t}\n\n\t\tif (this.#redeemers.length != 0) {\n\t\t\tobject.set(5, CborData.encodeDefList(this.#redeemers));\n\t\t}\n\n\t\tif (this.#scripts.length != 0) {\n\t\t\t/**\n\t\t\t * @type {number[][]}\n\t\t\t */\n\t\t\tlet scriptBytes = this.#scripts.map(s => s.toCbor());\n\n\t\t\tobject.set(6, CborData.encodeDefList(scriptBytes));\n\t\t}\n\n\t\treturn CborData.encodeObject(object);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {TxWitnesses}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tlet txWitnesses = new TxWitnesses();\n\n\t\tCborData.decodeObject(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxWitnesses.#signatures.push(Signature.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\tcase 2:\n\t\t\t\tcase 3:\n\t\t\t\t\tthrow new Error(\"unhandled field\");\n\t\t\t\tcase 4:\n\t\t\t\t\ttxWitnesses.#datums = ListData.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxWitnesses.#redeemers.push(Redeemer.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tCborData.decodeList(fieldBytes, (_, itemBytes) => {\n\t\t\t\t\t\ttxWitnesses.#scripts.push(UplcProgram.fromCbor(itemBytes));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t}\n\t\t});\n\n\t\treturn txWitnesses;\n\t}\n\n\t/**\n\t * Throws error if signatures are incorrect\n\t * @param {number[]} bodyBytes \n\t */\n\tverifySignatures(bodyBytes) {\n\t\tfor (let signature of this.#signatures) {\n\t\t\tsignature.verify(Crypto.blake2b(bodyBytes));\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\tsignatures: this.#signatures.map(pkw => pkw.dump()),\n\t\t\tdatums: this.#datums.list.map(datum => datum.toString()),\n\t\t\tredeemers: this.#redeemers.map(redeemer => redeemer.dump()),\n\t\t\tscripts: this.#scripts.map(script => bytesToHex(script.toCbor())),\n\t\t\trefScripts: this.#refScripts.map(script => bytesToHex(script.toCbor())),\n\t\t};\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams\n\t * @returns {bigint}\n\t */\n\testimateFee(networkParams) {\n\t\tlet sum = 0n;\n\n\t\tfor (let redeemer of this.#redeemers) {\n\t\t\tsum += redeemer.estimateFee(networkParams);\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\t/**\n\t * @param {Signature} signature \n\t */\n\taddSignature(signature) {\n\t\tthis.#signatures.push(signature);\n\t}\n\n\t/**\n\t * @param {number} n\n\t */\n\taddDummySignatures(n) {\n\t\tfor (let i = 0 ; i < n; i++) {\n\t\t\tthis.#signatures.push(Signature.dummy());\n\t\t}\n\t}\n\n\tremoveDummySignatures() {\n\t\tthis.#signatures = this.#signatures.filter(pkw => !pkw.isDummy());\n\t}\n\n\t/**\n\t * Index is calculated later\n\t * @param {TxInput} input\n\t * @param {UplcData} redeemerData \n\t */\n\taddSpendingRedeemer(input, redeemerData) {\n\t\tthis.#redeemers.push(new SpendingRedeemer(input, -1, redeemerData)); // actual input index is determined later\n\t}\n\n\t/**\n\t * @param {MintingPolicyHash} mph\n\t * @param {UplcData} redeemerData\n\t */\n\taddMintingRedeemer(mph, redeemerData) {\n\t\tthis.#redeemers.push(new MintingRedeemer(mph, -1, redeemerData));\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t */\n\taddDatumData(data) {\n\t\t// check that it hasn't already been included\n\t\tfor (let prev of this.#datums.list) {\n\t\t\tif (eq(prev.toCbor(), data.toCbor())) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet lst = this.#datums.list;\n\t\tlst.push(data);\n\n\t\tthis.#datums = new ListData(lst);\n\t}\n\n\t/**\n\t * Throws error if script was already added before\n\t * @param {UplcProgram} program \n\t * @param {boolean} isRef\n\t */\n\tattachScript(program, isRef = false) {\n\t\tlet h = program.hash();\n\n\t\tassert(this.#scripts.every(s => !eq(s.hash(), h)));\n\t\tassert(this.#refScripts.every(s => !eq(s.hash(), h)));\n\n\t\tif (isRef) {\n\t\t\tthis.#refScripts.push(program);\n\t\t} else {\n\t\t\tthis.#scripts.push(program);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves either a regular script or a reference script\n\t * @param {Hash} scriptHash - can be ValidatorHash or MintingPolicyHash\n\t * @returns {UplcProgram}\n\t */\n\tgetScript(scriptHash) {\n\t\treturn assertDefined(this.scripts.find(s => eq(s.hash(), scriptHash.bytes)));\n\t}\n\n\t/**\n\t * @param {TxBody} body\n\t */\n\tupdateRedeemerIndices(body) {\n\t\tfor (let redeemer of this.#redeemers) {\n\t\t\tredeemer.updateIndex(body);\n\t\t}\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams \n\t * @returns {Hash | null} - returns null if there are no redeemers\n\t */\n\tcalcScriptDataHash(networkParams) {\n\t\tif (this.#redeemers.length > 0) {\n\t\t\tlet bytes = CborData.encodeDefList(this.#redeemers);\n\n\t\t\tif (this.#datums.list.length > 0) {\n\t\t\t\tbytes = bytes.concat(this.#datums.toCbor());\n\t\t\t}\n\n\t\t\t// language view encodings?\n\t\t\tlet sortedCostParams = networkParams.sortedCostParams;\n\n\t\t\tbytes = bytes.concat(CborData.encodeMap([[\n\t\t\t\tCborData.encodeInteger(1n), \n\t\t\t\tCborData.encodeDefList(sortedCostParams.map(cp => CborData.encodeInteger(BigInt(cp)))),\n\t\t\t]]));\n\n\t\t\treturn new Hash(Crypto.blake2b(bytes));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @param {NetworkParams} networkParams \n\t * @param {TxBody} body\n\t * @param {Redeemer} redeemer \n\t * @param {UplcData} scriptContext\n\t * @returns {Promise<Cost>} \n\t */\n\tasync executeRedeemer(networkParams, body, redeemer, scriptContext) {\n\t\tif (redeemer instanceof SpendingRedeemer) {\n\t\t\tconst idx = redeemer.inputIndex;\n\n\t\t\tconst origOutput = body.inputs[idx].origOutput;\n\n\t\t\tif (origOutput === null) {\n\t\t\t\tthrow new Error(\"expected origOutput to be non-null\");\n\t\t\t} else {\n\t\t\t\tconst datumData = origOutput.getDatumData();\n\n\t\t\t\tconst validatorHash = origOutput.address.validatorHash;\n\n\t\t\t\tif (validatorHash === null || validatorHash === undefined) {\n\t\t\t\t\tthrow new Error(\"expected validatorHash to be non-null\");\n\t\t\t\t} else {\n\t\t\t\t\tconst script = this.getScript(validatorHash);\n\n\t\t\t\t\tconst args = [\n\t\t\t\t\t\tnew UplcDataValue(Site.dummy(), datumData), \n\t\t\t\t\t\tnew UplcDataValue(Site.dummy(), redeemer.data), \n\t\t\t\t\t\tnew UplcDataValue(Site.dummy(), scriptContext),\n\t\t\t\t\t];\n\n\t\t\t\t\tconst profile = await script.profile(args, networkParams);\n\n\t\t\t\t\tprofile.messages.forEach(m => console.log(m));\n\n\t\t\t\t\tif (profile.result instanceof UserError) {\t\n\t\t\t\t\t\tthrow profile.result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {mem: profile.mem, cpu: profile.cpu};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (redeemer instanceof MintingRedeemer) {\n\t\t\tconst mph = body.minted.mintingPolicies[redeemer.mphIndex];\n\n\t\t\tconst script = this.getScript(mph);\n\n\t\t\tconst args = [\n\t\t\t\tnew UplcDataValue(Site.dummy(), redeemer.data),\n\t\t\t\tnew UplcDataValue(Site.dummy(), scriptContext),\n\t\t\t];\n\n\t\t\tconst profile = await script.profile(args, networkParams);\n\n\t\t\tprofile.messages.forEach(m => console.log(m));\n\n\t\t\tif (profile.result instanceof UserError) {\t\n\t\t\t\tthrow profile.result;\n\t\t\t} else {\n\t\t\t\treturn {mem: profile.mem, cpu: profile.cpu};\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"unhandled redeemer type\");\n\t\t}\n\t}\n\n\t/**\n\t * Executes the redeemers in order to calculate the necessary ex units\n\t * @param {NetworkParams} networkParams \n\t * @param {TxBody} body - needed in order to create correct ScriptContexts\n\t * @param {Address} changeAddress - needed for dummy input and dummy output\n\t * @returns {Promise<void>}\n\t */\n\tasync executeRedeemers(networkParams, body, changeAddress) {\n\t\tassert(config.N_DUMMY_INPUTS == 1 || config.N_DUMMY_INPUTS == 2, \"expected N_DUMMY_INPUTS==1 or N_DUMMY_INPUTS==2\");\n\t\tconst twoDummyInputs = config.N_DUMMY_INPUTS == 2;\n\n\t\tconst fee = networkParams.maxTxFee;\n\n\t\t// Additional 2 dummy inputs and 1 dummy output to compensate for balancing inputs and outputs that might be added later\n\t\t// The reason for needing 2 dummy inputs is that one needs to be at the beginning of the body.inputs list (TxId 0000...), and the other needs TxId ffffff (at the end of the list)\n\t\t// TxId ffffff overestimates the cost of printing the TxIds, and the dummy TxId 00000 overestimates iterating over body.inputs\n\t\t// We can't just prepend a dummy input with TxId ffffff, because some scripts might be relying on the order of the inputs (eg. counting votes in DAOs)\n\n\t\t// 1000 ADA should be enough as a dummy input/output\n\t\tconst dummyInput1 = new TxInput(\n\t\t\tTxId.dummy(0),\n\t\t\t0n,\n\t\t\tnew TxOutput(\n\t\t\t\tchangeAddress,\n\t\t\t\tnew Value(fee + 1000_000_000n)\n\t\t\t)\n\t\t);\n\t\t\n\t\tconst dummyInput2 = new TxInput(\n\t\t\tTxId.dummy(255),\n\t\t\t999n,\n\t\t\tnew TxOutput(\n\t\t\t\tchangeAddress,\n\t\t\t\tnew Value(1000_000_000n)\n\t\t\t)\n\t\t);\n\n\t\tconst dummyOutput = new TxOutput(\n\t\t\tchangeAddress,\n\t\t\tnew Value(twoDummyInputs ? 2000_000_000n : 1000_000_000n)\n\t\t);\n\n\t\tbody.setFee(fee);\n\t\tbody.addInput(dummyInput1, false);\n\t\tif (twoDummyInputs) {\n\t\t\tbody.addInput(dummyInput2, false);\n\t\t}\n\t\tbody.addOutput(dummyOutput);\n\n\t\tthis.updateRedeemerIndices(body);\n\n\t\tfor (let i = 0; i < this.#redeemers.length; i++) {\n\t\t\tconst redeemer = this.#redeemers[i];\n\n\t\t\tconst scriptContext = body.toScriptContextData(networkParams, this.#redeemers, this.#datums, i);\n\n\t\t\tconst cost = await this.executeRedeemer(networkParams, body, redeemer, scriptContext);\n\n\t\t\tredeemer.setCost(cost);\n\t\t}\n\n\t\tbody.removeInput(dummyInput1);\n\t\tif (twoDummyInputs) {\n\t\t\tbody.removeInput(dummyInput2);\n\t\t}\n\t\tbody.removeOutput(dummyOutput);\n\n\t\tthis.updateRedeemerIndices(body);\n\t}\n\n\t/**\n\t * Reruns all the redeemers to make sure the ex budgets are still correct (can change due to outputs added during rebalancing)\n\t * @param {NetworkParams} networkParams \n\t * @param {TxBody} body \n\t */\n\tasync checkExecutionBudgets(networkParams, body) {\n\t\tfor (let i = 0; i < this.#redeemers.length; i++) {\n\t\t\tconst redeemer = this.#redeemers[i];\n\n\t\t\tconst scriptContext = body.toScriptContextData(networkParams, this.#redeemers, this.#datums, i);\n\n\t\t\tconst cost = await this.executeRedeemer(networkParams, body, redeemer, scriptContext);\n\n\t\t\tif (redeemer.memCost < cost.mem) {\n\t\t\t\tthrow new Error(\"internal finalization error, redeemer mem budget too low\");\n\t\t\t} else if (redeemer.cpuCost < cost.cpu) {\n\t\t\t\tthrow new Error(\"internal finalization error, redeemer cpu budget too low\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Throws error if execution budget is exceeded\n\t * @param {NetworkParams} networkParams\n\t */\n\tcheckExecutionBudgetLimits(networkParams) {\n\t\tlet totalMem = 0n;\n\t\tlet totalCpu = 0n;\n\n\t\tfor (let redeemer of this.#redeemers) {\n\t\t\ttotalMem += redeemer.memCost;\n\t\t\ttotalCpu += redeemer.cpuCost;\n\t\t}\n\n\t\tlet [maxMem, maxCpu] = networkParams.maxTxExecutionBudget;\n\n\t\tif (totalMem >= BigInt(maxMem)) {\n\t\t\tthrow new Error(\"execution budget exceeded for mem\");\n\t\t}\n\n\t\tif (totalCpu >= BigInt(maxCpu)) {\n\t\t\tthrow new Error(\"execution budget exceeded for cpu\");\n\t\t}\n\t}\n}\n\n/**\n * @package\n */\nclass TxInput extends CborData {\n\t/** @type {TxId} */\n\t#txId;\n\n\t/** @type {bigint} */\n\t#utxoIdx;\n\n\t/** @type {?TxOutput} */\n\t#origOutput;\n\n\t/**\n\t * @param {TxId} txId \n\t * @param {bigint} utxoIdx \n\t * @param {?TxOutput} origOutput - used during building, not part of serialization\n\t */\n\tconstructor(txId, utxoIdx, origOutput = null) {\n\t\tsuper();\n\t\tthis.#txId = txId;\n\t\tthis.#utxoIdx = utxoIdx;\n\t\tthis.#origOutput = origOutput;\n\t}\n\t\n\t/**\n\t * @type {TxId}\n\t */\n\tget txId() {\n\t\treturn this.#txId;\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget utxoIdx() {\n\t\treturn this.#utxoIdx;\n\t}\n\n\t/**\n\t * @type {TxOutput}\n\t */\n\tget origOutput() {\n\t\tif (this.#origOutput === null) {\n\t\t\tthrow new Error(\"origOutput not set\");\n\t\t} else {\n\t\t\treturn this.#origOutput;\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut\n\t * @type {Value}\n\t */\n\tget value() {\n\t\treturn this.origOutput.value;\n\t}\n\n\t/**\n\t * Shortcut\n\t * @type {Address}\n\t */\n\tget address() {\n\t\treturn this.origOutput.address;\n\t}\n\n\t/**\n\t * @returns {ConstrData}\n\t */\n\ttoOutputIdData() {\n\t\treturn new ConstrData(0, [\n\t\t\tnew ConstrData(0, [new ByteArrayData(this.#txId.bytes)]),\n\t\t\tnew IntData(this.#utxoIdx),\n\t\t]);\n\t}\n\n\t/**\n\t * @returns {ConstrData}\n\t */\n\ttoData() {\n\t\tif (this.#origOutput === null) {\n\t\t\tthrow new Error(\"expected to be non-null\");\n\t\t} else {\n\t\t\treturn new ConstrData(0, [\n\t\t\t\tthis.toOutputIdData(),\n\t\t\t\tthis.#origOutput.toData(),\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeTuple([\n\t\t\tthis.#txId.toCbor(),\n\t\t\tCborData.encodeInteger(this.#utxoIdx),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {TxInput}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/** @type {?TxId} */\n\t\tlet txId = null;\n\n\t\t/** @type {?bigint} */\n\t\tlet utxoIdx = null;\n\n\t\tCborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\ttxId = TxId.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tutxoIdx = CborData.decodeInteger(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t}\n\t\t});\n\n\t\tif (txId === null || utxoIdx === null) {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t} else {\n\t\t\treturn new TxInput(txId, utxoIdx);\n\t\t}\n\t}\n\n\t/**\n\t * Tx inputs must be ordered. \n\t * The following function can be used directly by a js array sort\n\t * @param {TxInput} a\n\t * @param {TxInput} b\n\t * @returns {number}\n\t */\n\tstatic comp(a, b) {\n\t\tlet res = ByteArrayData.comp(a.#txId.bytes, b.#txId.bytes);\n\n\t\tif (res == 0) {\n\t\t\treturn Number(a.#utxoIdx - b.#utxoIdx);\n\t\t} else {\n\t\t\treturn res;\n\t\t}\n\t} \n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\ttxId: this.#txId.dump(),\n\t\t\tutxoIdx: this.#utxoIdx.toString(),\n\t\t\torigOutput: this.#origOutput !== null ? this.#origOutput.dump() : null,\n\t\t};\n\t}\n}\n\n/**\n * UTxO wraps TxInput\n */\nclass UTxO {\n\t#input;\n\n\t/**\n\t * @param {TxId} txId \n\t * @param {bigint} utxoIdx \n\t * @param {TxOutput} origOutput\n\t */\n\tconstructor(txId, utxoIdx, origOutput) {\n\t\tthis.#input = new TxInput(txId, utxoIdx, origOutput);\n\t}\n\n\t/**\n\t * @type {TxId}\n\t */\n\tget txId() {\n\t\treturn this.#input.txId;\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget utxoIdx() {\n\t\treturn this.#input.utxoIdx;\n\t}\n\n\t/**\n\t * @type {TxInput}\n\t */\n\tget asTxInput() {\n\t\treturn this.#input;\n\t}\n\n\t/**\n\t * @type {Value}\n\t */\n\tget value() {\n\t\treturn this.#input.value;\n\t}\n\n\t/**\n\t * @type {TxOutput}\n\t */\n\tget origOutput() {\n\t\treturn this.#input.origOutput;\n\t}\n\n\t/**\n\t * Deserializes UTxO format used by wallet connector\n\t * @param {number[]} bytes\n\t * @returns {UTxO}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/** @type {?TxInput} */\n\t\tlet maybeTxInput = null;\n\n\t\t/** @type {?TxOutput} */\n\t\tlet origOutput = null;\n\n\t\tCborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tmaybeTxInput = TxInput.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\torigOutput = TxOutput.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t}\n\t\t});\n\n\t\tif (maybeTxInput !== null && origOutput !== null) {\n            /** @type {TxInput} */\n            const txInput = maybeTxInput;\n            \n\t\t\treturn new UTxO(txInput.txId, txInput.utxoIdx, origOutput);\n\t\t} else {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t}\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeTuple([\n\t\t\tthis.#input.toCbor(),\n\t\t\tthis.#input.origOutput.toCbor()\n\t\t]);\n\t}\n\n\t/**\n\t * @param {UTxO[]} utxos\n\t * @returns {Value}\n\t */\n\tstatic sumValue(utxos) {\n\t\tlet sum = new Value();\n\n\t\tfor (let utxo of utxos) {\n\t\t\tsum = sum.add(utxo.value);\n\t\t}\n\n\t\treturn sum;\n\t}\n}\n\nclass TxRefInput extends TxInput {\n\t/**\n\t * @param {TxId} txId \n\t * @param {bigint} utxoId\n\t * @param {TxOutput} origOutput\n\t */\n\tconstructor(txId, utxoId, origOutput) {\n\t\tsuper(txId, utxoId, origOutput);\n\t}\n}\n\nclass TxOutput extends CborData {\n\t/** @type {Address} */\n\t#address;\n\n\t/** @type {Value} */\n\t#value;\n\n\t/** @type {?Datum} */\n\t#datum;\n\n\t/** @type {?UplcProgram} */\n\t#refScript;\n\n\t/**\n\t * @param {Address} address \n\t * @param {Value} value \n\t * @param {?Datum} datum \n\t * @param {?UplcProgram} refScript \n\t */\n\tconstructor(address, value, datum = null, refScript = null) {\n\t\tassert(datum === null || datum instanceof Datum); // check this explicitely because caller might be using this constructor without proper type-checking\n\t\tsuper();\n\t\tthis.#address = address;\n\t\tthis.#value = value;\n\t\tthis.#datum = datum;\n\t\tthis.#refScript = refScript;\n\t}\n\n\tget address() {\n\t\treturn this.#address;\n\t}\n\n\t/**\n\t * Mutation is handy when correctin the quantity of lovelace in a utxo\n\t * @param {Address} addr\n\t */\n\tsetAddress(addr) {\n\t\tthis.#address = addr;\n\t}\n\n\tget value() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Mutation is handy when correcting the quantity of lovelace in a utxo\n\t * @param {Value} val\n\t */\n\tsetValue(val) {\n\t\tthis.#value = val;\n\t}\n\n\tget datum() {\n\t\treturn this.#datum;\n\t}\n\n\t/**\n\t * Mutation is handy when correctin the quantity of lovelace in a utxo \n\t * @param {Datum} datum \n\t */\n\tsetDatum(datum) {\n\t\tthis.#datum = datum;\n\t}\n\n\t/**\n\t * @returns {UplcData}\n\t */\n\tgetDatumData() {\n\t\tif (this.#datum === null) {\n\t\t\tthrow new Error(\"no datum data available\");\n\t\t} else {\n\t\t\tlet data = this.#datum.data;\n\t\t\tif (data === null) {\n\t\t\t\tthrow new Error(\"no datum data available\");\n\t\t\t} else {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\tif ((this.#datum === null || this.#datum instanceof HashedDatum) && this.#refScript === null && !config.STRICT_BABBAGE) {\n\t\t\t// this is needed to match eternl wallet (de)serialization (annoyingly eternl deserializes the tx and then signs its own serialization)\n\t\t\t// hopefully cardano-cli signs whatever serialization we choose (so we use the eternl variant in order to be compatible with both)\n\n\t\t\tlet fields = [\n\t\t\t\tthis.#address.toCbor(),\n\t\t\t\tthis.#value.toCbor()\n\t\t\t];\n\n\t\t\tif (this.#datum !== null) {\n\t\t\t\tif (this.#datum instanceof HashedDatum) {\n\t\t\t\t\tfields.push(this.#datum.hash.toCbor());\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn CborData.encodeTuple(fields);\n\t\t} else {\n\t\t\t/** @type {Map<number, number[]>} */\n\t\t\tlet object = new Map();\n\n\t\t\tobject.set(0, this.#address.toCbor());\n\t\t\tobject.set(1, this.#value.toCbor());\n\n\t\t\tif (this.#datum !== null) {\n\t\t\t\tobject.set(2, this.#datum.toCbor());\n\t\t\t}\n\n\t\t\tif (this.#refScript !== null) {\n\t\t\t\tobject.set(3, CborData.encodeTag(24n).concat(CborData.encodeBytes(\n\t\t\t\t\tCborData.encodeTuple([\n\t\t\t\t\t\tCborData.encodeInteger(BigInt(this.#refScript.versionTag())),\n\t\t\t\t\t\tthis.#refScript.toCbor()\n\t\t\t\t\t])\n\t\t\t\t)));\n\t\t\t}\n\n\t\t\treturn CborData.encodeObject(object);\n\t\t}\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {TxOutput}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/** @type {?Address} */\n\t\tlet address = null;\n\n\t\t/** @type {?Value} */\n\t\tlet value = null;\n\n\t\t/** @type {?Datum} */\n\t\tlet outputDatum = null;\n\n\t\t/** @type {?UplcProgram} */\n\t\tlet refScript = null;\n\n\t\tif (CborData.isObject(bytes)) {\n\t\t\tCborData.decodeObject(bytes, (i, fieldBytes) => {\n\t\t\t\tswitch(i) { \n\t\t\t\t\tcase 0:\n\t\t\t\t\t\taddress = Address.fromCbor(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tvalue = Value.fromCbor(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\toutputDatum = Datum.fromCbor(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tassert(CborData.decodeTag(fieldBytes) == 24n);\n\n\t\t\t\t\t\tlet tupleBytes = CborData.decodeBytes(fieldBytes);\n\n\t\t\t\t\t\tCborData.decodeTuple(tupleBytes, (tupleIdx, innerTupleBytes) => {\n\t\t\t\t\t\t\tassert(refScript === null);\n\n\t\t\t\t\t\t\tswitch(tupleIdx) {\n\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\tthrow new Error(\"native refScript unhandled\");\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tthrow new Error(\"plutuScriptV1 as refScript unhandled\");\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\trefScript = UplcProgram.fromCbor(innerTupleBytes);\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tthrow new Error(\"unhandled script type for refScript\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (CborData.isTuple(bytes)) {\n\t\t\t// this is the pre-vasil format, which is still sometimes returned by wallet connector functions\n\t\t\tCborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\t\tswitch(i) { \n\t\t\t\t\tcase 0:\n\t\t\t\t\t\taddress = Address.fromCbor(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tvalue = Value.fromCbor(fieldBytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\toutputDatum = new HashedDatum(DatumHash.fromCbor(fieldBytes));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error(\"expected object or tuple for TxOutput\");\n\t\t}\n\n\t\tif (address === null || value === null) {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t} else {\n\t\t\treturn new TxOutput(address, value, outputDatum, refScript);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\taddress: this.#address.dump(),\n\t\t\tvalue: this.#value.dump(),\n\t\t\tdatum: this.#datum === null ? null : this.#datum.dump(),\n\t\t\trefScript: this.#refScript === null ? null : bytesToHex(this.#refScript.toCbor()),\n\t\t};\n\t}\n\n\t/**\n\t * @returns {ConstrData}\n\t */\n\ttoData() {\n\t\tlet datum = new ConstrData(0, []); // none\n\t\tif (this.#datum !== null) {\n\t\t\tdatum = this.#datum.toData();\n\t\t}\n\n\t\treturn new ConstrData(0, [\n\t\t\tthis.#address._toUplcData(),\n\t\t\tthis.#value._toUplcData(),\n\t\t\tdatum,\n\t\t\tnew ConstrData(1, []), // TODO: how to include the ref script\n\t\t]);\n\t}\n\n\t/**\n\t * Each UTxO must contain some minimum quantity of lovelace to avoid that the blockchain is used for data storage\n\t * @param {NetworkParams} networkParams\n\t * @returns {bigint}\n\t */\n\tcalcMinLovelace(networkParams) {\n\t\tlet lovelacePerByte = networkParams.lovelacePerUTXOByte;\n\n\t\tlet correctedSize = this.toCbor().length + 160; // 160 accounts for some database overhead?\n\n\t\treturn BigInt(correctedSize)*BigInt(lovelacePerByte);\n\t}\n\n\t/**\n\t * Mutates. Makes sure the output contains at least the minimum quantity of lovelace.\n\t * Other parts of the output can optionally also be mutated\n\t * @param {NetworkParams} networkParams \n\t * @param {?((output: TxOutput) => void)} updater\n\t */\n\tcorrectLovelace(networkParams, updater = null) {\n\t\tlet minLovelace = this.calcMinLovelace(networkParams);\n\n\t\twhile (this.#value.lovelace < minLovelace) {\n\t\t\tthis.#value.setLovelace(minLovelace);\n\n\t\t\tif (updater != null) {\n\t\t\t\tupdater(this);\n\t\t\t}\n\n\t\t\tminLovelace = this.calcMinLovelace(networkParams);\n\t\t}\n\t}\n}\n\n// TODO: enum members\nclass DCert extends CborData {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {DCert}\n\t */\n\tstatic fromCbor(bytes) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {ConstrData}\n\t */\n\ttoData() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Convenience address that is used to query all assets controlled by a given StakeHash (can be scriptHash or regular stakeHash)\n */\nclass StakeAddress {\n\t#bytes;\n\n\t/**\n\t * @param {number[]} bytes \n\t */\n\tconstructor(bytes) {\n\t\tassert(bytes.length == 29);\n\n\t\tthis.#bytes = bytes;\n\t}\n\n\t/**\n\t * @type {number[]}\n\t */\n\tget bytes() {\n\t\treturn this.#bytes;\n\t}\n\n\t/**\n\t * @param {StakeAddress} sa\n\t * @returns {boolean}\n\t */\n\tstatic isForTestnet(sa) {\n\t\treturn Address.isForTestnet(new Address(sa.bytes));\n\t}\n\n\t/**\n\t * Convert regular Address into StakeAddress.\n\t * Throws an error if the given Address doesn't have a staking part.\n\t * @param {Address} addr \n\t * @returns {StakeAddress}\n\t */\n\tstatic fromAddress(addr) {\n\t\tconst sh = addr.stakingHash;\n\n\t\tif (sh === null) {\n\t\t\tthrow new Error(\"address doesn't have a staking part\");\n\t\t} else {\n\t\t\treturn StakeAddress.fromHash(Address.isForTestnet(addr), sh);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeBytes(this.#bytes);\n\t}\n\n\t/**\n\t * @param {number[]} bytes\n\t * @returns {StakeAddress}\n\t */\n\tstatic fromCbor(bytes) {\n\t\treturn new StakeAddress(CborData.decodeBytes(bytes));\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoBech32() {\n\t\treturn Crypto.encodeBech32(\n\t\t\tStakeAddress.isForTestnet(this) ? \"stake_test\" : \"stake\",\n\t\t\tthis.bytes\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} str\n\t * @returns {StakeAddress}\n\t */\n\tstatic fromBech32(str) {\n\t\tlet [prefix, bytes] = Crypto.decodeBech32(str);\n\n\t\tlet result = new StakeAddress(bytes);\n\n\t\tassert(prefix == (StakeAddress.isForTestnet(result) ? \"stake_test\" : \"stake\"), \"invalid StakeAddress prefix\");\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the raw StakeAddress bytes as a hex encoded string\n\t * @returns {string}\n\t */\n\ttoHex() {\n\t\treturn bytesToHex(this.#bytes);\n\t}\n\n\t/**\n\t * Doesn't check validity\n\t * @param {string} hex\n\t * @returns {StakeAddress}\n\t */\n\tstatic fromHex(hex) {\n\t\treturn new StakeAddress(hexToBytes(hex));\n\t}\n\n\t/**\n\t * Address with only staking part (regular StakeKeyHash)\n\t * @param {boolean} isTestnet\n\t * @param {StakeKeyHash} hash\n\t * @returns {StakeAddress}\n\t */\n\tstatic fromStakeKeyHash(isTestnet, hash) {\n\t\treturn new StakeAddress(\n\t\t\t[isTestnet ? 0xe0 : 0xe1].concat(hash.bytes)\n\t\t);\n\t}\n\n\t/**\n\t * Address with only staking part (script StakingValidatorHash)\n\t * @param {boolean} isTestnet\n\t * @param {StakingValidatorHash} hash\n\t * @returns {StakeAddress}\n\t */\n\tstatic fromStakingValidatorHash(isTestnet, hash) {\n\t\treturn new StakeAddress(\n\t\t\t[isTestnet ? 0xf0 : 0xf1].concat(hash.bytes)\n\t\t);\n\t}\n\n\t/**\n\t * @param {boolean} isTestnet\n\t * @param {StakeKeyHash | StakingValidatorHash} hash\n\t * @returns {StakeAddress}\n\t */\n\tstatic fromHash(isTestnet, hash) {\n\t\tif (hash instanceof StakeKeyHash) {\n\t\t\treturn StakeAddress.fromStakeKeyHash(isTestnet, hash);\n\t\t} else {\n\t\t\treturn StakeAddress.fromStakingValidatorHash(isTestnet, hash);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {StakeKeyHash | StakingValidatorHash}\n\t */\n\tget stakingHash() {\n\t\tconst type = this.bytes[0];\n\n\t\tif (type == 0xe0 || type == 0xe1) {\n\t\t\treturn new StakeKeyHash(this.bytes.slice(1));\n\t\t} else if (type == 0xf0 || type == 0xf1) {\n\t\t\treturn new StakingValidatorHash(this.bytes.slice(1));\n\t\t} else {\n\t\t\tthrow new Error(\"bad StakeAddress header\");\n\t\t}\n\t}\n}\n\nclass Signature extends CborData {\n\t/** @type {number[]} */\n\t#pubKey;\n\n\t/** @type {number[]} */\n\t#signature;\n\n\t/**\n\t * @param {number[]} pubKey \n\t * @param {number[]} signature \n\t */\n\tconstructor(pubKey, signature) {\n\t\tsuper();\n\t\tthis.#pubKey = pubKey;\n\t\tthis.#signature = signature;\n\t}\n\n\t/**\n\t * @returns {Signature}\n\t */\n\tstatic dummy() {\n\t\treturn new Signature((new Array(32)).fill(0), (new Array(64)).fill(0));\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisDummy() {\n\t\treturn this.#pubKey.every(b => b == 0) && this.#signature.every(b => b == 0);\n\t}\n\n\ttoCbor() {\n\t\treturn CborData.encodeTuple([\n\t\t\tCborData.encodeBytes(this.#pubKey),\n\t\t\tCborData.encodeBytes(this.#signature),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {Signature}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/** @type {?number[]} */\n\t\tlet pubKey = null;\n\n\t\t/** @type {?number[]} */\n\t\tlet signature = null;\n\n\t\tlet n = CborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\tpubKey = CborData.decodeBytes(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tsignature = CborData.decodeBytes(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t}\n\t\t});\n\n\t\tassert(n == 2);\n\n\t\tif (pubKey === null || signature === null) {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t} else {\n\t\t\treturn new Signature(pubKey, signature);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\tpubKey: bytesToHex(this.#pubKey),\n\t\t\tpubKeyHash: bytesToHex(Crypto.blake2b(this.#pubKey, 28)),\n\t\t\tsignature: bytesToHex(this.#signature),\n\t\t};\n\t}\n\n\t/**\n\t * Throws error if incorrect\n\t * @param {number[]} msg\n\t */\n\tverify(msg) {\n\t\tif (this.#signature === null) {\n\t\t\tthrow new Error(\"signature can't be null\");\n\t\t} else {\n\t\t\tif (this.#pubKey === null) {\n\t\t\t\tthrow new Error(\"pubKey can't be null\");\n\t\t\t} else {\n\t\t\t\tif (!Crypto.Ed25519.verify(this.#signature, msg, this.#pubKey)) {\n\t\t\t\t\tthrow new Error(\"incorrect signature\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass Redeemer extends CborData {\n\t/** @type {UplcData} */\n\t#data;\n\n\t/** @type {Cost} */\n\t#exUnits;\n\n\t/**\n\t * @param {UplcData} data \n\t * @param {Cost} exUnits \n\t */\n\tconstructor(data, exUnits = {mem: 0n, cpu: 0n}) {\n\t\tsuper();\n\t\tthis.#data = data;\n\t\tthis.#exUnits = exUnits;\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget data() {\n\t\treturn this.#data;\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget memCost() {\n\t\treturn this.#exUnits.mem;\n\t}\n\n\t/**\n\t * @type {bigint}\n\t */\n\tget cpuCost() {\n\t\treturn this.#exUnits.cpu;\n\t}\n\n\t/**\n\t * type:\n\t *   0 -> spending\n\t *   1 -> minting \n\t *   2 -> certifying\n\t *   3 -> rewarding\n\t * @param {number} type \n\t * @param {number} index \n\t * @returns {number[]}\n\t */\n\ttoCborInternal(type, index) {\n\t\treturn CborData.encodeTuple([\n\t\t\tCborData.encodeInteger(BigInt(type)),\n\t\t\tCborData.encodeInteger(BigInt(index)),\n\t\t\tthis.#data.toCbor(),\n\t\t\tCborData.encodeTuple([\n\t\t\t\tCborData.encodeInteger(this.#exUnits.mem),\n\t\t\t\tCborData.encodeInteger(this.#exUnits.cpu),\n\t\t\t]),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {Redeemer}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/** @type {?number} */\n\t\tlet type = null;\n\n\t\t/** @type {?number} */\n\t\tlet index = null;\n\n\t\t/** @type {?UplcData} */\n\t\tlet data = null;\n\n\t\t/** @type {?Cost} */\n\t\tlet cost = null;\n\n\t\tlet n = CborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\ttype = Number(CborData.decodeInteger(fieldBytes));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tindex = Number(CborData.decodeInteger(fieldBytes));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tdata = UplcData.fromCbor(fieldBytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: \n\t\t\t\t\t/** @type {?bigint} */\n\t\t\t\t\tlet mem = null;\n\n\t\t\t\t\t/** @type {?bigint} */\n\t\t\t\t\tlet cpu = null;\n\n\t\t\t\t\tlet m = CborData.decodeTuple(fieldBytes, (j, subFieldBytes) => {\n\t\t\t\t\t\tswitch (j) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tmem = CborData.decodeInteger(subFieldBytes);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tcpu = CborData.decodeInteger(subFieldBytes);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tassert(m == 2);\n\n\t\t\t\t\tif (mem === null || cpu === null) {\n\t\t\t\t\t\tthrow new Error(\"unexpected\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcost = {mem: mem, cpu: cpu};\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field\");\n\t\t\t}\n\t\t});\n\n\t\tassert(n == 4);\n\n\t\tif (type === null || index === null || data === null || cost === null) {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t} else {\n\n\t\t\tswitch(type) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn new SpendingRedeemer(null, index, data, cost);\n\t\t\t\tcase 1:\n\t\t\t\t\treturn new MintingRedeemer(null, index, data, cost);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unhandled redeemer type (Todo)\");\t\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdumpInternal() {\n\t\treturn {\n\t\t\tdata: this.#data.toString(),\n\t\t\texUnits: {\n\t\t\t\tmem: this.#exUnits.mem.toString(),\n\t\t\t\tcpu: this.#exUnits.cpu.toString(),\n\t\t\t},\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {TxBody} body \n\t * @returns {ConstrData}\n\t */\n\ttoScriptPurposeData(body) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {TxBody} body \n\t */\n\tupdateIndex(body) {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @param {Cost} cost \n\t */\n\tsetCost(cost) {\n\t\tthis.#exUnits = cost;\n\t}\n\n\t/**\n\t * @param {NetworkParams} networkParams \n\t * @returns {bigint}\n\t */\n\testimateFee(networkParams) {\n\t\t// this.#exUnits.mem and this.#exUnits can be 0 if we are estimating the fee for an initial balance\n\t\t\n\t\tlet [memFee, cpuFee] = networkParams.exFeeParams;\n\n\t\treturn BigInt(Math.ceil(Number(this.#exUnits.mem)*memFee + Number(this.#exUnits.cpu)*cpuFee));\n\t}\n}\n\nclass SpendingRedeemer extends Redeemer {\n\t#input;\n\t#inputIndex;\n\n\t/**\n\t * @param {?TxInput} input\n\t * @param {number} inputIndex\n\t * @param {UplcData} data \n\t * @param {Cost} exUnits \n\t */\n\tconstructor(input, inputIndex, data, exUnits = {mem: 0n, cpu: 0n}) {\n\t\tsuper(data, exUnits);\n\n\t\tthis.#input = input\n\t\tthis.#inputIndex = inputIndex;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget inputIndex() {\n\t\treturn this.#inputIndex;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn this.toCborInternal(0, this.#inputIndex);\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\tlet obj = super.dumpInternal();\n\n\t\tobj[\"type\"] = 0;\n\t\tobj[\"typeName\"] = \"spending\";\n\t\tobj[\"inputIndex\"] = this.#inputIndex;\n\n\t\treturn obj;\n\t}\n\n\t/**\n\t * @param {TxBody} body \n\t * @returns {ConstrData}\n\t */\n\ttoScriptPurposeData(body) {\n\t\treturn new ConstrData(1, [\n\t\t\tbody.inputs[this.#inputIndex].toOutputIdData(),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {TxBody} body\n\t */\n\tupdateIndex(body) {\n\t\tif (this.#input == null) {\n\t\t\tthrow new Error(\"input can't be null\");\n\t\t} else {\n\t\t\tthis.#inputIndex = body.inputs.findIndex(i => {\n\t\t\t\treturn i.txId.eq(assertDefined(this.#input).txId) && (i.utxoIdx == assertDefined(this.#input).utxoIdx)\n\t\t\t});\n\n\t\t\tassert(this.#inputIndex != -1);\n\t\t}\n\t}\n}\n\nclass MintingRedeemer extends Redeemer {\n\t#mph;\n\t#mphIndex;\n\n\t/**\n\t * @param {?MintingPolicyHash} mph\n\t * @param {number} mphIndex\n\t * @param {UplcData} data\n\t * @param {Cost} exUnits\n\t */\n\tconstructor(mph, mphIndex, data, exUnits = {mem: 0n, cpu: 0n}) {\n\t\tsuper(data, exUnits);\n\n\t\tthis.#mph = mph;\n\t\tthis.#mphIndex = mphIndex;\n\t}\n\n\t/**\n\t * @type {number}\n\t */\n\tget mphIndex() {\n\t\treturn this.#mphIndex;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn this.toCborInternal(1, this.#mphIndex);\n\t}\n\n\t/** \n\t * @returns {Object}\n\t */\n\tdump() {\n\t\tlet obj = super.dumpInternal();\n\n\t\tobj[\"type\"] = 1;\n\t\tobj[\"typeName\"] = \"minting\";\n\t\tobj[\"mphIndex\"] = this.#mphIndex;\n\n\t\treturn obj;\n\t}\n\n\t/**\n\t * @param {TxBody} body \n\t * @returns {ConstrData}\n\t */\n\ttoScriptPurposeData(body) {\n\t\tlet mph = body.minted.mintingPolicies[this.#mphIndex];\n\n\t\treturn new ConstrData(0, [\n\t\t\tnew ByteArrayData(mph.bytes),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {TxBody} body \n\t */\n\tupdateIndex(body) {\n\t\tif (this.#mph === null) {\n\t\t\tthrow new Error(\"can't have null mph at this point\");\n\t\t} else {\n\t\t\tthis.#mphIndex = body.minted.mintingPolicies.findIndex(mph => mph.eq(assertDefined(this.#mph)));\n\n\t\t\tassert(this.#mphIndex != -1);\n\t\t}\n\t}\n}\n\n/**\n * Inside helios this type is named OutputDatum in order to distinguish it from the user defined Datum,\n * but outside helios scripts there isn't much sense to keep using the name 'OutputDatum' instead of Datum\n */\nclass Datum extends CborData {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {number[]} bytes \n\t * @returns {Datum}\n\t */\n\tstatic fromCbor(bytes) {\n\t\t/** @type {?number} */\n\t\tlet type = null;\n\n\t\t/** @type {?Datum} */\n\t\tlet res = null;\n\n\t\tlet n = CborData.decodeTuple(bytes, (i, fieldBytes) => {\n\t\t\tswitch(i) {\n\t\t\t\tcase 0:\n\t\t\t\t\ttype = Number(CborData.decodeInteger(fieldBytes));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tif (type == 0) {\n\t\t\t\t\t\tres = new HashedDatum(DatumHash.fromCbor(fieldBytes));\n\t\t\t\t\t} else if (type == 1) {\n\t\t\t\t\t\tassert(CborData.decodeTag(fieldBytes) == 24n);\n\n\t\t\t\t\t\tlet dataBytes = CborData.decodeBytes(fieldBytes);\n\t\t\t\t\t\tlet data = UplcData.fromCbor(dataBytes);\n\n\t\t\t\t\t\tres = new InlineDatum(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"unrecognized field label\");\n\t\t\t}\n\t\t});\n\n\t\tassert(n == 2);\n\n\t\tif (type === null || res === null) {\n\t\t\tthrow new Error(\"unexpected\");\n\t\t} else {\n\t\t\treturn res;\n\t\t}\n\t}\n\n\t/**\n\t * @param {UplcDataValue | UplcData | HeliosData} data\n\t * @returns {HashedDatum}\n\t */\n\tstatic hashed(data) {\n\t\tif (data instanceof HeliosData) {\n\t\t\treturn HashedDatum.fromData(data._toUplcData());\n\t\t} else {\n\t\t\treturn HashedDatum.fromData(UplcDataValue.unwrap(data));\n\t\t}\n\t}\n\n\t/**\n\t * @param {UplcDataValue | UplcData | HeliosData} data\n\t * @returns {InlineDatum}\n\t */\n\tstatic inline(data) {\n\t\tif (data instanceof HeliosData) {\n\t\t\treturn new InlineDatum(data._toUplcData());\n\t\t} else {\n\t\t\treturn new InlineDatum(UplcDataValue.unwrap(data));\n\t\t}\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisInline() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisHashed() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @type {DatumHash}\n\t */\n\tget hash() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @type {?UplcData}\n\t */\n\tget data() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n\n\t/**\n\t * @returns {ConstrData}\n\t */\n\ttoData() {\n\t\tthrow new Error(\"not yet implemented\");\n\t}\n}\n\n/**\n * Inside helios this type is named OutputDatum::Hash in order to distinguish it from the user defined Datum,\n * but outside helios scripts there isn't much sense to keep using the name 'OutputDatum' instead of Datum\n */\nclass HashedDatum extends Datum {\n\t/** @type {DatumHash} */\n\t#hash;\n\n\t/** @type {?UplcData} */\n\t#origData;\n\n\t/**\n\t * @param {DatumHash} hash \n\t * @param {?UplcData} origData\n\t */\n\tconstructor(hash, origData = null) {\n\t\tsuper();\n\t\tthis.#hash = hash;\n\t\tthis.#origData = origData;\n\n\t\tif (this.#origData !== null) {\n\t\t\tassert(eq(this.#hash.bytes, Crypto.blake2b(this.#origData.toCbor())));\n\t\t}\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisInline() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisHashed() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @type {DatumHash}\n\t */\n\tget hash() {\n\t\treturn this.#hash;\n\t}\n\n\t/**\n\t * @type {?UplcData}\n\t */\n\tget data() {\n\t\treturn this.#origData;\n\t}\n\n\t/**\n\t * Used by script context emulation\n\t * @returns {ConstrData}\n\t */\n\ttoData() {\n\t\treturn new ConstrData(1, [new ByteArrayData(this.#hash.bytes)]);\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeTuple([\n\t\t\tCborData.encodeInteger(0n),\n\t\t\tthis.#hash.toCbor(),\n\t\t]);\n\t}\n\n\t/**\n\t * @param {UplcData} data \n\t * @returns {HashedDatum}\n\t */\n\tstatic fromData(data) {\n\t\treturn new HashedDatum(new Hash(Crypto.blake2b(data.toCbor())), data);\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\thash: this.#hash.dump(),\n\t\t\tcbor: this.#origData === null ? null : bytesToHex(this.#origData.toCbor()),\n\t\t\tschema: this.#origData === null ? null : JSON.parse(this.#origData.toSchemaJson())\n\t\t};\n\t}\n}\n\n/**\n * Inside helios this type is named OutputDatum::Inline in order to distinguish it from the user defined Datum,\n * but outside helios scripts there isn't much sense to keep using the name 'OutputDatum' instead of Datum\n */\nclass InlineDatum extends Datum {\n\t/** @type {UplcData} */\n\t#data;\n\n\t/**\n\t * @param {UplcData} data\n\t */\n\tconstructor(data) {\n\t\tsuper();\n\t\tthis.#data = data;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisInline() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tisHashed() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * @type {DatumHash}\n\t */\n\tget hash() {\n\t\treturn new DatumHash(Crypto.blake2b(this.#data.toCbor()));\n\t}\n\n\t/**\n\t * @type {UplcData}\n\t */\n\tget data() {\n\t\treturn this.#data;\n\t}\n\n\t/**\n\t * Used by script context emulation\n\t * @returns {ConstrData}\n\t */\n\ttoData() {\n\t\treturn new ConstrData(2, [this.#data]);\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\treturn CborData.encodeTuple([\n\t\t\tCborData.encodeInteger(1n),\n\t\t\tCborData.encodeTag(24n).concat(CborData.encodeBytes(this.#data.toCbor()))\n\t\t]);\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\treturn {\n\t\t\tinlineCbor: bytesToHex(this.#data.toCbor()),\n\t\t\tinlineSchema: JSON.parse(this.#data.toSchemaJson())\n\t\t};\n\t}\n}\n\n/**\n * The inner 'any' is also Metadata, but jsdoc doesn't allow declaring recursive types\n * Metadata is essentially a JSON schema object\n * @typedef {{map: [any, any][]} | any[] | string | number} Metadata\n */\n\n/**\n * @param {Metadata} metadata \n * @returns {number[]}\n */\nfunction encodeMetadata(metadata) {\n\tif (typeof metadata === 'string') {\n\t\treturn CborData.encodeUtf8(metadata, true);\n\t} else if (typeof metadata === 'number') {\n\t\tassert(metadata % 1.0 == 0.0);\n\n\t\treturn CborData.encodeInteger(BigInt(metadata));\n\t} else if (Array.isArray(metadata)) {\n\t\treturn CborData.encodeDefList(metadata.map(item => encodeMetadata(item)));\n\t} else if (metadata instanceof Object && \"map\" in metadata && Object.keys(metadata).length == 1) {\n\t\tlet pairs = metadata[\"map\"];\n\n\t\tif (Array.isArray(pairs)) {\n\t\t\treturn CborData.encodeMap(pairs.map(pair => {\n\t\t\t\tif (Array.isArray(pair) && pair.length == 2) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\tencodeMetadata(pair[0]),\n\t\t\t\t\t\tencodeMetadata(pair[1])\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"invalid metadata schema\");\t\t\n\t\t\t\t}\n\t\t\t}));\n\t\t} else {\n\t\t\tthrow new Error(\"invalid metadata schema\");\n\t\t}\n\t} else {\n\t\tthrow new Error(\"invalid metadata schema\");\n\t}\n}\n\n/**\n * Shifts bytes to next Cbor element\n * @param {number[]} bytes \n * @returns {Metadata}\n */\nfunction decodeMetadata(bytes) {\n\tif (CborData.isUtf8(bytes)) {\n\t\treturn CborData.decodeUtf8(bytes);\n\t} else if (CborData.isList(bytes)) {\n\t\t/**\n\t\t * @type {Metadata[]}\n\t\t */\n\t\tlet items = [];\n\n\t\tCborData.decodeList(bytes, (_, itemBytes) => {\n\t\t\titems.push(decodeMetadata(itemBytes));\n\t\t});\n\n\t\treturn items;\n\t} else if (CborData.isMap(bytes)) {\n\t\t/**\n\t\t * @type {[Metadata, Metadata][]}\n\t\t */\n\t\tlet pairs = [];\n\n\t\tCborData.decodeMap(bytes, (_, pairBytes) => {\n\t\t\tpairs.push([\n\t\t\t\tdecodeMetadata(pairBytes),\n\t\t\t\tdecodeMetadata(pairBytes)\n\t\t\t]);\n\t\t});\n\n\t\treturn {\"map\": pairs};\n\t} else {\n\t\treturn Number(CborData.decodeInteger(bytes));\n\t}\n}\n\nclass TxMetadata {\n\t/**\n\t * @type {Object.<number, Metadata>} \n\t */\n\t#metadata;\n\n\tconstructor() {\n\t\tthis.#metadata = {};\n\t}\n\n\t/**\n\t *\n\t * @param {number} tag\n\t * @param {Metadata} data\n\t */\n\tadd(tag, data) {\n\t\tthis.#metadata[tag] = data;\n\t}\n\n\t/**\n\t * @type {number[]}\n\t */\n\tget keys() {\n\t\treturn Object.keys(this.#metadata).map(key => parseInt(key)).sort();\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tdump() {\n\t\tlet obj = {};\n\n\t\tfor (let key of this.keys) {\n\t\t\tobj[key] =this.#metadata[key];\n\t\t}\n\n\t\treturn obj;\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\ttoCbor() {\n\t\t/**\n\t\t * @type {[number[], number[]][]}\n\t\t */\n\t\tconst pairs = this.keys.map(key => [\n\t\t\tCborData.encodeInteger(BigInt(key)),\n\t\t\tencodeMetadata(this.#metadata[key])\n\t\t]);\n\t\t\n\t\treturn CborData.encodeMap(pairs);\n\t}\n\n\t/**\n\t* Decodes a TxMetadata instance from Cbor\n\t* @param {number[]} data\n\t* @returns {TxMetadata}\n\t*/\n\tstatic fromCbor(data) {\n\t\tconst txMetadata = new TxMetadata();\n\n\t\tCborData.decodeMap(data, (_, pairBytes) => {\n\t\t\ttxMetadata.add(\n\t\t\t\tNumber(CborData.decodeInteger(pairBytes)), \n\t\t\t\tdecodeMetadata(pairBytes)\n\t\t\t);\n\t\t});\n\n\t\treturn txMetadata;\n\t}\n}\n\n\n\n////////////////////////////////////\n// Section 26: Highlighting function\n////////////////////////////////////\n\n/**\n * Categories for syntax highlighting\n */\nconst SyntaxCategory = {\n\tNormal:     0,\n\tComment:    1,\n\tLiteral:    2,\n\tSymbol:     3,\n\tType:       4,\n\tKeyword:    5,\n\tError:      6,\n};\n\n/**\n * Applies syntax highlighting by returning a list of char categories.\n * Not part of Tokeizer because it needs to be very fast and can't throw errors.\n * Doesn't depend on any other functions so it can easily be ported to other languages.\n * @param {string} src\n * @returns {Uint8Array}\n */\nfunction highlight(src) {\n\tlet n = src.length;\n\n\tconst SyntaxState = {\n\t\tNormal:        0,\n\t\tSLComment:     1,\n\t\tMLComment:     2,\n\t\tString:        3,\n\t\tNumberStart:   4,\n\t\tHexNumber:     5,\n\t\tBinaryNumber:  6,\n\t\tOctalNumber:   7,\n\t\tDecimalNumber: 8,\n\t\tByteArray:     9,\n\t};\n\n\t// array of categories\n\tlet data = new Uint8Array(n);\n\n\tlet j = 0; // position in data\n\tlet state = SyntaxState.Normal;\n\n\t/** @type {SymbolToken[]} */\n\tlet groupStack = [];\n\t\n\tfor (let i = 0; i < n; i++) {\n\t\tlet c = src[i];\n\t\tlet isLast = i == n - 1;\n\n\t\tswitch (state) {\n\t\t\tcase SyntaxState.Normal:\n\t\t\t\tif (c == \"/\") {\n\t\t\t\t\t// maybe comment\n\t\t\t\t\tif (!isLast && src[i+1] == \"/\") {\n\t\t\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\t\t\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\t\t\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tstate = SyntaxState.SLComment;\n\t\t\t\t\t} else if (!isLast && src[i+1] == \"*\") {\n\t\t\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\t\t\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tstate = SyntaxState.MLComment;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t}\n\t\t\t\t} else if (c == \"[\" || c == \"]\" || c == \"{\" || c == \"}\" || c == \"(\" || c == \")\") {\n\t\t\t\t\tlet s = new SymbolToken(new Site(new Source(src), i), c);\n\n\t\t\t\t\tif (Group.isOpenSymbol(s)) {\n\t\t\t\t\t\tgroupStack.push(s);\n\t\t\t\t\t\tdata[j++] = SyntaxCategory.Normal;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet prevGroup = groupStack.pop();\n\n\t\t\t\t\t\tif (prevGroup === undefined) {\n\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Error;\n\t\t\t\t\t\t} else if (c == Group.matchSymbol(prevGroup)) {\n\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Normal;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdata[prevGroup.site.startPos] = SyntaxCategory.Error;\n\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (c == \"%\" || c == \"!\" || c == \"&\" || c == \"*\" || c == \"+\" || c == \"-\" || c == \"<\" || c == \"=\" || c == \">\" || c == \"|\") {\n\t\t\t\t\t// symbol\n\t\t\t\t\tswitch (c) {\n\t\t\t\t\t\tcase \"&\":\n\t\t\t\t\t\t\tif (!isLast && src[i+1] == \"&\") {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Normal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"|\":\n\t\t\t\t\t\t\tif (!isLast && src[i+1] == \"|\") {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Normal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"!\":\n\t\t\t\t\t\t\tif (!isLast && src[i+1] == \"=\") {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"=\":\n\t\t\t\t\t\t\tif (!isLast && (src[i+1] == \"=\" || src[i+1] == \">\")) {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \">\":\n\t\t\t\t\t\t\tif (!isLast && src[i+1] == \"=\") {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"<\":\n\t\t\t\t\t\t\tif (!isLast && src[i+1] == \"=\") {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"-\":\n\t\t\t\t\t\t\tif (!isLast && src[i+1] == \">\") {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata[j++] = SyntaxCategory.Symbol;\n\t\t\t\t\t}\n\t\t\t\t} else if (c == \"\\\"\") {\n\t\t\t\t\t// literal string\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.String;\n\t\t\t\t} else if (c == \"0\") {\n\t\t\t\t\t// literal number\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.NumberStart;\n\t\t\t\t} else if (c >= \"1\" && c <= \"9\") {\n\t\t\t\t\t// literal decimal number\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.DecimalNumber;\n\t\t\t\t} else if (c == \"#\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.ByteArray;\n\t\t\t\t} else if ((c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\") || c == \"_\") {\n\t\t\t\t\t// maybe keyword, builtin type, or boolean\n\t\t\t\t\tlet i0 = i;\n\t\t\t\t\tlet chars = [c];\n\t\t\t\t\t// move i to the last word char\n\t\t\t\t\twhile (i + 1 < n) {\n\t\t\t\t\t\tlet d = src[i+1];\n\n\t\t\t\t\t\tif ((d >= \"a\" && d <= \"z\") || (d >= \"A\" && d <= \"Z\") || d == \"_\" || (d >= \"0\" && d <= \"9\")) {\n\t\t\t\t\t\t\tchars.push(d);\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet word = chars.join(\"\");\n\t\t\t\t\t/** @type {number} */\n\t\t\t\t\tlet type;\n\t\t\t\t\tswitch (word) {\n\t\t\t\t\t\tcase \"true\":\n\t\t\t\t\t\tcase \"false\":\n\t\t\t\t\t\t\ttype = SyntaxCategory.Literal;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"Bool\":\n\t\t\t\t\t\tcase \"Int\":\n\t\t\t\t\t\tcase \"ByteArray\":\n\t\t\t\t\t\tcase \"String\":\n\t\t\t\t\t\tcase \"Option\":\n\t\t\t\t\t\t\ttype = SyntaxCategory.Type;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\tcase \"else\":\n\t\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\tcase \"func\":\n\t\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\tcase \"struct\":\n\t\t\t\t\t\tcase \"enum\":\n\t\t\t\t\t\tcase \"import\":\n\t\t\t\t\t\tcase \"print\":\n\t\t\t\t\t\tcase \"error\":\n\t\t\t\t\t\tcase \"self\":\n\t\t\t\t\t\t\ttype = SyntaxCategory.Keyword;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"testing\":\n\t\t\t\t\t\tcase \"spending\":\n\t\t\t\t\t\tcase \"staking\":\n\t\t\t\t\t\tcase \"minting\":\n\t\t\t\t\t\tcase \"module\":\n\t\t\t\t\t\t\tif (i0 == 0) {\n\t\t\t\t\t\t\t\ttype = SyntaxCategory.Keyword;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttype = SyntaxCategory.Normal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttype = SyntaxCategory.Normal;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let ii = i0; ii < i0 + chars.length; ii++) {\n\t\t\t\t\t\tdata[j++] = type;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.SLComment:\n\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\t\t\t\tif (c == \"\\n\") {\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.MLComment:\n\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\n\t\t\t\tif (c == \"*\" && !isLast && src[i+1] == \"/\") {\n\t\t\t\t\ti++;\n\t\t\t\t\tdata[j++] = SyntaxCategory.Comment;\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.String:\n\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\n\t\t\t\tif (c == \"\\\"\") {\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.NumberStart:\n\t\t\t\tif (c == \"x\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.HexNumber;\n\t\t\t\t} else if (c == \"o\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.OctalNumber;\n\t\t\t\t} else if (c == \"b\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.BinaryNumber;\n\t\t\t\t} else if (c >= \"0\" && c <= \"9\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t\tstate = SyntaxState.DecimalNumber;\n\t\t\t\t} else {\n\t\t\t\t\ti--;\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.DecimalNumber:\n\t\t\t\tif (c >= \"0\" && c <= \"9\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t} else {\n\t\t\t\t\ti--;\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.HexNumber:\n\t\t\tcase SyntaxState.ByteArray:\n\t\t\t\tif ((c >= \"a\" && c <= \"f\") || (c >= \"0\" && c <= \"9\")) {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t} else {\n\t\t\t\t\ti--;\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.OctalNumber:\n\t\t\t\tif (c >= \"0\" && c <= \"7\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t} else {\n\t\t\t\t\ti--;\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SyntaxState.BinaryNumber:\n\t\t\t\tif (c == \"0\" || c == \"1\") {\n\t\t\t\t\tdata[j++] = SyntaxCategory.Literal;\n\t\t\t\t} else {\n\t\t\t\t\ti--;\n\t\t\t\t\tstate = SyntaxState.Normal;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"unhandled SyntaxState\");\n\t\t}\t\t\n\t}\n\n\tfor (let s of groupStack) {\n\t\tdata[s.site.startPos] = SyntaxCategory.Error;\n\t}\n\n\treturn data;\n}\n\n\n//////////////////////////////////////\n// Section 27: Fuzzy testing framework\n//////////////////////////////////////\n\n/**\n * @typedef {() => UplcData} ValueGenerator\n */\n\n/**\n * @typedef {(args: UplcValue[], res: (UplcValue | UserError)) => (boolean | Object.<string, boolean>)} PropertyTest\n */\n\n/**\n * Creates generators and runs script tests\n */\nclass FuzzyTest {\n\t/**\n\t * @type {NumberGenerator} - seed generator\n\t */\n\t#rand;\n\n\t#runsPerTest;\n\n\t#simplify;\n\n\t/**\n\t * @param {number} seed\n\t * @param {number} runsPerTest\n\t * @param {boolean} simplify - if true then also test the simplified program\n\t */\n\tconstructor(seed = 0, runsPerTest = 100, simplify = false) {\n\t\tconsole.log(\"starting fuzzy testing  with seed\", seed);\n\n\t\tthis.#rand = Crypto.rand(seed);\n\t\tthis.#runsPerTest = runsPerTest;\n\t\tthis.#simplify = simplify;\n\t}\n\n\t/**\n\t * @returns {NumberGenerator}\n\t */\n\tnewRand() {\n\t\tlet seed = this.#rand()*1000000;\n\n\t\treturn Crypto.rand(seed);\n\t}\n\n\t/**\n\t * Returns a gernator for whole numbers between min and max\n\t * @param {number} min\n\t * @param {number} max\n\t * @returns {() => bigint}\n\t */\n\trawInt(min = -10000000, max = 10000000) {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\treturn BigInt(Math.floor(rand()*(max - min)) + min);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for whole numbers between min and max, wrapped with IntData\n\t * @param {number} min\n\t * @param {number} max\n\t * @returns {ValueGenerator}\n\t */\n\tint(min = -10000000, max = 10000000) {\t\t\n\t\tlet rand = this.rawInt(min, max);\n\n\t\treturn function() {\n\t\t\treturn new IntData(rand());\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for strings containing any utf-8 character\n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {ValueGenerator}\n\t */\n\tstring(minLength = 0, maxLength = 64) {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\tlet n = Math.round(rand()*(maxLength - minLength)) + minLength;\n\t\t\tif (n < 0) {\n\t\t\t\tn = 0;\n\t\t\t}\n\n\t\t\tlet chars = [];\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tchars.push(String.fromCodePoint(Math.round(rand()*1112064)));\n\t\t\t}\n\t\t\t\n\t\t\treturn ByteArrayData.fromString(chars.join(\"\"));\n\t\t}\n\t}\n\n\t/** \n\t * Returns a generator for strings with ascii characters from 32 (space) to 126 (tilde)\n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {ValueGenerator}\n\t */\n\tascii(minLength = 0, maxLength = 64) {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\tlet n = Math.round(rand()*(maxLength - minLength)) + minLength;\n\t\t\tif (n < 0) {\n\t\t\t\tn = 0;\n\t\t\t}\n\n\t\t\tlet chars = [];\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tchars.push(String.fromCharCode(Math.round(rand()*94 + 32)));\n\t\t\t}\n\t\t\t\n\t\t\treturn ByteArrayData.fromString(chars.join(\"\"));\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for bytearrays containing only valid ascii characters\n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {ValueGenerator}\n\t */\n\tasciiBytes(minLength = 0, maxLength = 64) {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\tlet n = Math.round(rand()*(maxLength - minLength)) + minLength;\n\t\t\tif (n < 0) {\n\t\t\t\tn = 0;\n\t\t\t}\n\n\t\t\tlet bytes = [];\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tbytes.push(Math.floor(rand()*94 + 32));\n\t\t\t}\n\n\t\t\treturn new ByteArrayData(bytes);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for bytearrays the are also valid utf8 strings\n\t * @param {number} minLength - length of the string, not of the bytearray!\n\t * @param {number} maxLength - length of the string, not of the bytearray!\n\t * @returns {ValueGenerator}\n\t */\n\tutf8Bytes(minLength = 0, maxLength = 64) {\n\t\treturn this.string(minLength, maxLength);\n\t}\n\n\t/**\n\t * Returns a generator for number[]\n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {() => number[]}\n\t */\n\trawBytes(minLength = 0, maxLength = 64) {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\tlet n = Math.round(rand()*(maxLength - minLength)) + minLength;\n\t\t\tif (n < 0) {\n\t\t\t\tn = 0;\n\t\t\t}\n\n\t\t\tlet bytes = [];\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tbytes.push(Math.floor(rand()*256));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for bytearrays \n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {ValueGenerator}\n\t */\n\tbytes(minLength = 0, maxLength = 64) {\n\t\tlet rand = this.rawBytes(minLength, maxLength);\n\n\t\treturn function() {\n\t\t\tlet bytes = rand();\n\n\t\t\treturn new ByteArrayData(bytes);\n\t\t}\n\t}\n\t/**\n\t * Returns a generator for booleans,\n\t * @returns {() => boolean}\n\t */\n\trawBool() {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\tlet x = rand();\n\n\t\t\treturn x >= 0.5;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for booleans, wrapped with ConstrData\n\t * @returns {ValueGenerator}\n\t */\n\tbool() {\n\t\tlet rand = this.rawBool();\n\n\t\treturn function() {\n\t\t\treturn new ConstrData(rand() ? 1 : 0, []);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for options\n\t * @param {ValueGenerator} someGenerator\n\t * @param {number} noneProbability\n\t * @returns {ValueGenerator}\n\t */\n\toption(someGenerator, noneProbability = 0.5) {\n\t\tlet rand = this.newRand();\n\n\t\treturn function() {\n\t\t\tlet x = rand();\n\n\t\t\tif (x < noneProbability) {\n\t\t\t\treturn new ConstrData(1, []);\n\t\t\t} else {\n\t\t\t\treturn new ConstrData(0, [someGenerator()]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for lists\n\t * @param {ValueGenerator} itemGenerator\n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {ValueGenerator}\n\t */\n\tlist(itemGenerator, minLength = 0, maxLength = 10) {\n\t\tlet rand = this.newRand();\n\n\t\tif (minLength < 0) {\n\t\t\tminLength = 0;\n\t\t}\n\n\t\tif (maxLength < 0) {\n\t\t\tmaxLength = 0;\n\t\t}\n\n\t\treturn function() {\n\t\t\tlet n = Math.round(rand()*(maxLength - minLength)) + minLength;\n\t\t\tif (n < 0) {\n\t\t\t\tn = 0;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {UplcData[]}\n\t\t\t */\n\t\t\tlet items = [];\n\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\titems.push(itemGenerator());\n\t\t\t}\n\n\t\t\treturn new ListData(items);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for maps\n\t * @param {ValueGenerator} keyGenerator\n\t * @param {ValueGenerator} valueGenerator\n\t * @param {number} minLength\n\t * @param {number} maxLength\n\t * @returns {ValueGenerator}\n\t */\n\tmap(keyGenerator, valueGenerator, minLength = 0, maxLength = 10) {\n\t\tlet rand = this.newRand();\n\n\t\tif (minLength < 0) {\n\t\t\tminLength = 0;\n\t\t}\n\n\t\tif (maxLength < 0) {\n\t\t\tmaxLength = 0;\n\t\t}\n\n\t\treturn function() {\n\t\t\tlet n = Math.round(rand()*(maxLength - minLength)) + minLength;\n\n\t\t\tif (n < 0) {\n\t\t\t\tn = 0;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {[UplcData, UplcData][]}\n\t\t\t */\n\t\t\tlet pairs = [];\n\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tpairs.push([keyGenerator(), valueGenerator()]);\n\t\t\t}\n\n\t\t\treturn new MapData(pairs);\n\t\t};\n\t}\n\n\t/**\n\t * Returns a generator for objects\n\t * @param {...ValueGenerator} itemGenerators\n\t * @returns {ValueGenerator}\n\t */\n\tobject(...itemGenerators) {\n\t\treturn function() {\n\t\t\tlet items = itemGenerators.map(g => g());\n\n\t\t\treturn new ConstrData(0, items);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a generator for tagged constr\n\t * @param {number | NumberGenerator} tag\n\t * @param {...ValueGenerator} fieldGenerators\n\t * @returns {ValueGenerator}\n\t */\n\tconstr(tag, ...fieldGenerators) {\n\t\treturn function() {\n\t\t\tconst fields = fieldGenerators.map(g => g());\n\n\t\t\tconst finalTag = (typeof tag == \"number\") ? tag : Math.round(tag()*100);\n\t\t\t\n\t\t\treturn new ConstrData(finalTag, fields);\n\t\t}\n\t}\n\n\t/**\n\t * Run a test\n\t * @param {ValueGenerator[]} argGens\n\t * @param {string} src\n\t * @param {PropertyTest} propTest\n\t * @param {number} nRuns\n\t * @param {boolean} simplify\n\t * @returns {Promise<void>} - throws an error if any of the property tests fail\n\t */\n\tasync test(argGens, src, propTest, nRuns = this.#runsPerTest, simplify = false) {\n\t\t// compilation errors here aren't caught\n\n\t\tlet purposeName = extractScriptPurposeAndName(src);\n\n\t\tif (purposeName === null) {\n\t\t\tthrow new Error(\"failed to get script purpose and name\");\n\t\t} else {\n\t\t\tlet [_, testName] = purposeName;\n\n\t\t\tlet program = Program.new(src).compile(simplify);\n\n\t\t\tfor (let it = 0; it < nRuns; it++) {\n\t\t\t\tlet args = argGens.map(gen => new UplcDataValue(Site.dummy(), gen()));\n\t\t\t\n\t\t\t\tlet result = await program.run(args);\n\n\t\t\t\tlet obj = propTest(args, result);\n\n\t\t\t\tif (typeof obj == \"boolean\") {\n\t\t\t\t\tif (!obj) {\n\t\t\t\t\t\tthrow new Error(`property test '${testName}' failed (info: (${args.map(a => a.toString()).join(', ')}) => ${result.toString()})`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check for failures\n\t\t\t\t\tfor (let key in obj) {\n\t\t\t\t\t\tif (!obj[key]) {\n\t\t\t\t\t\t\tthrow new Error(`property test '${testName}:${key}' failed (info: (${args.map(a => a.toString()).join(', ')}) => ${result.toString()})`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(`property tests for '${testName}' succeeded${simplify ? \" (simplified)\":\"\"} (${program.calcSize()} bytes)`);\n\t\t}\n\n\t\tif (!simplify && this.#simplify) {\n\t\t\tawait this.test(argGens, src, propTest, nRuns, true);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Object.<string, ValueGenerator>} paramGenerators\n\t * @param {string[]} paramArgs\n\t * @param {string} src\n\t * @param {PropertyTest} propTest\n\t * @param {number} nRuns\n\t * @param {boolean} simplify\n\t * @returns {Promise<void>}\n\t */\n\tasync testParams(paramGenerators, paramArgs, src, propTest, nRuns = this.#runsPerTest, simplify = false) {\n\t\tlet program = Program.new(src);\n\n\t\tlet purposeName = extractScriptPurposeAndName(src);\n\n\t\tif (purposeName === null) {\n\t\t\tthrow new Error(\"failed to get script purpose and name\");\n\t\t} else {\n\t\t\tlet [_, testName] = purposeName;\n\n\t\t\tfor (let it = 0; it < nRuns; it++) {\n\n\t\t\t\tfor (let key in paramGenerators) {\n\t\t\t\t\tprogram.changeParamSafe(key, paramGenerators[key]())\n\t\t\t\t}\n\n\t\t\t\tlet args = paramArgs.map(paramArg => program.evalParam(paramArg));\n\t\t\t\n\t\t\t\tlet coreProgram = Program.new(src).compile(simplify);\n\n\t\t\t\tlet result = await coreProgram.run(args);\n\n\t\t\t\tlet obj = propTest(args, result);\n\n\t\t\t\tif (typeof obj == \"boolean\") {\n\t\t\t\t\tif (!obj) {\n\t\t\t\t\t\tthrow new Error(`property test '${testName}' failed (info: (${args.map(a => a.toString()).join(', ')}) => ${result.toString()})`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check for failures\n\t\t\t\t\tfor (let key in obj) {\n\t\t\t\t\t\tif (!obj[key]) {\n\t\t\t\t\t\t\tthrow new Error(`property test '${testName}:${key}' failed (info: (${args.map(a => a.toString()).join(', ')}) => ${result.toString()})`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(`property tests for '${testName}' succeeded${simplify ? \" (simplified)\":\"\"}`);\n\t\t}\n\n\t\tif (!simplify && this.#simplify) {\n\t\t\tawait this.testParams(paramGenerators, paramArgs, src, propTest, nRuns, true);\n\t\t}\n\t}\n}\n\n\n////////////////////////////\n// Section 28: CoinSelection\n////////////////////////////\n\n\n\n/**\n * Collection of coin selection algorithms\n */\nclass CoinSelection {\n    /**\n     * @param {UTxO[]} utxos \n     * @param {Value} amount \n     * @param {boolean} largestFirst\n     * @returns {[UTxO[], UTxO[]]} - [picked, not picked that can be used as spares]\n     */\n    static selectExtremumFirst(utxos, amount, largestFirst) {\n        let sum = new Value();\n\n        /** @type {UTxO[]} */\n        let notSelected = utxos.slice();\n\n        /** @type {UTxO[]} */\n        const selected = [];\n\n        /**\n         * Selects smallest utxos until 'needed' is reached\n         * @param {bigint} neededQuantity\n         * @param {(utxo: UTxO) => bigint} getQuantity\n         */\n        function select(neededQuantity, getQuantity) {\n            // first sort notYetPicked in ascending order when picking smallest first,\n            // and in descending order when picking largest first\n            // sort UTxOs that contain more assets last\n            notSelected.sort((a, b) => {\n                const qa = getQuantity(a);\n                const qb = getQuantity(b);\n\n                const sign = largestFirst ? -1 : 1;\n\n                if (qa != 0n && qb == 0n) {\n                    return sign;\n                } else if (qa == 0n && qb != 0n) {\n                    return -sign;\n                } else if (qa == 0n && qb == 0n) {\n                    return 0;\n                } else {\n                    const na = a.value.assets.nTokenTypes;\n                    const nb = b.value.assets.nTokenTypes;\n\n                    if (na == nb) {\n                        return Number(qa - qb)*sign;\n                    } else if (na < nb) {\n                        return sign;\n                    } else {\n                        return -sign\n                    }\n                }\n            });\n\n            let count = 0n;\n            const remaining = [];\n\n            while (count < neededQuantity || count == 0n) { // must select at least one utxo if neededQuantity == 0n\n                const utxo = notSelected.shift();\n\n                if (utxo === undefined) {\n                    throw new Error(\"not enough utxos to cover amount\");\n                } else {\n                    const qty = getQuantity(utxo);\n\n                    if (qty > 0n) {\n                        count += qty;\n                        selected.push(utxo);\n                        sum = sum.add(utxo.value);\n                    } else {\n                        remaining.push(utxo)\n                    }\n                }\n            }\n\n            notSelected = notSelected.concat(remaining);\n        }\n\n        /**\n         * Select UTxOs while looping through (MintingPolicyHash,TokenName) entries\n         */\n        const mphs = amount.assets.mintingPolicies;\n\n        for (const mph of mphs) {\n            const tokenNames = amount.assets.getTokenNames(mph);\n\n            for (const tokenName of tokenNames) {\n                const need = amount.assets.get(mph, tokenName);\n                const have = sum.assets.get(mph, tokenName);\n\n                if (have < need) {\n                    const diff = need - have;\n\n                    select(diff, (utxo) => utxo.value.assets.get(mph, tokenName));\n                }\n            }\n        }\n\n        // now use the same strategy for lovelace\n        const need = amount.lovelace;\n        const have = sum.lovelace;\n\n        if (have < need) {\n            const diff = need - have;\n\n            select(diff, (utxo) => utxo.value.lovelace);\n        }\n\n        assert(selected.length + notSelected.length == utxos.length, \"internal error: select algorithm doesn't conserve utxos\");\n\n        return [selected, notSelected];\n    }\n\n    /**\n     * @param {UTxO[]} utxos \n     * @param {Value} amount \n     * @returns {[UTxO[], UTxO[]]} - [selected, not selected]\n     */\n    static selectSmallestFirst(utxos, amount) {\n        return CoinSelection.selectExtremumFirst(utxos, amount, false);\n    }\n\n    /**\n     * @param {UTxO[]} utxos \n     * @param {Value} amount \n     * @returns {[UTxO[], UTxO[]]} - [selected, not selected]\n     */\n    static selectLargestFirst(utxos, amount) {\n        return CoinSelection.selectExtremumFirst(utxos, amount, true);\n    }\n}\n\n\n//////////////////////\n// Section 29: Wallets\n//////////////////////\n\n\n/**\n * @typedef {{\n *     isMainnet(): Promise<boolean>,\n *     usedAddresses: Promise<Address[]>,\n *     unusedAddresses: Promise<Address[]>,\n *     utxos: Promise<UTxO[]>,\n *     signTx(tx: Tx): Promise<Signature[]>,\n *     submitTx(tx: Tx): Promise<TxId>\n * }} Wallet\n */\n\n/**\n * @typedef {{\n *     getNetworkId(): Promise<number>,\n *     getUsedAddresses(): Promise<string[]>,\n *     getUnusedAddresses(): Promise<string[]>,\n *     getUtxos(): Promise<string[]>,\n *     signTx(txHex: string, partialSign: boolean): Promise<string>,\n *     submitTx(txHex: string): Promise<string>\n * }} Cip30Handle\n */\n\n/**\n * @implements {Wallet}\n */\nclass Cip30Wallet {\n    #handle;\n\n    /**\n     * @param {Cip30Handle} handle \n     */\n    constructor(handle) {\n        this.#handle = handle;\n    }\n\n    /**\n     * @returns {Promise<boolean>}\n     */\n    async isMainnet() {\n        return (await this.#handle.getNetworkId()) == 1;\n    }\n\n    /**\n     * @type {Promise<Address[]>}\n     */\n    get usedAddresses() {\n        return this.#handle.getUsedAddresses().then(addresses => addresses.map(a => new Address(a)));\n    }\n\n    /**\n     * @type {Promise<Address[]>}\n     */\n    get unusedAddresses() {\n        return this.#handle.getUnusedAddresses().then(addresses => addresses.map(a => new Address(a)));\n    }\n\n    /**\n     * @type {Promise<UTxO[]>}\n     */\n    get utxos() {\n        return this.#handle.getUtxos().then(utxos => utxos.map(u => UTxO.fromCbor(hexToBytes(u))));\n    }\n\n    /**\n     * @param {Tx} tx \n     * @returns {Promise<Signature[]>}\n     */\n    async signTx(tx) {\n        const res = await this.#handle.signTx(bytesToHex(tx.toCbor()), true);\n        \n        return TxWitnesses.fromCbor(hexToBytes(res)).signatures;\n    }\n\n    /**\n     * @param {Tx} tx \n     * @returns {Promise<TxId>}\n     */\n    async submitTx(tx) {\n        const responseText = await this.#handle.submitTx(bytesToHex(tx.toCbor()));\n\n        return new TxId(responseText);\n    }\n}\n\nclass WalletHelper {\n    #wallet;\n\n    /**\n     * @param {Wallet} wallet \n     */\n    constructor(wallet) {\n        this.#wallet = wallet;\n    }\n\n    /**\n     * @type {Promise<Address[]>}\n     */\n    get allAddresses() {\n        return this.#wallet.usedAddresses.then(usedAddress => this.#wallet.unusedAddresses.then(unusedAddresses => usedAddress.concat(unusedAddresses)));\n    }\n\n    /**\n     * @returns {Promise<Value>}\n     */\n    async calcBalance() {\n        let sum = new Value();\n\n        const utxos = await this.#wallet.utxos;\n\n        for (const utxo of utxos) {\n            sum = sum.add(utxo.value);\n        }\n\n        return sum;\n    }\n\n    /**\n     * @type {Promise<Address>}\n     */\n    get baseAddress() {\n        return this.allAddresses.then(addresses => assertDefined(addresses[0]));\n    }\n\n    /**\n     * @type {Promise<Address>}\n     */\n    get changeAddress() {\n        return this.#wallet.unusedAddresses.then(addresses => {\n            if (addresses.length == 0) {\n                return this.#wallet.usedAddresses.then(addresses => {\n                    if (addresses.length == 0) {\n                        throw new Error(\"no addresses found\")\n                    } else {\n                        return addresses[addresses.length-1];\n                    }\n                })\n            } else {\n                return addresses[0];\n            }\n        });\n    }\n\n    /**\n     * Returns the first UTxO, so the caller can check precisely which network the user is connected to (eg. preview or preprod)\n     * @type {Promise<?UTxO>}\n     */\n    get refUtxo() {\n        return this.#wallet.utxos.then(utxos => {\n            if(utxos.length == 0) {\n                return null;\n            } else {\n                return assertDefined(utxos[0])\n            }\n        });\n    }\n\n    /**\n     * @param {Value} amount \n     * @param {(allUtxos: UTxO[], anount: Value) => [UTxO[], UTxO[]]} algorithm\n     * @returns {Promise<[UTxO[], UTxO[]]>} - [picked, not picked that can be used as spares]\n     */ \n    async pickUtxos(amount, algorithm = CoinSelection.selectSmallestFirst) {\n        return algorithm(await this.#wallet.utxos, amount);\n    }\n\n    /**\n     * Returned collateral can't contain an native assets (pure lovelace)\n     * TODO: combine UTxOs if a single UTxO isn't enough\n     * @param {bigint} amount - 2 Ada should cover most things\n     * @returns {Promise<UTxO>}\n     */\n    async pickCollateral(amount = 2000000n) {\n        const pureUtxos = (await this.#wallet.utxos).filter(utxo => utxo.value.assets.isZero());\n\n        if (pureUtxos.length == 0) {\n            throw new Error(\"no pure UTxOs in wallet (needed for collateral)\");\n        }\n\n        const bigEnough = pureUtxos.filter(utxo => utxo.value.lovelace >= amount);\n\n        if (bigEnough.length == 0) {\n            throw new Error(\"no UTxO in wallet that is big enough to cover collateral\");\n        }\n\n        bigEnough.sort((a,b) => Number(a.value.lovelace - b.value.lovelace));\n\n        return bigEnough[0];\n    }\n\n    /**\n     * @param {Address} addr\n     * @returns {Promise<boolean>}\n     */\n    async isOwnAddress(addr) {\n        const pkh = addr.pubKeyHash;\n\n        if (pkh === null) {\n            return false;\n        } else {\n            return this.isOwnPubKeyHash(pkh);\n        }\n    }\n\n        /**\n     * @param {PubKeyHash} pkh\n     * @returns {Promise<boolean>}\n     */\n    async isOwnPubKeyHash(pkh) {\n        const addresses = await this.allAddresses;\n\n        for (const addr of addresses) {\n            const aPkh = addr.pubKeyHash;\n\n            if (aPkh !== null && aPkh.eq(pkh)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n\n//////////////////////\n// Section 30: Network\n//////////////////////\n\n/**\n * @typedef {{\n *     getUtxos(address: Address): Promise<UTxO[]>,\n *     submitTx(tx: Tx): Promise<TxId>\n * }} Network\n */\n\n/**\n * @implements {Network}\n */\nclass BlockfrostV0 {\n    #networkName;\n    #projectId;\n\n    /**\n     * @param {string} networkName - \"preview\", \"preprod\" or \"mainnet\"\n     * @param {string} projectId\n     */\n    constructor(networkName, projectId) {\n        this.#networkName = networkName;\n        this.#projectId = projectId\n    }\n\n    /**\n     * Determine the network which the wallet is connected to.\n     * @param {Wallet} wallet \n     * @param {{\n     *     preview?: string,\n     *     preprod?: string,\n     *     mainnet?: string\n     * }} projectIds \n     * @returns {Promise<BlockfrostV0>}\n     */\n    static async resolve(wallet, projectIds) {\n        if (await wallet.isMainnet()) {\n            return new BlockfrostV0(\"mainnet\", assertDefined(projectIds[\"mainnet\"]));\n        } else {\n            const helper = new WalletHelper(wallet);\n\n            const refUtxo = await helper.refUtxo;\n\n            if (refUtxo === null) {\n                throw new Error(\"empty wallet, can't determine which testnet you are connecting to\");\n            } else {\n                const preprodProjectId = projectIds[\"preprod\"];\n                const previewProjectId = projectIds[\"preview\"];\n\n                if (preprodProjectId !== undefined) {\n                    const preprodNetwork = new BlockfrostV0(\"preprod\", preprodProjectId);\n\n                    if (await preprodNetwork.hasUtxo(refUtxo)) {\n                        return preprodNetwork;\n                    }\n                } \n                \n                if (previewProjectId !== undefined) {\n                    const previewNetwork = new BlockfrostV0(\"preview\", previewProjectId);\n\n                    if (!(await previewNetwork.hasUtxo(refUtxo))) {\n                        throw new Error(\"not preview network (hint: provide project id for preprod\");\n                    } else {\n                        return previewNetwork;\n                    }\n                } else {\n                    if (preprodProjectId === undefined) {\n                        throw new Error(\"no project ids for testnets\");\n                    } else {\n                        throw new Error(\"no project id for preview testnet\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {any} obj \n     * @returns \n     */\n    static parseValue(obj) {\n        let value = new Value();\n\n        for (let item of obj) {\n            let qty = BigInt(item.quantity);\n\n            if (item.unit == \"lovelace\") {\n                value = value.add(new Value(qty));\n            } else {\n                let policyID = item.unit.substring(0, 56);\n                let mph = MintingPolicyHash.fromHex(policyID);\n\n                let token = hexToBytes(item.unit.substring(56));\n\n                value = value.add(new Value(0n, new Assets([\n                    [mph, [\n                        [token, qty]\n                    ]]\n                ])));\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * Used by BlockfrostV0.resolve()\n     * @param {UTxO} utxo\n     * @returns {Promise<boolean>}\n     */\n    async hasUtxo(utxo) {\n        const txId = utxo.txId;\n\n        const url = `https://cardano-${this.#networkName}.blockfrost.io/api/v0/txs/${txId.hex}/utxos`;\n\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"project_id\": this.#projectId\n            }\n        });\n\n        return response.ok;\n    }\n\n    /**\n     * Returns oldest UTxOs first, newest last.\n     * TODO: pagination\n     * @param {Address} address \n     * @returns {Promise<UTxO[]>}\n     */\n    async getUtxos(address) {\n        const url = `https://cardano-${this.#networkName}.blockfrost.io/api/v0/addresses/${address.toBech32()}/utxos?order=asc`;\n\n        const response = await fetch(url, {\n            headers: {\n                \"project_id\": this.#projectId\n            }\n        });\n\n        /** \n         * @type {any} \n         */\n        let all = await response.json();\n\n        if (all?.status_code >= 300) {\n            all = []; \n        }\n\n        return all.map(obj => {\n            return new UTxO(\n                TxId.fromHex(obj.tx_hash),\n                BigInt(obj.output_index),\n                new TxOutput(\n                    address,\n                    BlockfrostV0.parseValue(obj.amount),\n                    Datum.inline(ConstrData.fromCbor(hexToBytes(obj.inline_datum)))\n                )\n            );\n        });\n    }  \n\n    /** \n     * @param {Tx} tx \n     * @returns {Promise<TxId>}\n     */\n    async submitTx(tx) {\n        const data = new Uint8Array(tx.toCbor());\n        const url = `https://cardano-${this.#networkName}.blockfrost.io/api/v0/tx/submit`;\n\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/cbor\",\n                \"project_id\": this.#projectId\n            },\n            body: data\n        }).catch(e => {\n            console.error(e);\n            throw e;\n        });\n\n        const responseText = await response.text();\n\n        if (response.status != 200) {\n            throw new Error(responseText);\n        } else {\n            return new TxId(JSON.parse(responseText));  \n        }\n    }   \n}\n\n\n///////////////////////\n// Section 31: Emulator\n///////////////////////\n/**\n * Single address wallet emulator.\n * @implements {Wallet}\n */\nclass WalletEmulator {\n    #network;\n    #privateKey;\n    #publicKey;\n\n    /** \n     * @param {Network} network\n     * @param {NumberGenerator} random - used to generate the private key\n     */\n    constructor(network, random) {\n        this.#network = network;\n        this.#privateKey = WalletEmulator.genPrivateKey(random);\n        this.#publicKey = Crypto.Ed25519.derivePublicKey(this.#privateKey);\n\n        // TODO: staking credentials\n    }\n\n    /**\n     * Generate a private key from a random number generator (not cryptographically secure!)\n     * @param {NumberGenerator} random \n     * @returns {number[]} - Ed25519 private key is 32 bytes long\n     */\n    static genPrivateKey(random) {\n        const key = [];\n\n        for (let i = 0; i < 32; i++) {\n            key.push(Math.floor(random()*256)%256);\n        }\n\n        return key;\n    }\n\n    /**\n     * @type {PubKeyHash}\n     */\n    get pubKeyHash() {\n        return new PubKeyHash(Crypto.blake2b(this.#publicKey, 28));\n    }\n\n    get address() {\n        return Address.fromPubKeyHash(this.pubKeyHash);\n    }\n\n    /**\n     * @returns {Promise<boolean>}\n     */\n    async isMainnet() {\n        return false;\n    }\n\n    /**\n     * Assumed wallet was initiated with at least 1 UTxO at the pubkeyhash address.\n     * @returns {Promise<Address[]>}\n     */\n    get usedAddresses() {\n        return new Promise((resolve, _) => {\n            resolve([this.address])\n        });\n    }\n\n    get unusedAddresses() {\n        return new Promise((resolve, _) => {\n            resolve([])\n        });\n    }\n\n    get utxos() {\n        return new Promise((resolve, _) => {\n            resolve(this.#network.getUtxos(this.address));\n        });\n    }\n\n    /**\n     * Simply assumed the tx needs to by signed by this wallet without checking.\n     * @param {Tx} tx\n     * @returns {Promise<Signature[]>}\n     */\n    async signTx(tx) {\n        return [\n            new Signature(\n                this.#publicKey,\n                Crypto.Ed25519.sign(tx.bodyHash, this.#privateKey)\n            )\n        ];\n    }\n\n    /**\n     * @param {Tx} tx \n     * @returns {Promise<TxId>}\n     */\n    async submitTx(tx) {\n        return await this.#network.submitTx(tx);\n    }\n}\n\n/**\n * collectUtxos removes tx inputs from the list, and appends txoutputs sent to the address to the end.\n * @typedef {{\n *     id(): TxId,\n *     consumes(txId: TxId, utxoIdx: bigint): boolean,\n *     collectUtxos(address: Address, utxos: UTxO[]): UTxO[]\n * }} EmulatorTx\n */\n\n/**\n * @implements {EmulatorTx}\n */\nclass GenesisTx {\n    #id;\n    #address;\n    #lovelace;\n    #assets;\n\n    /**\n     * @param {number} id\n     * @param {Address} address \n     * @param {bigint} lovelace\n     * @param {Assets} assets \n     */\n    constructor(id, address, lovelace, assets) {\n        this.#id = id;\n        this.#address = address;\n        this.#lovelace = lovelace;\n        this.#assets = assets;\n    }\n\n    /**\n     * Simple incremental txId for genesis transactions.\n     * It's very unlikely that regular transactions have the same hash.\n     * @return {TxId}\n     */\n    id() {\n        let bytes = bigIntToBytes(BigInt(this.#id));\n\n        if (bytes.length < 32) {\n            bytes = (new Array(32 - bytes.length)).fill(0).concat(bytes);\n        }\n\n        return new TxId(bytes);\n    }\n\n    /**\n     * @param {TxId} txId \n     * @param {bigint} utxoIdx \n     * @returns \n     */\n    consumes(txId, utxoIdx) {\n        return false;\n    }\n\n    /**\n     * @param {Address} address\n     * @param {UTxO[]} utxos\n     * @returns {UTxO[]}\n     */\n    collectUtxos(address, utxos) {\n        if (eq(this.#address.bytes, address.bytes)) {\n            utxos = utxos.slice();\n\n            utxos.push(new UTxO(\n                this.id(),\n                0n,\n                new TxOutput(\n                    this.#address,\n                    new Value(this.#lovelace, this.#assets)\n                )\n            ));\n\n            return utxos;\n        } else {\n            return utxos;\n        }\n    }\n}\n\n/**\n * @implements {EmulatorTx}\n */\nclass RegularTx {\n    #tx;\n\n    /**\n     * @param {Tx} tx \n     */\n    constructor(tx) {\n        this.#tx = tx;\n    }\n\n    /**\n     * @returns {TxId}\n     */\n    id() {\n        return this.#tx.id();\n    }\n\n    /**\n     * @param {TxId} txId\n     * @param {bigint} utxoIdx\n     * @returns {boolean}\n     */\n    consumes(txId, utxoIdx) {\n        const txInputs = this.#tx.body.inputs;\n\n        return txInputs.some(txInput => {\n            return txInput.txId.hex == txId.hex && txInput.utxoIdx == utxoIdx;\n        });\n    }\n\n    /**\n     * @param {Address} address \n     * @param {UTxO[]} utxos \n     * @returns {UTxO[]}\n     */\n    collectUtxos(address, utxos) {\n        utxos = utxos.filter(utxo => !this.consumes(utxo.txId, utxo.utxoIdx));\n\n        const txOutputs = this.#tx.body.outputs;\n\n        txOutputs.forEach((txOutput, utxoId) => {\n            if (eq(txOutput.address.bytes, address.bytes)) {\n                utxos.push(new UTxO(\n                    this.id(),\n                    BigInt(utxoId),\n                    txOutput\n                ));\n            }\n        });\n\n        return utxos;\n    }\n}\n\n/**\n * @implements {Network}\n */\nclass NetworkEmulator {\n    /**\n     * @type {bigint}\n     */\n    #slot;\n\n    /**\n     * @type {NumberGenerator}\n     */\n    #random;\n\n    /**\n     * @type {GenesisTx[]}\n     */\n    #genesis;\n\n    /**\n     * @type {EmulatorTx[]}\n     */\n    #mempool;\n\n    /**\n     * @type {EmulatorTx[][]}\n     */\n    #blocks;\n\n    /**\n     * @param {number} seed \n     */\n    constructor(seed = 0) {\n        this.#slot = 0n;\n        this.#random = Crypto.mulberry32(seed);\n        this.#genesis = [];\n        this.#mempool = [];\n        this.#blocks = [];\n    }\n\n    /**\n     * Creates a WalletEmulator and adds a block with a single fake unbalanced Tx\n     * @param {bigint} lovelace\n     * @param {Assets} assets\n     * @returns {WalletEmulator}\n     */\n    createWallet(lovelace = 0n, assets = new Assets([])) {\n        const wallet = new WalletEmulator(this, this.#random);\n\n        this.createUtxo(wallet, lovelace, assets);\n\n        return wallet;\n    }\n\n    /**\n     * Creates a UTxO using a GenesisTx.\n     * @param {WalletEmulator} wallet \n     * @param {bigint} lovelace \n     * @param {Assets} assets \n     */\n    createUtxo(wallet, lovelace, assets = new Assets([])) {\n        if (lovelace != 0n || !assets.isZero()) {\n            const tx = new GenesisTx(\n                this.#genesis.length,\n                wallet.address,\n                lovelace,\n                assets\n            );\n\n            this.#genesis.push(tx);\n            this.#mempool.push(tx);\n        }\n    }\n\n    /**\n     * Mint a block with the current mempool, and advance the slot.\n     * @param {bigint} nSlots \n     */\n    tick(nSlots) {\n        if (this.#mempool.length > 0) {\n            this.#blocks.push(this.#mempool);\n\n            this.#mempool = [];\n        }\n\n        this.#slot += nSlots;\n    }\n\n    /**\n     * @param {Address} address\n     * @returns {Promise<UTxO[]>}\n     */\n    async getUtxos(address) {\n        /**\n         * @type {UTxO[]}\n         */\n        let utxos = [];\n\n        for (let block of this.#blocks) {\n            for (let tx of block) {\n                utxos = tx.collectUtxos(address, utxos);\n            }\n        }\n\n        return utxos;\n    }\n\n    /**\n     * @param {TxId} txId \n     * @param {bigint} utxoIdx \n     * @returns {boolean}\n     */\n    isConsumed(txId, utxoIdx) {\n        return this.#blocks.some(b => {\n            return b.some(tx => {\n                return tx.consumes(txId, utxoIdx)\n            })\n        }) || this.#mempool.some(tx => {\n            return tx.consumes(txId, utxoIdx);\n        })\n    }\n\n    /**\n     * @param {Tx} tx \n     * @returns {Promise<TxId>}\n     */\n    async submitTx(tx) {\n        assert(tx.isValid(this.#slot), \"tx invalid (not finalized or slot out of range)\");\n\n        // make sure that none of the inputs have been consumed before\n        assert(tx.body.inputs.every(input => !this.isConsumed(input.txId, input.utxoIdx)), \"input already consumed before\");\n\n        this.#mempool.push(new RegularTx(tx));\n\n        return tx.id();\n    }\n}\n\n/**\n * The following functions are used for some tests in ./test/, and aren't\n * intended to be used by regular users of this library.\n */\nconst exportedForTesting = {\n\tassert: assert,\n\tassertClass: assertClass,\n\tbigIntToBytes: bigIntToBytes,\n\tbytesToBigInt: bytesToBigInt,\n\tsetRawUsageNotifier: setRawUsageNotifier,\n\tsetBlake2bDigestSize: setBlake2bDigestSize,\n\tdumpCostModels: dumpCostModels,\n\tSite: Site,\n\tSource: Source,\n\tCrypto: Crypto,\n\tMapData: MapData,\n\tUplcData: UplcData,\n\tCborData: CborData,\n\tConstrData: ConstrData,\n\tIntData: IntData,\n\tByteArrayData: ByteArrayData,\n\tListData: ListData,\n\tUplcBool: UplcBool,\n\tUplcValue: UplcValue,\n\tUplcDataValue: UplcDataValue,\n\tScriptPurpose: ScriptPurpose,\n\tUplcTerm: UplcTerm,\n\tUplcProgram: UplcProgram,\n\tUplcLambda: UplcLambda,\n\tUplcCall: UplcCall,\n\tUplcBuiltin: UplcBuiltin,\n\tUplcVariable: UplcVariable,\n\tUplcConst: UplcConst,\n\tUplcInt: UplcInt,\n\tIRProgram: IRProgram,\n\tTx: Tx,\n\tTxInput: TxInput,\n\tTxBody: TxBody\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@hyperionbt/helios/helios.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fapp%2Fpages%2Findex.tsx&page=%2F!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);